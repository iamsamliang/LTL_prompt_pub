Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

nstruction is "Fa U Fb, F & a F b, sequenced_visit, 2, Eventually, visit a first and then visit b after., The instruction specifies that we must eventually visit two landmarks in a specific order. We use the "U" operator to specify that the first landmark "a" must be visited until the second landmark "b" is eventually visited. The LTL formula for this instruction is "Fa U Fb".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a, then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (a -> Fb), F & a F b, sequenced_visit, 2, First, go to landmark a. Then, at some point afterward, visit landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "a -> Fb". "eventually visit a" is "Fa". The answer is "Fa & (a -> Fb)".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, Visit landmark a, then landmark b, then landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

(a -> Fb) & (b -> Fc), F & a F & b F c, sequenced_visit, 3, Visit landmark a, then landmark b, and finally landmark c in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". The answer is "(a -> Fb) & (b -> Fc)".

a U Xb & b U Xc & c U Xd, F & a F & b F & c F d, sequenced_visit, 4, Visit landmarks a, b, c, and d in sequence, with each landmark being immediately followed by the next one., We must visit some landmarks in a specific order, with each landmark being immediately followed by the next one. "Immediately followed by" is represented by the "X" LTL operator. "We must visit a, then b, then c, and finally d". Examining each part, "visit a then immediately visit b" is "a U Xb". "visit b then immediately visit c" is "b U Xc". "visit c then immediately visit d" is "c U Xd". There are 4 landmarks so we are done. The answer is "a U Xb & b U Xc & c U Xd".

(!b U a) & (!c U b) & (!d U c) & Fd, F & a F & b F & c F d, sequenced_visit, 4, Visit a, then visit b, then visit c, then visit d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a, we eventually visit c but not until we visit b, and we eventually visit d but not until we visit c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until visit c" is "(!d U c)". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

(Fa & Fb & Fc & Fd) U Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in that order, with the possibility of other landmarks in between., We eventually visit some landmarks in a certain order while we can visit some other landmarks in between. Eventually is the "F" LTL operator. "in that order" specifies we visit the landmarks in the given order. "We eventually visit a, then eventually visit b, then eventually visit c, then eventually visit d, then eventually visit h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. "eventually visit a, then eventually visit b, then eventually visit c, then eventually visit d, then eventually visit h" is "(Fa & Fb & Fc & Fd) U Fh". The answer is "(Fa & Fb & Fc & Fd) U Fh".

F(a & !Fa) & (!b U a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a only once and do not visit landmark b until after you have visited landmark a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only once" specifies we only visit landmark a once. "not until" specifies we cannot visit landmark b until after we visit landmark a. "We eventually visit b but not until we visit a and we only visit a once". Examining each part, "visit a only once" is "F(a & !Fa)". "visit b but not until visit a" is "(!b U a)". The answer is "F(a & !Fa) & (!b U a)".

G((!A U A) & (!A U !visited_A)) & G((!B U B) & (!B U !visited_B)) & (!C U B), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark A only once. Then, visit landmark B only once. After visiting B, you may eventually visit C, but not until after you have visited B., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only once" specifies we only visit a landmark once. "We must first visit A and then visit B and we eventually visit C but not until we visit B". Examining each part, "visit A only once" is "G((!A U A) & (!A U !visited_A))". "visit B only once" is "G((!B U B) & (!B U !visited_B))". "visit C but not until visit B" is "(!C U B)". The answer is "G((!A U A) & (!A U !visited_A)) & G((!B U B) & (!B U !visited_B)) & (!C U B)".

(!b U a) & (!c U b) & (!d U c) & Fa & (Ga & Xb) & (Gb & Xc) & (Gc & Xd) & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks in the following order: a, then b, then c, then d. Only visit each landmark once. Do not visit d until you have visited c, do not visit c until you have visited b, and do not visit b until you have visited a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". We also need to ensure that we only visit each landmark once. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". To ensure that we only visit each landmark once, we can use the "G" LTL operator to specify that each landmark can only be visited once. The answer is "(!b U a) & (!c U b) & (!d U c) & Fa & (Ga & Xb) & (Gb & Xc) & (Gc & Xd) & Fd".

Fa & (a -> (b & !a U c)) & (b -> (c & !b U d)) & (c -> d), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit a, then b, then c, and finally d. You can only visit each landmark once., We must eventually visit some landmarks in a specific order while we can only visit each landmark once. Eventually is the "F" LTL operator. "We eventually visit d but only after we visit c and we visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "a -> (b & !a U c)". "visit c but only after visit b" is "b -> (c & !b U d)". "visit d but only after visit c" is "c -> d". "eventually visit a" is "Fa". The answer is "Fa & (a -> (b & !a U c)) & (b -> (c & !b U d)) & (c -> d)".

 b until you have visited a" specifies that we cannot visit b until we have visited , & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h. Only visit each landmark once and do not visit h until you have visited d. Do not visit d until you have visited c, and do not visit c until you have visited b, and do not visit b until you have visited a., We must visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. "Visit a, then visit b, then visit c, then visit d, and finally visit h" specifies the order of the landmarks. "Only visit each landmark once" specifies that we cannot visit a landmark more than once. "Do not visit h until you have visited d" specifies that we cannot visit h until we have visited d. "Do not visit d until you have visited c" specifies that we cannot visit d until we have visited c. "Do not visit c until you have visited b" specifies that we cannot visit c until we have visited b. "Do not visit b until you have visited a" specifies that we cannot visit b until we have visited a.

G(a -> Fb) & G(b -> Fc) & G(c -> Fd) & G(d -> Fh) & G(!a & !b & !c & !d & !h), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks a, b, c, d, and h in that order without revisiting any landmark., We must visit some landmarks in a certain order without revisiting any landmark. "Visit landmarks a, b, c, d, and h in that order without revisiting any landmark" can be expressed as "a must be visited before b, b must be visited before c, c must be visited before d, d must be visited before h, and we cannot revisit any landmark". Examining each part, "a must be visited before b" is "G(a -> Fb)". "b must be visited before c" is "G(b -> Fc)". Repeat for the remaining parts. "We cannot revisit any landmark" is "G(!a & !b & !c & !d & !h)". The answer is "G(a -> Fb) & G(b -> Fc) & G(c -> Fd) & G(d -> Fh) & G(!a & !b & !c & !d & !h)".

Fa & Fb & Fc & Fd & G((a & !b & !c & !d & !h) | (!a & b & !c & !d & !h) | (!a & !b & c & !d & !h) | (!a & !b & !c & d & !h) | (!a & !b & !c & !d & h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Eventually visit a, then eventually visit b, then eventually visit c, then eventually visit d, then visit h. Visit each landmark only once., We must eventually visit some landmarks in a specific order while visiting each landmark only once. Eventually is the "F" LTL operator. "Visit each landmark only once" is represented by the "exactly once" operator "G((a & !b & !c & !d & !h) | (!a & b & !c & !d & !h) | (!a & !b & c & !d & !h) | (!a & !b & !c & d & !h) | (!a & !b & !c & !d & h))". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd & G((a & !b & !c & !d & !h) | (!a & b & !c & !d & !h) | (!a & !b & c & !d & !h) | (!a & !b & !c & d & !h) | (!a & !b & !c & !d & h))".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Move to a and then move to b., We must eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Move to a and then move to b" specifies we must "eventually visit a and eventually visit b after visiting a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after visiting a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit landmark a, then visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit landmark a, then visit landmark b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (!b U a), F & a F b, sequenced_visit, 2, First, locate landmark "a". Then, locate landmark "b"., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit a" is "Fa". The answer is "Fa & (!b U a)".

nstruction can be split into two parts, F & a F b, sequenced_visit, 2, Move to landmark a, then locate landmark b., This instruction can be split into two parts:

(!b U a) & Fb, F & a F b, sequenced_visit, 2, First, visit landmark a. Then, move to landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a) & Fb".

Fa & G(!b U (a & Fb)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a exactly once and then visit landmark b while avoiding landmark b until after visiting landmark a., We must visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. "Visit landmark a exactly once" is "F a". "Visit landmark b while avoiding landmark b until after visiting landmark a" is "G(!b U (a & Fb))". The answer is "Fa & G(!b U (a & Fb))".

F(a & !b) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Eventually reach a while always staying away from b, then eventually move to b., We eventually visit a landmark while always avoiding another landmark, and then eventually visit a second landmark. Eventually is the "F" LTL operator. "reach a while always staying away from b" is "F(a & !b)". "eventually move to b" is "Fb". The answer is "F(a & !b) & Fb".

Fa & G(!(Fa & XFa)) & G(!Fb) & (Fa -> Fb), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Move to landmark a. Ensure that you only visit a once and do not visit landmark b during this movement. Once you have reached a, locate landmark b., We must eventually visit some landmarks in any order while avoiding some other landmarks. Eventually is the "F" LTL operator. "Move to landmark a" is "Fa". "Ensure that you only visit a once" is "G(!(Fa & XFa))". "do not visit landmark b during this movement" is "G(!Fb)". "Once you have reached a, locate landmark b" is "Fa -> Fb". The answer is "Fa & G(!(Fa & XFa)) & G(!Fb) & (Fa -> Fb)".

(!b U a) & G(!a | !b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Navigate to a once without passing through b. After reaching a, you may then go to b., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without passing through" specifies we cannot visit a certain landmark while visiting another. "We eventually visit b but not until we visit a and we never visit b while visiting a". Examining each part, "visit b but not until visit a" is "(!b U a)". "never visit b while visiting a" is "G(!a | !b)". The answer is "(!b U a) & G(!a | !b)".

(F a) & (G (a -> !X a)) & G (!b) & (a -> F b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a exactly once. Avoid landmark b. After visiting a, navigate to landmark b., We must visit a landmark exactly once and avoid another landmark. "Visit landmark a exactly once" is "(F a) & (G (a -> !X a))". This means that eventually we visit a and once we visit a, we never visit a again. "Avoid landmark b" is "G (!b)". This means that we never visit b. "After visiting a, navigate to landmark b" is "(a -> F b)". This means that eventually we visit b, but only after we visit a. Putting it all together, the LTL formula is "(F a) & (G (a -> !X a)) & G (!b) & (a -> F b)".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

 landmark "a" an infinite number of times, we can use the LTL formula "GF(a)", which means "Globally, we will eventually visit "a" infinitely often, G F a, patrolling, 1, Visit landmark "a" an infinite number of times., To specify that we must visit landmark "a" an infinite number of times, we can use the LTL formula "GF(a)", which means "Globally, we will eventually visit "a" infinitely often".

n LTL using the "G" (globally) and "->" (implies) operators as follows: "G(move -> F a)", which means "It is always the case that if we are moving, then eventually we will reach a, G F a, patrolling, 1, Keep moving towards landmark "a"., "Keep moving towards landmark a" implies that we should continuously move towards a without stopping until we reach it. We can represent this in LTL using the "G" (globally) and "->" (implies) operators as follows: "G(move -> F a)", which means "It is always the case that if we are moving, then eventually we will reach a".

 a" is "G(a), G F a, patrolling, 1, Always visit a., "Always" is the "G" LTL operator, which means "globally" or "always". "Visit a" is simply "a". Therefore, "Always visit a" is "G(a)".

an be expressed in LTL as "G(Fa)", which means "globally, eventually landmark a will be visited, G F a, patrolling, 1, Always continue visiting landmark "a"., "Always continue visiting landmark a" means that once we visit landmark a, we must continue to visit it in the future. This can be expressed in LTL as "G(Fa)", which means "globally, eventually landmark a will be visited".

 a" in LTL is represented as "G a, G F a, patrolling, 1, Always visit a., "Always" is the "G" LTL operator, which means "globally" or "always". "Visit a" is simply "a". Therefore, "Always visit a" in LTL is represented as "G a".

an be expressed in LTL as "G(a)", where "G" is the "Globally" operato, G F a, patrolling, 1, You must always visit a., "You must always visit a" means that at every point in time, we must have visited a. This can be expressed in LTL as "G(a)", where "G" is the "Globally" operator.

F(a & !Fa) & F(b & !Fb) & (a U (b U (c & Fb & Fc)))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once, then visit landmark b exactly once, and finally visit landmark c. Avoid visiting landmarks b and c before visiting landmark a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we visit a landmark only once. "Avoid visiting landmarks b and c before visiting landmark a" specifies that we cannot visit b or c until we visit a. Examining each part, "visit a exactly once" is "F(a & !Fa)". "visit b exactly once" is "F(b & !Fb)". "visit c" is "Fc". We can use the "until" operator to specify that b and c cannot be visited until a is visited. The answer is "F(a & !Fa) & F(b & !Fb) & (a U (b U (c & Fb & Fc))))".

(!b U a) & (!c U b) & Fc, F & a F & b F c, sequenced_visit, 3, First, visit a. Then, visit b. Finally, visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, Visit a, then b, then c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

Fa & (a -> Fb) & ((a & b) -> Fc), F & a F & b F c, sequenced_visit, 3, Visit a, then visit b after a has been visited, and finally visit c after both a and b have been visited., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and a". Examining each part, "visit b after a has been visited" is "(a -> Fb)". "visit c after both a and b have been visited" is "((a & b) -> Fc)". "eventually visit a" is "Fa". The answer is "Fa & (a -> Fb) & ((a & b) -> Fc)".

(Fa & Fb) & Fc, F & a F & b F c, sequenced_visit, 3, Visit landmark a, then visit landmark b, and finally visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit landmark a, then visit landmark b, and finally visit landmark c" specifies we must visit a, then b, then c. Examining each part, "visit a then visit b" is "Fa & Fb". "visit c after visiting a and b" is "(Fa & Fb) & Fc". The answer is "(Fa & Fb) & Fc".

(a -> Fb) & (b -> Fc), F & a F & b F c, sequenced_visit, 3, Visit landmark a, then visit landmark b, and finally visit landmark c in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". The answer is "(a -> Fb) & (b -> Fc)".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

an be represented in LTL as "G(a)", where "G" is the "Globally" operato, G F a, patrolling, 1, Always go to a., "Always go to a" means that we must visit a at every time step. This can be represented in LTL as "G(a)", where "G" is the "Globally" operator.

an be represented in LTL as "G(A)", where G is the "globally" operator, meaning that A must hold at every point in tim, G F a, patrolling, 1, Always visit landmark A., "Always visit landmark A" means that every time we visit a landmark, it must be A. This can be represented in LTL as "G(A)", where G is the "globally" operator, meaning that A must hold at every point in time.

 a" is "G(a), G F a, patrolling, 1, Always visit a., "Always" is the "G" LTL operator which means "globally" or "always". "Visit a" is simply "a". Therefore, "Always visit a" is "G(a)".

 the landmark infinitely many times" is "F( G landmark ), G F a, patrolling, 1, Visit the landmark infinitely many times., To specify that we must visit a landmark infinitely many times, we can use the "G" LTL operator which means "globally" or "always". We can combine it with the "F" operator to specify that we must eventually visit the landmark and keep visiting it infinitely many times. The LTL formula for "Visit the landmark infinitely many times" is "F( G landmark )".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a, then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a, then go to b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then go to b" specifies we must "eventually visit a and eventually visit b but only after visiting a". Examining each part, "eventually visit a" is "Fa". "eventually visit b but only after visiting a" is "(Fa -> Fb)". The answer is "Fa & (Fa -> Fb)".

(!b U a), F & a F b, sequenced_visit, 2, Visit b after visiting a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after visiting" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a, then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, First, go to landmark a. Then, go to landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a) & Fb".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a, then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

(!b U a), F & a F b, sequenced_visit, 2, Go to b after visiting a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit landmark a, then visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit landmark a, then visit landmark b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (!b U a), F & a F b, sequenced_visit, 2, First, reach landmark "a". Then, go to landmark "b"., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit a" is "Fa". The answer is "Fa & (!b U a)".

(!b U a), F & a F b, sequenced_visit, 2, First, visit landmark "a". Then, proceed to landmark "b"., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

Fa & (!b U a) & Fb & (!c U b) & Fc & (!d U c) & Fd & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in sequence" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "visit a then b" is "Fa & (!b U a)". "visit b then c" is "Fb & (!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "Fa & (!b U a) & Fb & (!c U b) & Fc & (!d U c) & Fd & (!h U d) & Fh".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh), F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, then visit d, and finally visit h" specifies we visit the landmarks in the given order. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh)".

Fa & (!b U a) & Fb & (!c U b) & Fc & (!d U c) & Fd & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in sequence" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "visit a then b" is "Fa & (!b U a)". "visit b then c" is "Fb & (!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "Fa & (!b U a) & Fb & (!c U b) & Fc & (!d U c) & Fd & (!h U d) & Fh".

(!b U a) & (!(c U b) U a) & (!(d U c) U (!(d U b) U a)) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit b, then visit c after visiting both a and b, then visit d after visiting a, b, and c, and finally visit h after visiting a, b, c, and d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after visiting both" specifies we only visit one landmark after visiting two others. "We eventually visit h but not until we visit d and we visit d but not until we visit a, b, and c, we visit c but not until we visit a and b, and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit a and b" is "(!(c U b) U a)". "visit d but not until visit a, b, and c" is "(!(d U c) U (!(d U b) U a))". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!(c U b) U a) & (!(d U c) U (!(d U b) U a)) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, proceed to landmark b. After that, make your way to landmark c. Once you have reached landmark c, continue on to landmark d. Finally, head to landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" and "After that" and "Once" and "Finally" specify the order of visiting landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(a -> Fb) & (b -> Fc) & (c -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Visit a, then b, then c, then d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit d but only after we visit c and we visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(a -> Fb) & (b -> Fc) & (c -> Fd)".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Visit landmarks a, b, c, and d in that order, with the possibility of visiting other locations in between., We eventually visit some landmarks in a certain order while we can visit other landmarks in between. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit a, then eventually visit b, then eventually visit c, then eventually visit d". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "(Fa -> Fb)". Repeat for the remaining parts. The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd)".

(!b U a) & (!c U b) & (!d U c) & Fd, F & a F & b F & c F d, sequenced_visit, 4, Visit a, then visit b after visiting a, then visit c after visiting b, then visit d after visiting c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after visiting" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

Fa & (!b U a) & (!c U b) & (!d U c), F & a F & b F & c F d, sequenced_visit, 4, Visit landmark a, then visit landmark b, then visit landmark c, and finally visit landmark d. Other locations may be visited in between., We eventually visit some landmarks in a certain order while we can visit other landmarks in between. Eventually is the "F" LTL operator. "strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, and finally d". Examining each part, "eventually visit a" is "Fa". "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit d but not until visit c" is "(!d U c)". The answer is "Fa & (!b U a) & (!c U b) & (!d U c)".

Fa -> Fb -> Fc -> Fd, F & a F & b F & c F d, sequenced_visit, 4, Walk to a, then walk to b, then walk to c, and finally walk to d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit d but only after we visit c and only after we visit b and only after we visit a". Examining each part, "visit a" is "Fa". "visit b but only after visit a" is "(Fa -> Fb)". Repeat for the remaining parts. "eventually visit d but only after visit c" is "Fc -> Fd". The answer is "Fa -> Fb -> Fc -> Fd".

Fa -> Fb -> Fc -> Fd -> Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then b, then c, then d, and finally h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in this order" specifies we only visit one landmark after visiting another. "We eventually visit h and before that we eventually visit d and before that we eventually visit c and before that we eventually visit b and before that we eventually visit a". Examining each part, "eventually visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "Fa -> Fb -> Fc -> Fd -> Fh".

Fa & Fb & Fc & Fd & Fh & F(true)*, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in that order, with the possibility of visiting other locations in between., We eventually visit some landmarks in a certain order while we can visit other landmarks in between. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after another. "We eventually visit a, then eventually visit b, then eventually visit c, then eventually visit d, then eventually visit h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. "eventually visit any other location" is "F(true)". The answer is "Fa & Fb & Fc & Fd & Fh & F(true)*".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then visit landmark b after visiting a. After visiting b, visit landmark c. After visiting c, visit landmark d. Finally, visit landmark h after visiting d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after visiting" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(Fa -> Fb) & ((Fa -> Fb) -> Fc) & (((Fa -> Fb) -> Fc) -> Fd) -> Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h. Other locations may be visited in between., We eventually visit some landmarks in a certain order while we can visit other landmarks in between. Eventually is the "F" LTL operator. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "(Fa -> Fb)". "eventually visit c after b" is "((Fa -> Fb) -> Fc)". Repeat for the remaining parts. "eventually visit h after d" is "(((Fa -> Fb) -> Fc) -> Fd) -> Fh". The answer is "(Fa -> Fb) & ((Fa -> Fb) -> Fc) & (((Fa -> Fb) -> Fc) -> Fd) -> Fh".

Fa & Xb & Xc & Xd & Xh, F & a F & b F & c F & d F h, sequenced_visit, 5, Walk to a, then walk to b, then walk to c, then walk to d, and finally walk to h., This is a simple sequence of landmarks that must be visited in order. The "X" LTL operator means "next". "We must visit a, then b, then c, then d, and finally h". Examining each part, "visit a then visit b" is "Fa & Xb". "visit b then visit c" is "Fb & Xc". Repeat for the remaining parts. The answer is "Fa & Xb & Xc & Xd & Xh".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh) & G(!a & !b & !c & !d & !h), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h. Do not pass through landmarks b, c, d, or h when traveling to the next landmark. Once a landmark has been visited, do not revisit it., We must visit some landmarks in a certain order while avoiding some landmarks and not revisiting any landmark. Eventually is the "F" LTL operator. "Do not pass through landmarks b, c, d, or h when traveling to the next landmark" means that we must visit a before b, b before c, c before d, and d before h. "Once a landmark has been visited, do not revisit it" means that we must use the "G" LTL operator to specify that once a landmark is visited, it must always be true that it has been visited. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". "visit c after b" is "Fb -> Fc". "visit d after c" is "Fc -> Fd". "visit h after d" is "Fd -> Fh". "do not revisit any landmark" is "G(!a & !b & !c & !d & !h)". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh) & G(!a & !b & !c & !d & !h)".

 h once all other landmarks have been visited at least onc, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks in the following order: a, b, c, d, and h. Do not revisit any landmark. Only visit h after visiting d, visit d after visiting c, visit c after visiting b, and visit b after visiting a., We must visit some landmarks in a specific order without revisiting any landmark. "Visit landmarks in the following order: a, b, c, d, and h" specifies the order. "Do not revisit any landmark" specifies that we cannot revisit any landmark. "Only visit h after visiting d, visit d after visiting c, visit c after visiting b, and visit b after visiting a" specifies the order in which we can visit certain landmarks. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & G(!(a & b & c & d) U h)". The last part specifies that we can only visit h once all other landmarks have been visited at least once.

Fa & (a -> F b) & ((a & b) -> F c) & ((a & b & c) -> F d) & ((a & b & c & d) -> F h), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h. Do not revisit any previously visited landmarks while traveling to the next one., We must visit some landmarks in a certain order while we cannot revisit any previously visited landmarks while traveling to the next one. "Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h" specifies the order of landmarks to visit. "Do not revisit any previously visited landmarks while traveling to the next one" specifies that we cannot revisit any previously visited landmarks. Examining each part, "visit a" is "F a". "visit b after a" is "(a -> F b)". "visit c after b" is "((a & b) -> F c)". Repeat for the remaining parts. "visit h after d" is "((a & b & c & d) -> F h)". The answer is "Fa & (a -> F b) & ((a & b) -> F c) & ((a & b & c) -> F d) & ((a & b & c & d) -> F h)".

(Fa) & ((Fb) & (!a U b)) & (((Fa) & (Fc)) & ((!a U c) & (!b U c))) & ((F d) & (!a U d) & (!b U d) & (!c U d)) & (Fh & (!a U h) & (!b U h) & (!c U h) & (!d U h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, First, go to landmark a without visiting landmarks b, c, d, or h. Then, go to landmark b without visiting landmarks c, d, or h, or revisiting landmark a. Alternatively, revisit landmark a before going to landmark c without visiting landmarks d or h, or revisiting landmarks a or b. After that, go to landmark d without visiting landmark h or revisiting landmarks a, b, or c. Finally, go to landmark h without revisiting landmarks a, b, c, or d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting" and "revisiting" specify we cannot visit certain landmarks until we visit others first. "First, visit a. Then, visit b without revisiting a. Alternatively, revisit a before visiting c without revisiting a or b. After that, visit d without revisiting a, b, or c. Finally, visit h without revisiting a, b, c, or d". Examining each part, "visit a" is "F a". "visit b without revisiting a" is "(F b) & (!a U b)". "revisit a before visiting c without revisiting a or b" is "((F a) & (Fc)) & ((!a U c) & (!b U c))". "visit d without revisiting a, b, or c" is "(F d) & (!a U d) & (!b U d) & (!c U d)". "visit h without revisiting a, b, c, or d" is "Fh & (!a U h) & (!b U h) & (!c U h) & (!d U h)". The answer is "(Fa) & ((Fb) & (!a U b)) & (((Fa) & (Fc)) & ((!a U c) & (!b U c))) & ((F d) & (!a U d) & (!b U d) & (!c U d)) & (Fh & (!a U h) & (!b U h) & (!c U h) & (!d U h))".

"(!b U a) & (!c U b) & (!d U c) & (!h U d) & G((a -> X(!b & !c & !d & !h)) & (b -> X(!c & !d & !h)) & (c -> X(!d & !h)) & (d -> X(!h))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks a, b, c, d, and h in sequence without skipping any of them. Do not revisit any landmark after you have already visited it., We must visit some landmarks in a specific order without revisiting any landmark. "Visit landmarks a, b, c, d, and h in sequence without skipping any of them" is equivalent to "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". "Do not revisit any landmark after you have already visited it" is equivalent to "Once we visit a landmark, we must not visit it again". We can express this using the "G" (globally) and "X" (next) operators. The final LTL formula is: "(!b U a) & (!c U b) & (!d U c) & (!h U d) & G((a -> X(!b & !c & !d & !h)) & (b -> X(!c & !d & !h)) & (c -> X(!d & !h)) & (d -> X(!h)))".

(!a U true) & (!b U a) & (!c U b) & (!d U c) & G(!a & !b & !c), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, visit landmark A without passing through landmarks B, C, or D. Then, visit landmark B without passing through landmarks C or D. Next, visit landmark C without passing through landmark D. Finally, visit landmark D without revisiting any previous landmarks., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without passing through" specifies we cannot visit certain landmarks before visiting others. "We eventually visit A but not until we visit no landmarks. We eventually visit B but not until we visit A. We eventually visit C but not until we visit B. We eventually visit D but not until we visit C and we do not revisit A, B, or C". Examining each part, "visit A but not until visit no landmarks" is "(!a U true)". "visit B but not until visit A" is "(!b U a)". "visit C but not until visit B" is "(!c U b)". "visit D but not until visit C and do not revisit A, B, or C" is "(!d U c) & G(!a & !b & !c)". The answer is "(!a U true) & (!b U a) & (!c U b) & (!d U c) & G(!a & !b & !c)".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & G(!a U (G(!b U (G(!c U (G(!d U true))))))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks in the following order: a, b, c, and d. Do not revisit any landmark., We must visit some landmarks in a specific order without revisiting any landmark. "Visit landmarks in the following order: a, b, c, and d" is equivalent to "We eventually visit a, then eventually visit b after a, then eventually visit c after b, and finally eventually visit d after c". "Do not revisit any landmark" is equivalent to "Once we visit a landmark, we never visit it again". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". "eventually visit c after b" is "Fb -> Fc". "eventually visit d after c" is "Fc -> Fd". "Once we visit a landmark, we never visit it again" is equivalent to "G(!a U (G(!b U (G(!c U (G(!d U true)))))))". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & G(!a U (G(!b U (G(!c U (G(!d U true)))))))".

G(a -> X(b -> X(c -> Xd))) & G((a -> !b) & (b -> !c) & (c -> !d)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark a, then visit landmark b, then visit landmark c, and finally visit landmark d. Do not revisit any previously visited landmarks while traveling to the next one., We must visit some landmarks in a certain order while we cannot revisit any previously visited landmarks while traveling to the next one. "Visit landmark a, then visit landmark b, then visit landmark c, and finally visit landmark d" specifies the order of landmarks to visit. "Do not revisit any previously visited landmarks while traveling to the next one" specifies that we cannot revisit any previously visited landmarks while traveling to the next one. Examining each part, "visit a and then visit b and then visit c and then visit d" is "G(a -> X(b -> X(c -> Xd)))". "Do not revisit any previously visited landmarks while traveling to the next one" is "G((a -> !b) & (b -> !c) & (c -> !d))". The answer is "G(a -> X(b -> X(c -> Xd))) & G((a -> !b) & (b -> !c) & (c -> !d))".

(!a U (a & !b & !c & !d)) & (!b U a) & (!c U b) & (!d U c) & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, go to landmark a without visiting landmarks b, c, or d. Then, go to landmark b without visiting landmarks c or d, or revisiting landmark a. After that, go to landmark c without visiting landmark d or revisiting landmarks a or b. Finally, go to landmark d without revisiting landmarks a, b, or c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting" and "without revisiting" specify we cannot visit or revisit certain landmarks. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a and we eventually visit a without visiting b, c, or d". Examining each part, "visit a without visiting b, c, or d" is "(!a U (a & !b & !c & !d))". "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!a U (a & !b & !c & !d)) & (!b U a) & (!c U b) & (!d U c) & Fd".

(!b U a) & (!c U b) & Fd & G(a -> Fb) & G(b -> Fc) & G(c -> Fd) & G(!a U (a & !b)) & G(!b U (b & !c)) & G(!c U (c & !d)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks a, b, c, and d in that order without skipping any of them. Do not revisit any landmark once you have been there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". "without skipping any of them" specifies we cannot skip any landmark. "Do not revisit any landmark once you have been there" specifies we cannot revisit any landmark. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". "We cannot skip any landmark" is "G(a -> Fb) & G(b -> Fc) & G(c -> Fd)". "We cannot revisit any landmark" is "G(!a U (a & !b)) & G(!b U (b & !c)) & G(!c U (c & !d))". The answer is "(!b U a) & (!c U b) & Fd & G(a -> Fb) & G(b -> Fc) & G(c -> Fd) & G(!a U (a & !b)) & G(!b U (b & !c)) & G(!c U (c & !d))".

G(!b & !c) U a & G(!c) U b & G(!(a | b)) U c, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit a without passing through b or c. Then, visit b without passing through c. Finally, visit c without revisiting any of the previous landmarks., We must visit some landmarks in a certain order while we cannot pass through some landmarks to reach others. Eventually is the "F" LTL operator. "without passing through" specifies we cannot visit certain landmarks to reach others. "First, visit a without passing through b or c" is "G(!b & !c) U a". "Then, visit b without passing through c" is "G(!c) U b". "Finally, visit c without revisiting any of the previous landmarks" is "G(!(a | b)) U c". The answer is "G(!b & !c) U a & G(!c) U b & G(!(a | b)) U c".

(!b U a) & (!c U b) & G(!a | (b U !a)) & G(!b | (c U !b)) & G!c, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmarks in the following order: a, then b, then c. Do not revisit any landmark., We must visit some landmarks in a specific order without revisiting any landmark. "Strictly" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "We never visit a again after we visit b" is "G(!a | (b U !a))". "We never visit b again after we visit c" is "G(!b | (c U !b))". "We never visit c again" is "G!c". The answer is "(!b U a) & (!c U b) & G(!a | (b U !a)) & G(!b | (c U !b)) & G!c".

Fa & G((!b U a) & (!c U b)) & G((!c U b) & (!d U c)), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a, then visit b, then visit c. Do not revisit any previous locations while traveling to the next one., We must eventually visit some landmarks in a specific order while we cannot revisit any previous locations while traveling to the next one. Eventually is the "F" LTL operator. "Do not revisit any previous locations while traveling to the next one" can be expressed as "G((!b U a) & (!c U b))". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". "eventually visit c" is "Fc". The answer is "Fa & G((!b U a) & (!c U b)) & G((!c U b) & (!d U c))".

(!b U a) & (!c U b) & G(!a & !c), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, go to landmark a. Then, go to landmark b without visiting landmarks c or a again. After that, go to landmark c without revisiting landmarks a or b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without revisiting" specifies we cannot visit a landmark again. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b and we never visit a or c again". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "never visit a or c again" is "G(!a & !c)". The answer is "(!b U a) & (!c U b) & G(!a & !c)".

(!b U a) & (!c U b) & G(!a & !b & !c), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmarks a, b, and c in that order without skipping any of them. Do not revisit any of them once you have been there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "Do not revisit any of them once you have been there" specifies that we can only visit each landmark once. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we never visit a, b, or c again". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "never visit a, b, or c again" is "G(!a & !b & !c)". The answer is "(!b U a) & (!c U b) & G(!a & !b & !c)".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

G(a & b & c), & G F a & G F b G F c, patrolling, 3, Infinitely visit landmarks a, b, and c in any order., We must infinitely visit some landmarks in any order. Infinitely is the "G" LTL operator. "visit" specifies we must "infinitely visit a, b, and c". Examining each part, "infinitely visit a" is "Ga". "infinitely visit b" is "Gb". Repeat for the remaining parts. The answer is "G(a & b & c)".

Ga & (a -> Gb) & (b -> Gc) & (c -> Ga), & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c in a continuous loop without any breaks., We must continuously visit some landmarks in a certain order without any breaks. Always is the "G" LTL operator. "in a continuous loop" specifies we must continuously visit the landmarks in a loop. "We must always visit a, then b, then c, and then a again". Examining each part, "always visit a" is "Ga". "visit b after a" is "a -> Gb". "visit c after b" is "b -> Gc". "visit a after c" is "c -> Ga". The answer is "Ga & (a -> Gb) & (b -> Gc) & (c -> Ga)".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit landmarks a, b, c, and d., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit landmarks a, b, c, and d without any breaks., We must continuously visit some landmarks in a certain order without any breaks. Continuously is the "G" LTL operator. "visit" specifies we must "continuously visit a, b, c, and d". Examining each part, "continuously visit a" is "Ga". "continuously visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit landmarks a, b, c, and d., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, b, c, and d in any order., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "visit a, b, c, and d". Examining each part, "visit a" is "Ga". "visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit a, b, c, d, and h., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

G(Fa -> Fb) & G(Fb -> Fc) & G(Fc -> Fd) & G(Fd -> Fh), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h without interruption., We must always visit some landmarks in a certain order without interruption. Always is the "G" LTL operator. "visit landmarks a, b, c, d, and h without interruption" specifies we must visit all landmarks in order without skipping any. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "G(Fa -> Fb) & G(Fb -> Fc) & G(Fc -> Fd) & G(Fd -> Fh)".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h in any order., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "visit a, b, c, d, and h". Examining each part, "visit a" is "Ga". "visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

F(tasks_completed) & F(A & tasks_completed) & (A -> F(B)) & (!A U tasks_completed), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, complete all remaining tasks. Then, visit landmark A. After visiting landmark A, you may visit landmark B. You may not revisit landmark A until all tasks are completed., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First, complete all remaining tasks" specifies we must complete all tasks before visiting any landmarks. "Then, visit landmark A" specifies we must visit A after completing all tasks. "After visiting landmark A, you may visit landmark B" specifies we may visit B after visiting A. "You may not revisit landmark A until all tasks are completed" specifies we cannot revisit A until all tasks are completed. Examining each part, "complete all tasks" is "F(tasks_completed)". "visit A after completing all tasks" is "F(A & tasks_completed)". "visit B after visiting A" is "(A -> F(B))". "cannot revisit A until all tasks are completed" is "(!A U tasks_completed)". The answer is "F(tasks_completed) & F(A & tasks_completed) & (A -> F(B)) & (!A U tasks_completed)".

(!b U a) & G(!a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, visit landmark "a". Then, visit landmark "b". Make sure not to return to landmark "a"., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Make sure not to return" specifies that we must not visit "a" again after visiting "b". "We eventually visit b but not until we visit a and we never visit a again". Examining each part, "visit b but not until visit a" is "(!b U a)". "never visit a again" is "G(!a)". The answer is "(!b U a) & G(!a)".

, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a, then visit landmark b. Do not visit any other landmarks in between or repeat any visits., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Do not visit any other landmarks in between or repeat any visits" specifies that we cannot visit any other landmarks in between a and b, and we cannot repeat any visits. "We eventually visit b but not until we visit a and we never visit any other landmark in between a and b". Examining each part, "visit b but not until visit a" is "(!b U a)". "never visit any other landmark in between a and b" is "G(!c & !d & !e & ...)". Repeat for the remaining landmarks. The answer is "(!b U a) & G(!c & !d & !e & ...) & G(!a & !c & !d & !e & ...) & G(!a & !b & !c & !d & !e & ...) & ...".

Fa & G(!a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, visit landmark a. Then, visit landmark b without revisiting landmark a., We eventually visit some landmarks in a certain order while we cannot revisit some landmarks after we leave them. Eventually is the "F" LTL operator. "without revisiting" specifies we cannot revisit a landmark after we leave it. "We eventually visit b but not until we visit a and we never visit a again". Examining each part, "eventually visit b" is "Fb". "visit a but not until we never visit a again" is "Fa & G(!a)". The answer is "Fa & G(!a) & Fb".

> (!b U a)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, reach landmark a. Then, once you have reached a, proceed to landmark b without visiting any other landmarks in between., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting any other landmarks in between" specifies we cannot visit any other landmarks between a and b. "We eventually visit b but not until we visit a and we do not visit any other landmarks between a and b". Examining each part, "visit b but not until visit a" is "(!b U a)". "not visit any other landmarks between a and b" is "G((!a & !c & !d & ...) -> (!b U a))". The answer is "(!b U a) & G((!a & !c & !d & ...) -> (!b U a))".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a and then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a and then visit b" specifies we must "eventually visit a and eventually visit b after visiting a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after visiting a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit landmark a, then visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit landmark a, then visit landmark b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit landmark a, then visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit landmark a, then visit landmark b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

Fa -> Fb, F & a F b, sequenced_visit, 2, Visit a, then go to b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then go to b" specifies we must first visit a and then visit b. Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa -> Fb".

an be represented in LTL as "G(a)", which means "a must hold globally (always), G F a, patrolling, 1, Always visit landmark a., "Always visit landmark a" means that every time we visit a landmark, it must be landmark a. This can be represented in LTL as "G(a)", which means "a must hold globally (always)".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

an be expressed in LTL as "G(Fa)", which means "globally (G) in the future (F), a will eventually be visited (Fa), G F a, patrolling, 1, Always visit a in the future., "Always visit a in the future" means that we must visit landmark a at every point in the future. This can be expressed in LTL as "G(Fa)", which means "globally (G) in the future (F), a will eventually be visited (Fa)".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

G(a & b), & G F a G F b, patrolling, 2, Always visit landmarks a and b., We must always visit landmarks a and b. Always is the "G" LTL operator. "visit" specifies we must "visit a and b". Examining each part, "visit a" is "a" and "visit b" is "b". The answer is "G(a & b)".

nstruction is "G(Fa & Fb), & G F a G F b, patrolling, 2, Visit landmarks A and B repeatedly., To visit landmarks A and B repeatedly, we can use the "G" LTL operator which means "globally" or "always". We want to ensure that we always eventually visit A and B, and we can repeat this indefinitely. Therefore, the LTL formula for this instruction is "G(Fa & Fb)".

G(a) & G(b), & G F a G F b, patrolling, 2, Always visit a and b repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". The answer is "G(a) & G(b)".

 landmarks A and B at least once each" is "F(A & B), & G F a G F b, patrolling, 2, After a certain point in time, you must eventually visit landmarks A and B at least once each., "After a certain point in time" can be represented by the "F" operator, which means "eventually". "You must eventually visit landmarks A and B at least once each" can be represented by the formula "F(A & B)", which means "eventually (A and B)". Therefore, the LTL formula for "After a certain point in time, you must eventually visit landmarks A and B at least once each" is "F(A & B)".

G(a & b), & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks. Always is the "G" LTL operator. "visit a and b" is "G(a & b)". The answer is "G(a & b)".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit a, b, and c repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

ormula specifies that eventually (at some point in the future), we will visit landmarks a, b, and c at least onc, & G F a & G F b G F c, patrolling, 3, Eventually, visit a, b, and c at least once., The LTL formula for "Eventually, visit a, b, and c at least once" is "Fa & Fb & Fc". This formula specifies that eventually (at some point in the future), we will visit landmarks a, b, and c at least once.

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit a, b, and c repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

an be expressed in LTL as "G(a)", which means "a must hold globally (always), G F a, patrolling, 1, Always visit landmark a., "Always visit landmark a" means that every time we visit a landmark, it must be landmark a. This can be expressed in LTL as "G(a)", which means "a must hold globally (always)".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

G a, G F a, patrolling, 1, Always visit landmark a., We must always visit landmark a. Always is the "G" LTL operator. "visit a" is "a". The answer is "G a".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, Visit landmark a, then landmark b, then landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, Visit landmark a, then landmark b, then landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

Fa & Fb & (Fa & Fb) U c, F & a F & b F c, sequenced_visit, 3, Visit landmark a, then visit landmark b, and finally visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit landmark a, then visit landmark b, and finally visit landmark c" specifies we must visit a, then b, and then c. Examining each part, "visit a then visit b" is "Fa & Fb". "visit c after visiting a and b" is "(Fa & Fb) U c". The answer is "Fa & Fb & (Fa & Fb) U c".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, Visit landmark a, then landmark b, and finally landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark A. Then, visit landmark B. After visiting B, visit landmark C. Make sure to visit each landmark only once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specify we only visit one landmark after visiting another. "We eventually visit C but not until we visit B and we visit B but not until we visit A". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "eventually visit C" is "FC". We also need to make sure to visit each landmark only once. This can be expressed as "G((A -> X(!B & !C & !D & ...)) & (B -> X(!C & !D & ...)) & (C -> X(!D & ...)) & ...)". Here, "X" is the "next" LTL operator and "G" is the "globally" LTL operator. The ellipsis (...) represents all the remaining landmarks that need to be visited. The answer is "(!B U A) & (!C U B) & FC & G((A -> X(!B & !C & !D & ...)) & (B -> X(!C & !D & ...)) & (C -> X(!D & ...)) & ...)".

(b -> F a) & (a & !c U b) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once and do not visit landmark b before visiting a. Then, visit landmark b exactly once without visiting landmark c before visiting b. Finally, visit landmark c at some point in the future., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we only visit a landmark once. "not before" specifies we cannot visit one landmark before another. "We eventually visit a but not until we visit b, we eventually visit b but not until we visit a and not until we visit c, and we eventually visit c". Examining each part, "visit a but not until visit b" is "(b -> F a)". "visit b but not until visit a and not until visit c" is "(a & !c U b)". "eventually visit c" is "Fc". The answer is "(b -> F a) & (a & !c U b) & Fc".

Fa & (!b U a) & (!c U b) & Fb & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a, b, and c once. Do not visit b without first visiting a, and do not visit c without first visiting b., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "once" specifies we only visit each landmark once. "Do not visit b without first visiting a" is "(!b U a)". "Do not visit c without first visiting b" is "(!c U b)". "eventually visit a" is "Fa". Repeat for the remaining parts. The answer is "Fa & (!b U a) & (!c U b) & Fb & Fc".

(Fa & !F(a U Fa)) & (!b U a) & (!c U b) & (Fc & !F(c U Fc)), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a once, then visit landmark b, and finally visit landmark c once., We must eventually visit some landmarks in a specific order while visiting some landmarks only once. Eventually is the "F" LTL operator. "once" specifies we only visit a landmark once. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b and we only visit a and c once". Examining each part, "visit a once" is "(Fa & !F(a U Fa))". "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(Fa & !F(a U Fa)) & (!b U a) & (!c U b) & (Fc & !F(c U Fc))".

Ga & Gb & Gc, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

!a & F(a) & F(!b & Fb) & F(!c & Xc) & (!d & Fd) & (Fd -> Fh), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, First, visit landmark a exactly once. Then, at some point in time, visit landmark b exactly once. After that, visit landmark c exactly once in the future. Finally, visit landmark d exactly once, followed by a visit to landmark h., We must eventually visit some landmarks in a specific order while visiting some landmarks exactly once. Eventually is the "F" LTL operator. "exactly once" is represented by the "!" operator. "First, visit landmark a exactly once" is "!a & F(a)". "At some point in time, visit landmark b exactly once" is "F(!b & Fb)". "visit landmark c exactly once in the future" is "F(!c & Xc)". "visit landmark d exactly once" is "!d & Fd". "followed by a visit to landmark h" is "Fd -> Fh". The answer is "!a & F(a) & F(!b & Fb) & F(!c & Xc) & (!d & Fd) & (Fd -> Fh)".

, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks a, b, c, d, and h exactly once. Do not visit b unless you have already visited a. Do not visit c unless you have already visited b. Do not visit d unless you have already visited c. Do not visit h unless you have already visited d., We must visit some landmarks exactly once in a certain order while we cannot visit some landmarks until we visit others first. "Visit landmarks a, b, c, d, and h exactly once" specifies that we must visit each landmark exactly once. "Do not visit b unless you have already visited a" is equivalent to "a -> Fb", which means that if we visit a, then we must eventually visit b. Similarly, "Do not visit c unless you have already visited b" is equivalent to "b -> Fc", "Do not visit d unless you have already visited c" is equivalent to "c -> Fd", and "Do not visit h unless you have already visited d" is equivalent to "d -> Fh". Finally, we need to ensure that we visit each landmark exactly once. This can be expressed as "(Fa & (!b U a)) & (Fb & (!c U b)) & (Fc & (!d U c)) & (Fd & (!h U d)) & ((!a & !b & !c & !d) -> Fh)". The last part of the formula ensures that we eventually visit h only after we have visited all other landmarks. The complete LTL formula is:

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh) & G(!(a & b & c & d & h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h. Make sure to visit each landmark exactly once and follow this exact order., We must visit some landmarks in a specific order and exactly once. "Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h" specifies the order. "Make sure to visit each landmark exactly once" specifies that we must visit each landmark only once. Examining each part, "visit a" is "F a". "visit b after a" is "Fa -> Fb". "visit c after b" is "Fb -> Fc". "visit d after c" is "Fc -> Fd". "visit h after d" is "Fd -> Fh". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh) & G(!(a & b & c & d & h))".

G(a) & G(b) & G(c), & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c repeatedly., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit landmarks a, b, and c repeatedly" specifies we must always visit a, b, and c. Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c)".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

G(a) & G(b) & G(c), & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c repeatedly., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit landmarks a, b, and c repeatedly" specifies we must always visit a, b, and c. Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c)".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit locations a, b, c, and d., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, b, c, and d., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

G(a) & G(b -> F(a)) & G(c -> F(b)) & G(d -> F(c)) & G(d), & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, then b, then c, and then d repeatedly., We must repeatedly visit some landmarks in a certain order. Always is the "G" LTL operator. "repeatedly" is the "G" LTL operator as well. "We always visit a, then b, then c, and then d". Examining each part, "always visit a" is "G(a)". "always visit b after a" is "G(b -> F(a))". "always visit c after b" is "G(c -> F(b))". "always visit d after c" is "G(d -> F(c))". The answer is "G(a) & G(b -> F(a)) & G(c -> F(b)) & G(d -> F(c)) & G(d)".

G(a) & G(b) & G(c) & G(d), & G F a & G F b & G F c G F d, patrolling, 4, Always stop at landmarks a, b, c, and d., We must always visit some landmarks in any order. Always is the "G" LTL operator. "stop at" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c) & G(d)".

an be represented in LTL as "G(a)", which means "a must hold globally/always, G F a, patrolling, 1, Always visit landmark a., "Always visit landmark a" means that every time we visit a landmark, it must be landmark a. This can be represented in LTL as "G(a)", which means "a must hold globally/always".

e "G" operator stands for "globally" and means that the formula must hold at all times in the futur, G F a, patrolling, 1, Always go to a., "Always go to a" means that every time we make a visit, it must be to landmark a. This can be represented in LTL as "G(a)". The "G" operator stands for "globally" and means that the formula must hold at all times in the future.

G a, G F a, patrolling, 1, Always stop at landmark a., We must always stop at landmark a. Always is the "G" LTL operator. "stop at a" is "a". The answer is "G a".

an be expressed in LTL as "G(a)", which means "a holds at all future times, G F a, patrolling, 1, Always visit landmark a., "Always visit landmark a" means that every time we visit a landmark, it must be landmark a. This can be expressed in LTL as "G(a)", which means "a holds at all future times".

 a, G F a, patrolling, 1, Always patrol landmark a., "Always patrol landmark a" means that we must visit landmark a infinitely often. This can be expressed in LTL as "G(Fa)". The "F" operator means "eventually" and the "G" operator means "always" or "globally". So "G(Fa)" means "always eventually visit a".

eans that globally, we will keep visiting a until we reach b, and then we will keep visiting b until we reach a, and so o, & G F a G F b, patrolling, 2, Keep moving back and forth between landmarks a and b., To keep moving back and forth between landmarks a and b, we can use the LTL operator "G" for globally and "X" for next. We want to ensure that we always alternate between a and b. The LTL formula for this is "(G (a U b)) & (G (b U a))". This means that globally, we will keep visiting a until we reach b, and then we will keep visiting b until we reach a, and so on.

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit b and a., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

G(a) & G(b) & G(c), & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c repeatedly., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit landmarks a, b, and c repeatedly" specifies we must always visit a, b, and c. Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c)".

Gc & G(a -> Fc) & G(b -> (Fa & Fc)), & G F a & G F b G F c, patrolling, 3, Always visit landmarks c, a, and b., We must always visit some landmarks in a certain order. Always is the "G" LTL operator. "visit landmarks c, a, and b" specifies we must always visit c, then a, then b. Examining each part, "always visit c" is "Gc". "always visit a after c" is "G(a -> Fc)". "always visit b after a and c" is "G(b -> (Fa & Fc))". The answer is "Gc & G(a -> Fc) & G(b -> (Fa & Fc))".

G (a -> (F c & F b)), & G F a & G F b G F c, patrolling, 3, Always visit a, then eventually visit c, then eventually visit b, and repeat this pattern infinitely., We must repeatedly visit some landmarks in a certain order. Always is the "G" LTL operator. "eventually visit" specifies we must "eventually visit a, c, and b". Examining each part, "always visit a" is "G a". "eventually visit c" is "F c". "eventually visit b" is "F b". We must repeat this pattern infinitely, so we use the "G" operator again to ensure that the pattern repeats indefinitely. The answer is "G (a -> (F c & F b))".

Gc & G(b -> Fc) & G(a -> (Fb & Fc)), & G F a & G F b G F c, patrolling, 3, Always move to c, then b, then a., We must always visit some landmarks in a certain order. Always is the "G" LTL operator. "move to" specifies we must "always visit c, then b, then a". Examining each part, "always visit c" is "Gc". "always visit b after c" is "G(b -> Fc)". "always visit a after b and c" is "G(a -> (Fb & Fc))". The answer is "Gc & G(b -> Fc) & G(a -> (Fb & Fc))".

G(a) & G(b) & G(c), & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c repeatedly., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit landmarks a, b, and c repeatedly" specifies we must always visit a, b, and c. Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c)".

(Fh -> (Fd & G(h -> Fd))) & ((Fh & Fd) -> (Fc & G(d -> Fc))) & ((Fh & Fd & Fc) -> (Fb & G(c -> Fb))) & ((Fh & Fd & Fc & Fb) -> (Fa & G(b -> Fa))), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Visit landmarks h, d, c, b, and a in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit a after visiting b, c, d, and h in that order". Examining each part, "visit h" is "Fh". "visit d after visiting h" is "(Fh -> (Fd & G(h -> Fd)))". "visit c after visiting d" is "((Fh & Fd) -> (Fc & G(d -> Fc)))". "visit b after visiting c" is "((Fh & Fd & Fc) -> (Fb & G(c -> Fb)))". "visit a after visiting b" is "((Fh & Fd & Fc & Fb) -> (Fa & G(b -> Fa)))". The answer is "(Fh -> (Fd & G(h -> Fd))) & ((Fh & Fd) -> (Fc & G(d -> Fc))) & ((Fh & Fd & Fc) -> (Fb & G(c -> Fb))) & ((Fh & Fd & Fc & Fb) -> (Fa & G(b -> Fa)))".

(G b -> G c) & (G c -> G a) & (G a -> G d) & (G d -> F h) & (G (b -> G c) & G (c -> G a) & G (a -> G d) & G (d -> F h)), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit b, then c, then a, then d, and finally h. Repeat this sequence infinitely., We must visit some landmarks in a certain order repeatedly. Always is the "G" LTL operator. "Repeat this sequence infinitely" specifies we must repeat the sequence infinitely. "We always visit b, then c, then a, then d, and finally h". Examining each part, "always visit b" is "G b". "visit c after b" is "b -> G c". Repeat for the remaining parts. "repeat this sequence infinitely" is "(G (b -> G c) & G (c -> G a) & G (a -> G d) & G (d -> F h))". The answer is "(G b -> G c) & (G c -> G a) & (G a -> G d) & (G d -> F h) & (G (b -> G c) & G (c -> G a) & G (a -> G d) & G (d -> F h))".

G(a & b & c & d & h), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h repeatedly., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit landmarks a, b, c, d, and h repeatedly" specifies we must repeatedly visit these landmarks. Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "G(a & b & c & d & h)".

Fd -> Fh -> Fb -> Fc -> Fa, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Visit d, then h, then b, then c, and finally a., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit d, then h, then b, then c, and finally a" specifies the order of visiting landmarks. Examining each part, "eventually visit d" is "Fd". "eventually visit h after d" is "Fd -> Fh". "eventually visit b after h" is "Fh -> Fb". "eventually visit c after b" is "Fb -> Fc". "eventually visit a after c" is "Fc -> Fa". The answer is "Fd -> Fh -> Fb -> Fc -> Fa".

Fa & G(!(Fb | Fc) U Fa) & Fb & G(!Fc U Fb) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once. Do not visit landmarks b or c before visiting a. Then, visit landmark b exactly once. Do not visit landmark c before visiting b. Finally, visit landmark c., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we only visit a landmark once. "Do not visit landmarks b or c before visiting a" is equivalent to "eventually visit a and not (eventually visit b or eventually visit c before eventually visiting a)". "Do not visit landmark c before visiting b" is equivalent to "eventually visit b and not eventually visit c before eventually visiting b". "Finally, visit landmark c" is "eventually visit c". Examining each part, "eventually visit a" is "Fa". "not (eventually visit b or eventually visit c before eventually visiting a)" is "G(!(Fb | Fc) U Fa)". "eventually visit b and not eventually visit c before eventually visiting b" is "Fb & G(!Fc U Fb)". "eventually visit c" is "Fc". The answer is "Fa & G(!(Fb | Fc) U Fa) & Fb & G(!Fc U Fb) & Fc".

G(!(b | c) U a) & G(!(c) U b) & Fa & Fb & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a exactly once, then visit b exactly once, and finally visit c. Do not visit b or c before visiting a, and do not visit c before visiting b., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we only visit each landmark once. "Do not visit b or c before visiting a" is "G(!(b | c) U a)". "Do not visit c before visiting b" is "G(!(c) U b)". "eventually visit c" is "Fc". The answer is "G(!(b | c) U a) & G(!(c) U b) & Fa & Fb & Fc".

G(!b & !c) U a & Fa U b & !Fb U c & Fa & Fb & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once, then visit landmark b exactly once, and finally visit landmark c. Avoid landmarks b and c while visiting landmark a., We must visit some landmarks in a certain order while avoiding some landmarks while visiting others. Eventually is the "F" LTL operator. "exactly once" specifies we only visit a landmark once. "Avoid landmarks b and c while visiting landmark a" is "G(!b & !c) U a". "Visit landmark b exactly once after visiting landmark a" is "Fa U b & !Fb U c". "Finally visit landmark c" is "Fa & Fb & Fc". The answer is "G(!b & !c) U a & Fa U b & !Fb U c & Fa & Fb & Fc".

(F a) & (! (b \/ c) U a) & (F b) & (! c U b) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a exactly once while never visiting b or c, then visit b exactly once while never visiting c, and finally visit c., We must visit some landmarks exactly once while never visiting others. "Visit a exactly once while never visiting b or c" is "(F a) & (! (b \/ c) U a)". "Visit b exactly once while never visiting c" is "(F b) & (! c U b)". "Finally visit c" is "Fc". The answer is "(F a) & (! (b \/ c) U a) & (F b) & (! c U b) & Fc".

G(!(a & (b | c))) & (F a) & G(!(b & c)) & (F b) & F c, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once. Avoid landmarks b or c before visiting a. Then, reach landmark b exactly once. Avoid landmark c before reaching b. Finally, move to landmark c., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we only visit a landmark once. "avoid" specifies we cannot visit a landmark before visiting another. "We eventually visit a but not until we avoid b and c, we eventually visit b but not until we avoid c, and we eventually visit c". Examining each part, "eventually visit a but not until we avoid b and c" is "G(!(a & (b | c))) & (F a)". "eventually visit b but not until we avoid c" is "G(!(b & c)) & (F b)". "eventually visit c" is "F c". The answer is "G(!(a & (b | c))) & (F a) & G(!(b & c)) & (F b) & F c".

F(A & !AX) & G(!B | !AX), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark A once and then visit landmark B while avoiding landmark A., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "Visit landmark A once" is "F(A & !AX)". This means that eventually we visit A and then never visit A again. "Visit landmark B while avoiding landmark A" is "G(!B | !AX)". This means that globally (always) we either do not visit B or we visit B but never visit A again. The answer is "F(A & !AX) & G(!B | !AX)".

Fa & !F(A) & (!A U b) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark A once and then go to landmark B without passing through A again., We must visit some landmarks in a certain order while we cannot visit some landmarks again after we leave them. Eventually is the "F" LTL operator. "once" specifies we only visit one landmark once. "We eventually visit B but not until we visit A and we never visit A again after leaving it". Examining each part, "eventually visit B" is "Fb". "visit A once" is "Fa & !F(A)". "never visit A again after leaving it" is "G(!A)". The answer is "Fa & !F(A) & (!A U b) & Fb".

!(b & !a U a) & (a -> (Fb & !F(a))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Do not approach b until you have visited a exactly once. After visiting a, go to b while avoiding a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Do not approach b until you have visited a exactly once" is "!(b & !a U a)". "After visiting a, go to b while avoiding a" is "(a -> (Fb & !F(a)))". The answer is "!(b & !a U a) & (a -> (Fb & !F(a)))".

!(b & !a) & Fa & (Fb & !Fa), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Initially, do not visit b if a has not been visited yet. Then, visit a once and after that, visit b while avoiding a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Initially" specifies the initial state of the system. "do not visit b if a has not been visited yet" is represented as "!(b & !a)". "visit a once and after that, visit b while avoiding a" is represented as "Fa & (Fb & !Fa)". The answer is "!(b & !a) & Fa & (Fb & !Fa)".

Fa & G(!a U b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, visit landmark a. Then, you may visit landmark b only if you have not revisited landmark a in between., We eventually visit some landmarks in a certain order while we cannot revisit some landmarks in between. Eventually is the "F" LTL operator. "only if you have not revisited landmark a in between" specifies we cannot revisit a landmark until we visit another landmark. "We eventually visit b but only if we do not revisit a in between and we eventually visit a". Examining each part, "eventually visit a" is "Fa". "visit b only if we do not revisit a in between" is "G(!a U b)". The answer is "Fa & G(!a U b)".

(Fa & (Fb & Fa) & (Fc & (Fb & Fa))), F & a F & b F c, sequenced_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit a, then eventually visit b, and finally eventually visit c". Examining each part, "eventually visit a" is "Fa". "visit b only after a is visited" is "(Fb & Fa)". "visit c only after a and b are both visited" is "(Fc & (Fb & Fa))". The answer is "(Fa & (Fb & Fa) & (Fc & (Fb & Fa)))".

Fa & (Fa -> Fb) & (Fb -> Fc), F & a F & b F c, sequenced_visit, 3, Move to a, then move to b, then move to c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Move to a, then move to b, then move to c" specifies we must visit a, then b, then c in that order. Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". "eventually visit c after b" is "Fb -> Fc". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc)".

Fa -> (a -> Fb) -> (b -> Fc), F & a F & b F c, sequenced_visit, 3, Visit a, then visit b, then reach c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". "eventually visit a" is "Fa". The answer is "Fa -> (a -> Fb) -> (b -> Fc)".

Fa & (!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, reach landmark c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit a" is "Fa". The answer is "Fa & (!b U a) & (!c U b)".

Fa & Fb & Fc, F & a F & b F c, sequenced_visit, 3, Move to a, then move to b, and finally reach c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Move to a" is represented by "Fa". "Move to b" is represented by "Fb". "Reach c" is represented by "Fc". The answer is "Fa & Fb & Fc".

(F A & !F A U F !A) & (F B & !F B U F !B) & (F C & !F C U F !C) & G(!A & !B & !C) U D, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark A exactly once, then visit landmark B exactly once, then visit landmark C exactly once, and finally visit landmark D exactly once. Always stay away from landmarks A, B, and C when visiting landmark D., We must eventually visit some landmarks exactly once in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we visit each landmark only once. "We eventually visit D but not until we visit A, B, and C exactly once in that order. We must stay away from A, B, and C when visiting D". Examining each part, "visit A exactly once" is "(F A & !F A U F !A)". "visit B exactly once" is "(F B & !F B U F !B)". Repeat for the remaining parts. "stay away from A, B, and C when visiting D" is "G(!A & !B & !C) U D". The answer is "(F A & !F A U F !A) & (F B & !F B U F !B) & (F C & !F C U F !C) & G(!A & !B & !C) U D".

Fa & (G(!b & !c & !d) U b) & (G(!a & !c & !d) U c) & (G(!a & !b & !c) U d) & (a & b & c & d), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit a landmark once without passing through landmarks b, c, or d. Then, visit landmark b once without passing through landmarks a, c, or d. Next, visit landmark c once without passing through landmarks a, b, or d. Finally, visit landmark d once without passing through landmarks a, b, or c., We must visit each landmark exactly once while avoiding certain landmarks when visiting others. "Visit a landmark once without passing through landmarks b, c, or d" is equivalent to "Visit a once and never visit b, c, or d before or after visiting a". Similarly, "Visit b once without passing through landmarks a, c, or d" is equivalent to "Visit b once and never visit a, c, or d before or after visiting b". Repeat for the remaining parts. "eventually visit a" is "Fa". "eventually visit b" is "Fb". "eventually visit c" is "Fc". "eventually visit d" is "Fd". The answer is "Fa & (G(!b & !c & !d) U b) & (G(!a & !c & !d) U c) & (G(!a & !b & !c) U d) & (a & b & c & d)".

!(b | c | d) & Fa & (!(a | c | d) U b) & (!(a | b | d) U c) & (!(a | b | c) U d), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, do not approach landmarks b, c, and d. Then, visit landmark a. After visiting a, go directly to b while avoiding landmarks a, c, and d. Next, go directly to c while avoiding landmarks a, b, and d. Finally, go directly to d while avoiding landmarks a, b, and c., We must avoid some landmarks while visiting others in a certain order. "Do not approach landmarks b, c, and d" is equivalent to "!(b | c | d)" which means we cannot be at b, c, or d. "Visit landmark a" is "Fa". "Go directly to b while avoiding landmarks a, c, and d" is equivalent to "!(a | c | d) U b". "Go directly to c while avoiding landmarks a, b, and d" is equivalent to "!(a | b | d) U c". "Go directly to d while avoiding landmarks a, b, and c" is equivalent to "!(a | b | c) U d". The answer is "!(b | c | d) & Fa & (!(a | c | d) U b) & (!(a | b | d) U c) & (!(a | b | c) U d)".

 any landmar, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d in that order without skipping or revisiting any of them., We must visit some landmarks in a specific order without skipping or revisiting any of them. "Strictly" specifies we only visit one landmark after visiting another. "We must visit landmark a, then landmark b, then landmark c, and finally landmark d in that order". Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". "visit c after b" is "Fb -> Fc". "visit d after c" is "Fc -> Fd". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & G(!(a & b & c) U (a & b & c & d))". The last part ensures that we do not revisit any landmark.

 any landmark more than onc, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks a, b, c, and d in that order, each exactly once., We must visit some landmarks in a specific order, each exactly once. "Visit landmarks a, b, c, and d in that order" specifies the order. "Each exactly once" specifies that we must visit each landmark only once. Examining each part, "visit a and only visit b after a is visited" is "G(a -> Fb)". "visit b and only visit c after b is visited" is "G(b -> Fc)". Repeat for the remaining parts. "visit d and only after c is visited" is "G(c -> Fd)". "visit a" is "Fa". The answer is "G(a -> Fb) & G(b -> Fc) & G(c -> Fd) & Fa & !((a & b & c & d) & X(a & b & c & d))". The last part "!((a & b & c & d) & X(a & b & c & d))" specifies that we cannot visit any landmark more than once.

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit landmarks a, b, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always visit c, a, and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

(G(b -> X(c -> Xa))), & G F a & G F b G F c, patrolling, 3, Always visit b, then c, and then a repeatedly., We repeatedly visit some landmarks in a certain order. Always is the "G" LTL operator. "repeatedly" is the "F" LTL operator. "Always visit b, then c, and then a" is "(G(b -> X(c -> Xa)))". The answer is "(G(b -> X(c -> Xa)))".

Ga & Gb & Gc, & G F a & G F b G F c, patrolling, 3, Always explore landmarks b, a, and c., We must always visit some landmarks in any order. Always is the "G" LTL operator. "explore" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, b, c, and d., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

G(!c U X(!c)) & G(!a U X(!a)) & G(!d U X(!d)) & G(!b U X(!b)), & G F a & G F b & G F c G F d, patrolling, 4, Avoid visiting landmarks c, a, d, and b a finite number of times., To avoid visiting landmarks c, a, d, and b a finite number of times, we can use the "G" LTL operator for globally, and the "X" LTL operator for next. We can specify that we should never visit c, a, d, or b twice in a row. Examining each part, "never visit c twice in a row" is "G(!c U X(!c))". "never visit a twice in a row" is "G(!a U X(!a))". Repeat for the remaining parts. The answer is "G(!c U X(!c)) & G(!a U X(!a)) & G(!d U X(!d)) & G(!b U X(!b))".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit landmarks b, c, d, and a., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Gd & Gc & Ga & Gb, & G F a & G F b & G F c G F d, patrolling, 4, You must infinitely visit landmarks d, c, a, and b., To infinitely visit landmarks d, c, a, and b, we can use the "G" LTL operator which means "globally" or "always". We want to always visit d, c, a, and b. Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Gd & Gc & Ga & Gb".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit c, a, d, h, and b repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, You must always go to landmarks d, c, h, b, and a., We must always visit some landmarks in a certain order. Always is the "G" LTL operator. "go to" specifies we must "always visit d, c, h, b, and a". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Gc & Ga & Gh & Gb & Gd, & G F a & G F b & G F c & G F d G F h, patrolling, 5, You must continuously visit landmarks c, a, h, b, and d., We must continuously visit some landmarks in a certain order. Continuously is the "G" LTL operator. "visit landmarks c, a, h, b, and d" specifies we must continuously visit these landmarks in this order. Examining each part, "continuously visit c" is "Gc". "continuously visit a" is "Ga". Repeat for the remaining parts. The answer is "Gc & Ga & Gh & Gb & Gd".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, You must always explore landmarks a, b, c, d, and h., We must always visit some landmarks. Always is the "G" LTL operator. "explore" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, b, c, and d., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Fa & Fb & Fc & Fd, & G F a & G F b & G F c G F d, patrolling, 4, Visit landmarks a, b, c, and d in any order., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "Visit landmarks a, b, c, and d in any order" specifies we must "eventually visit a, b, c, and d". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Continuously visit landmarks a, b, c, and d in any order., We continuously visit some landmarks in any order. Continuously is the "G" LTL operator. "visit" specifies we must "continuously visit a, b, c, and d". Examining each part, "continuously visit a" is "Ga". "continuously visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h. The order of the visits does not matter., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Fa & Fb & Fc & Fd & Fh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Visit landmarks a, b, c, d, and h in any order., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "Visit landmarks a, b, c, d, and h" specifies we must "eventually visit a, b, c, d, and h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd & Fh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Continuously visit landmarks a, b, c, d, and h in any order., We continuously visit some landmarks in any order. Continuously is the "G" LTL operator. "visit" specifies we must "continuously visit a, b, c, d, and h". Examining each part, "continuously visit a" is "Ga". "continuously visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h in any order., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "visit a, b, c, d, and h". Examining each part, "visit a" is "Ga". "visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

F(A & !XA) & F(B & !XA & F(A)) & F(C & !XA & F(A) & F(B)) & F(D & !XA & F(A) & F(B) & F(C)) & F(H & !XA & F(A) & F(B) & F(C) & F(D)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark A, then landmark B, then landmark C, then landmark D, and finally landmark H. Do not revisit any of the landmarks before completing the task., We must visit some landmarks in a certain order without revisiting any of them before completing the task. "Visit landmark A, then landmark B, then landmark C, then landmark D, and finally landmark H" specifies the order of landmarks to visit. "Do not revisit any of the landmarks before completing the task" specifies that we cannot revisit any landmark once we have visited it. Examining each part, "visit A and do not revisit it" is "F(A & !XA)". "visit B and do not revisit A" is "F(B & !XA & F(A))". Repeat for the remaining parts. "eventually visit H and do not revisit any of the previous landmarks" is "F(H & !XA & F(A) & F(B) & F(C) & F(D))". The answer is "F(A & !XA) & F(B & !XA & F(A)) & F(C & !XA & F(A) & F(B)) & F(D & !XA & F(A) & F(B) & F(C)) & F(H & !XA & F(A) & F(B) & F(C) & F(D))".

(!B U A) & (!C U (B & A)) & (!D U (C & B & A)) & (!H U (D & C & B & A)) & Fh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark A, then visit landmark B without revisiting A before. After visiting B, visit landmark C without revisiting A or B before. After visiting C, visit landmark D without revisiting A, B, or C before. Finally, after visiting D, visit landmark H without revisiting A, B, C, or D before., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without revisiting" specifies we cannot visit a landmark again before visiting others first. "We eventually visit H but not until we visit D and we visit D but not until we visit C and we visit C but not until we visit B and we eventually visit B but not until we visit A". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B and A" is "(!C U (B & A))". Repeat for the remaining parts. "eventually visit H" is "Fh". The answer is "(!B U A) & (!C U (B & A)) & (!D U (C & B & A)) & (!H U (D & C & B & A)) & Fh".

(!B U A) & (!C U B) & (!D U C) & (!H U D) & Fh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark A, then landmark B, then landmark C, then landmark D, and finally landmark H. Only visit landmark D after visiting landmark C once. Only visit landmark C after visiting landmark B once. Only visit landmark B after visiting landmark A once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specify we only visit one landmark after visiting another. "We eventually visit H but not until we visit D and we visit D but not until we visit C and we visit C but not until we visit B and we eventually visit B but not until we visit A". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "visit D but not until visit C" is "(!D U C)". Repeat for the remaining parts. "eventually visit H" is "Fh". The answer is "(!B U A) & (!C U B) & (!D U C) & (!H U D) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & G(b -> !a) & G(c -> !b) & G(d -> !c), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit a, then visit b without returning to a. After visiting b, visit c without returning to b. After visiting c, visit d without returning to c. Only then, visit h without returning to d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without returning to" specifies we cannot visit a landmark again after leaving it. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a and we eventually visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "cannot return to a after visiting b" is "G(b -> !a)". "cannot return to b after visiting c" is "G(c -> !b)". "cannot return to c after visiting d" is "G(d -> !c)". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & G(b -> !a) & G(c -> !b) & G(d -> !c)".

Fa & (!b U b) & Fb & (!c U c) & Fc & (!d U d) & Fd & (!h U h) & Fh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks a, b, c, d, and h in the exact order given. You cannot revisit any location once you leave it., We must visit some landmarks in a specific order while we cannot revisit any location once we leave it. "We must visit a, then b, then c, then d, and finally h". Examining each part, "visit a and then b" is "Fa & (!b U b)". "visit b and then c" is "Fb & (!c U c)". Repeat for the remaining parts. "visit h" is "Fh". The answer is "Fa & (!b U b) & Fb & (!c U c) & Fc & (!d U d) & Fd & (!h U h) & Fh".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". The answer is "Ga & Gb".

ormula states that eventually we visit a and then we alternate between visiting b and a infinitely often, or eventually we visit b and then we alternate between visiting a and b infinitely ofte, & G F a G F b, patrolling, 2, Infinitely alternate between visiting landmarks a and b., We must infinitely alternate between visiting landmarks a and b. The "G" LTL operator is used to specify that the formula holds globally, and the "X" LTL operator is used to specify that the next state satisfies the formula. The formula can be written as "(F a & G (X b & G (X a)))) | (F b & G (X a & G (X b))))". This formula states that eventually we visit a and then we alternate between visiting b and a infinitely often, or eventually we visit b and then we alternate between visiting a and b infinitely often.

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit landmarks a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

 a" is "G(a), G F a, patrolling, 1, Always visit a., "Always" is the "G" LTL operator, which means "globally" or "always". "Visit a" is simply "a". Therefore, "always visit a" is "G(a)".

 a" in LTL is represented as "G a, G F a, patrolling, 1, Always visit a., "Always" is the "G" LTL operator, which means "globally" or "always". "Visit a" is simply "a". Therefore, "Always visit a" in LTL is represented as "G a".

 landmark "a" an infinite number of times, we can use the LTL formula "GF(a)", which means "Globally, we will eventually visit "a" infinitely often, G F a, patrolling, 1, Visit landmark "a" an infinite number of times., To specify that we must visit landmark "a" an infinite number of times, we can use the LTL formula "GF(a)", which means "Globally, we will eventually visit "a" infinitely often".

" would be "G a" where "a" represents the landmark that must be visited at every time ste, G F a, patrolling, 1, Always visit., "Always visit" means we must visit a landmark at every time step. In LTL, this is represented as "G" which stands for "Globally" or "always". So the LTL formula for "Always visit" would be "G a" where "a" represents the landmark that must be visited at every time step.

 a" in LTL is represented as "G(a), G F a, patrolling, 1, Always visit a., "Always" is the "G" LTL operator, which means "globally" or "always". "Visit a" is simply "a". Therefore, "Always visit a" in LTL is represented as "G(a)".

G(a & b), & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks. Always is the "G" LTL operator. "visit a and b" is "G(a & b)". The answer is "G(a & b)".

G(a & b), & G F a G F b, patrolling, 2, Always visit landmarks a and b., We must always visit landmarks a and b. Always is the "G" LTL operator. "visit" specifies we must "visit a and b". Examining each part, "visit a" is "a" and "visit b" is "b". The answer is "G(a & b)".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Visit landmarks a and b frequently in any order., We must frequently visit some landmarks in any order. Frequently is the "G" LTL operator. "visit" specifies we must "frequently visit a and b". Examining each part, "frequently visit a" is "Ga". "frequently visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Fa & Fb & Fc & Fd & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, then visit d, and finally visit h" specifies the order of visiting landmarks. Examining each part, "visit a" is "Fa". "visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd & Fh".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh), F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, then visit d, and finally visit h" specifies the order of visiting landmarks. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh)".

Fa -> Fb -> Fc -> Fd -> Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Move to a, then move to b, then move to c, then move to d, and finally move to h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Move to a, then move to b, then move to c, then move to d, and finally move to h" specifies we visit a, then b, then c, then d, and finally h. Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "Fa -> Fb -> Fc -> Fd -> Fh".

Fa & Fb & Fc & Fd & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, move to landmark b. After that, visit landmark c. Next, visit landmark d. Finally, reach landmark h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" and "After that" and "Next" and "Finally" specify the order of visiting landmarks. "We eventually visit a and then eventually visit b and then eventually visit c and then eventually visit d and finally eventually visit h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "Fa & Fb & Fc & Fd & Fh".

Fa & Fb & Fc & Fd & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & Ga & Gb & Gc & Gd & Gh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, First, visit landmark a and never visit it again. Then, visit landmark b before visiting landmarks c, d, and h, and never visit b again. Do not visit d or h until you have visited c, and never visit c again. Next, visit landmark d before visiting h, and never visit d or h again. Finally, visit landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "never visit again" specifies we only visit a landmark once. "We eventually visit h but not until we visit d and we eventually visit d but not until we visit c and we eventually visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "never visit again" is represented by the "G" LTL operator. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & Ga & Gb & Gc & Gd & Gh".

Fa & Fb & G(!(a & b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit a, then visit b, and make sure to visit each location once., We must eventually visit some landmarks in a specific order while visiting each location only once. Eventually is the "F" LTL operator. "Visit a, then visit b" is "Fa & Fb". To ensure that we visit each location only once, we can use the "G" LTL operator for globally, which means "always". We can say "G(!(a & b))" which means "always, it is not the case that we are at both a and b at the same time". The answer is "Fa & Fb & G(!(a & b))".

Fa & (!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a exactly once, then eventually visit landmark b. Do not visit b before visiting a., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we only visit landmark a once. "Do not visit b before visiting a" specifies we visit a before b. "We eventually visit b but not until we visit a". Examining each part, "visit a" is "Fa". "visit b but not until visit a" is "(!b U a)". The answer is "Fa & (!b U a) & Fb".

Fa & (!b U a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit a once, then visit b only after visiting a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "eventually visit a" is "Fa". "visit b but not until visit a" is "(!b U a)". The answer is "Fa & (!b U a)".

(Fa & !F(a)) & (!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a exactly once, then visit landmark b, ensuring that you do not visit b before visiting a., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we only visit a landmark once. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit a" is "Fa". "visit a exactly once" is "(Fa & !F(a))". The answer is "(Fa & !F(a)) & (!b U a) & Fb".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, Visit a, then visit b, then visit c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

(!b U a) & (!c U b) & Fc, F & a F & b F c, sequenced_visit, 3, First, go to landmark a. Then, visit landmark b. Finally, reach landmark c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

(A -> Fb) & (B -> Fc) & Fc, F & a F & b F c, sequenced_visit, 3, First, go to landmark A. Then, go to landmark B. After that, go to landmark C., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" and "After that" specify we only visit one landmark after visiting another. "We eventually visit C but only after we visit B and we visit B but only after we visit A". Examining each part, "visit B but only after visit A" is "(A -> Fb)". "visit C but only after visit B" is "(B -> Fc)". "eventually visit C" is "Fc". The answer is "(A -> Fb) & (B -> Fc) & Fc".

(!b U a) & (!c U b) & Fa & Fc, F & a F & b F c, sequenced_visit, 3, Visit b after visiting a and visit c after visiting b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after visiting" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit a" is "Fa". The answer is "(!b U a) & (!c U b) & Fa & Fc".

(!b U a) & (!c U b) & Fc, F & a F & b F c, sequenced_visit, 3, First, reach a. Then, reach b. Finally, reach c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

Fa & Fb & Fc & Fd, F & a F & b F & c F d, sequenced_visit, 4, Visit a, then visit b, then visit c, and finally visit d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, and finally visit d" specifies we visit one landmark after another in a specific order. "We eventually visit d and before that we eventually visit c and before that we eventually visit b and before that we eventually visit a". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "Fa & Fb & Fc & Fd".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, and finally d". Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. "visit c after b" is "Fb -> Fc". "visit d after c" is "Fc -> Fd". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd)".

Fa & Gb & Gc & Gd, F & a F & b F & c F d, sequenced_visit, 4, Visit a, then visit b at least once. After visiting b at least once, visit c at least once. After visiting a, b, and c, visit d at least once., We eventually visit some landmarks in a certain order while we must visit some landmarks at least once. Eventually is the "F" LTL operator. "At least once" is the "G" LTL operator. "We visit a, then visit b at least once" is "Fa & Gb". "After visiting b at least once, visit c at least once" is "Gb & Gc". "After visiting a, b, and c, visit d at least once" is "Fa & Gb & Gc & Gd". The answer is "Fa & Gb & Gc & Gd".

Fa -> Fb -> Fc -> Fd, F & a F & b F & c F d, sequenced_visit, 4, Reach a, then reach b, then reach c, and finally reach d., We must eventually visit some landmarks in a specific order. Eventually is the "F" LTL operator. "reach" specifies we must "eventually reach a, then eventually reach b, then eventually reach c, and finally eventually reach d". Examining each part, "eventually reach a" is "Fa". "eventually reach b" is "Fb". Repeat for the remaining parts. The answer is "Fa -> Fb -> Fc -> Fd".

(Fa & (!b U b)) & ((Fa & Fb) & (!c U c)) & ((Fa & Fb & Fc) & (!d U d)), F & a F & b F & c F d, sequenced_visit, 4, Visit landmarks a, b, c, and d in sequence., We must eventually visit some landmarks in a specific order. Eventually is the "F" LTL operator. "in sequence" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, and finally d". Examining each part, "visit a then b" is "Fa & (!b U b)". "visit b then c" is "(Fa & Fb) & (!c U c)". "visit c then d" is "(Fa & Fb & Fc) & (!d U d)". The answer is "(Fa & (!b U b)) & ((Fa & Fb) & (!c U c)) & ((Fa & Fb & Fc) & (!d U d))".

G(a & b), & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks. Always is the "G" LTL operator. "visit a and b" is "G(a & b)". The answer is "G(a & b)".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Fa -> Fb -> Fc -> Fd -> Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "Fa -> Fb -> Fc -> Fd -> Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then landmark b. After visiting landmark b, visit landmark c. Once you have visited landmark c, proceed to landmark d. After visiting landmark d, make your way to landmark h and remain there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!a U true) & (!b U a) & (!c U b) & (!d U c) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in that order., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "visit a but not until visit nothing" is "(!a U true)". "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!a U true) & (!b U a) & (!c U b) & (!d U c) & Fh".

(a -> Fb) & (b -> Fc) & (c -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Visit landmark a, then visit landmark b. After visiting landmark b, visit landmark c. Once you have visited landmark c, visit landmark d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "After" specifies we only visit one landmark after visiting another. "We eventually visit d but only after we visit c and we visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". "visit d but only after visit c" is "(c -> Fd)". The answer is "(a -> Fb) & (b -> Fc) & (c -> Fd)".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in this order" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, and finally d". Examining each part, "eventually visit a" is "Fa". "visit b after a" is "Fa -> Fb". "visit c after b" is "Fb -> Fc". "eventually visit d after c" is "Fc -> Fd". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd)".

(Fa & Fb) & Fc & Fd, F & a F & b F & c F d, sequenced_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in this order" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, and finally d". Examining each part, "visit a then b" is "Fa & Fb". "visit c after a and b" is "(Fa & Fb) & Fc". "eventually visit d after a, b, and c" is "(Fa & Fb) & Fc & Fd". The answer is "(Fa & Fb) & Fc & Fd".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Move to a, then to b, then to c, and finally to d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Move to a, then to b, then to c, and finally to d" specifies we visit a, then b, then c, and finally d. Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". "eventually visit c after b" is "Fb -> Fc". "eventually visit d after c" is "Fc -> Fd". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd)".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d in sequence., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in sequence" specifies we only visit one landmark after visiting another. "We eventually visit a, then eventually visit b after a, then eventually visit c after b, and finally eventually visit d after c". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". Repeat for the remaining parts. "eventually visit d after c" is "Fc -> Fd". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd)".

, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit a, then visit b, then visit c, and finally visit d. Visit each location only once., We must eventually visit some landmarks in a specific order while visiting each location only once. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, and finally visit d" is equivalent to "a -> (b -> (c -> Fd))". This means that if we visit a, then we must eventually visit b, and if we visit b, then we must eventually visit c, and if we visit c, then we must eventually visit d. Additionally, we must visit each location only once. We can express this as "G((a -> X(!b & !c & !d)) & (b -> X(!a & !c & !d)) & (c -> X(!a & !b & !d)) & (d -> X(!a & !b & !c)))". This means that at any point in time, if we are at a, then we cannot be at b, c, or d in the next step, and so on for the other locations. The final LTL formula is:

(Fa & (!b U a) & (b -> X(!c U b))) & Fc & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark a exactly once without passing through landmark b. Then, visit landmark b exactly once without passing through landmark c. Finally, after visiting landmark c exactly once, visit landmark d., We must visit some landmarks exactly once while not passing through other landmarks. "Visit landmark a exactly once without passing through landmark b" is equivalent to "eventually visit a and never visit b until a is visited and visit b at most once". This can be represented as "Fa & (!b U a) & (b -> X(!c U b))". "Finally, after visiting landmark c exactly once, visit landmark d" is equivalent to "eventually visit c and eventually visit d after visiting c". This can be represented as "Fc & Fd". The answer is "(Fa & (!b U a) & (b -> X(!c U b))) & Fc & Fd".

Fa & Fb & Fc & Fd & G(a -> Fb) & G(c -> Fb) & G(c -> Fd) & ((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks a, b, c, and d exactly once. Always visit b after visiting a and always visit b after visiting c. Always visit d after visiting c., We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Always" is the "G" LTL operator. "Exactly once" can be expressed as "visit a, b, c, and d" and "never visit any landmark more than once". "Always visit b after visiting a" is "G(a -> Fb)". "Always visit b after visiting c" is "G(c -> Fb)". "Always visit d after visiting c" is "G(c -> Fd)". "Never visit any landmark more than once" can be expressed as "((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d))". The answer is "Fa & Fb & Fc & Fd & G(a -> Fb) & G(c -> Fb) & G(c -> Fd) & ((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d))".

(!b U a) & (!c U b) & (!d U c) & Fd & G((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit a, then b, then c, then d in strict order without revisiting any location., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in strict order" specifies we only visit one landmark after visiting another. "without revisiting any location" specifies we cannot visit a landmark more than once. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". We also need to specify that we cannot revisit any location. This can be done using the "G" LTL operator for globally, which means "always". We can say "G((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d))". This means that at any point in time, we are either at location a and have not visited any other location, or we are at location b and have only visited location a, or we are at location c and have only visited locations a and b, or we are at location d and have only visited locations a, b, and c. The final LTL formula is "(!b U a) & (!c U b) & (!d U c) & Fd & G((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d))".

G(a) & G(b -> F(a)) & G(c -> (F(a) & F(b))) & G(d -> (F(a) & F(b) & F(c))) & G((a & X(b) & X(c) & X(d))), & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, then b, then c, then d, and repeat this sequence infinitely., We must repeatedly visit some landmarks in a certain order. Always is the "G" LTL operator. "repeat this sequence infinitely" specifies that we must repeat the sequence infinitely. "We always visit a, then b, then c, then d". Examining each part, "always visit a" is "G(a)". "always visit b after a" is "G(b -> F(a))". "always visit c after b" is "G(c -> (F(a) & F(b)))". "always visit d after c" is "G(d -> (F(a) & F(b) & F(c)))". The answer is "G(a) & G(b -> F(a)) & G(c -> (F(a) & F(b))) & G(d -> (F(a) & F(b) & F(c))) & G((a & X(b) & X(c) & X(d)))".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, b, c, and d., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

G(a) & G(b) & G(c) & G(d), & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, b, c, and d repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c) & G(d)".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, Always visit landmarks a, b, c, and d., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, and d". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

G(a) & G(b) & G(c) & G(d) & G(h), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c) & G(d) & G(h)".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit a, b, c, d, and h., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit landmarks a, b, c, d, and h., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Always visit a, b, c, d, and h repeatedly., We must repeatedly visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a, b, c, d, and h". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & G(a -> X(!b & !c & !d)) & G(b -> X(!c & !d)) & G(c -> X(!d)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d, in that specific order, without revisiting any previously visited location., We must visit some landmarks in a specific order without revisiting any previously visited location. "Visit landmark a, then landmark b, then landmark c, and finally landmark d" specifies the order of the landmarks. "without revisiting any previously visited location" specifies that we cannot revisit any previously visited landmark. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". "visit c after b" is "Fb -> Fc". "visit d after c" is "Fc -> Fd". "cannot revisit any previously visited landmark" is "G(a -> X(!b & !c & !d)) & G(b -> X(!c & !d)) & G(c -> X(!d))". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & G(a -> X(!b & !c & !d)) & G(b -> X(!c & !d)) & G(c -> X(!d))".

(!b U a) & (!c U b) & (!d U c) & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, visit landmark a without stopping at landmark b. Then, visit landmark b without stopping at landmark c. After that, visit landmark c without stopping at landmark d. Finally, visit landmark d., We eventually visit some landmarks in a certain order while we cannot stop at some landmarks until we visit others first. Eventually is the "F" LTL operator. "without stopping at" specifies we cannot stop at a landmark until we visit another first. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a and we eventually visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

Fa & Fb & G(!c) & Fc & G(!d) & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, visit landmark a once. Then, visit landmark b once while avoiding landmark c. After that, visit landmark c once while avoiding landmark d. Finally, visit landmark d., We must visit some landmarks in a certain order while avoiding some other landmarks. "First, visit landmark a once" is "F a". "Then, visit landmark b once while avoiding landmark c" is "F b & G(!c)". "After that, visit landmark c once while avoiding landmark d" is "F c & G(!d)". "Finally, visit landmark d" is "F d". The answer is "Fa & Fb & G(!c) & Fc & G(!d) & Fd".

(!b U a) & (!c U (b & !d)) & (!d U (a & !b & c)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit a, then visit b without visiting c, then visit c without visiting d, and finally visit d while only visiting each location once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting" specifies we cannot visit a certain landmark before visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". "only visiting each location once" specifies that we cannot revisit any landmark. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b and not visit d" is "(!c U (b & !d))". "eventually visit d but not visit any landmark twice" is "(!d U (a & !b & c))". The answer is "(!b U a) & (!c U (b & !d)) & (!d U (a & !b & c))".

(!b U a) & (!c U b) & (!d U c) & Fd & G(!a | G(!b | G(!c | G(!d))))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d, in that strict order, without returning to any previously visited locations., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that strict order" specifies we only visit one landmark after visiting another. "without returning to any previously visited locations" specifies we cannot revisit any landmark. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". We also need to specify that we cannot revisit any landmark. We can do this by adding the condition that once we visit a landmark, we must never visit it again. This can be expressed as "G(!a | G(!b | G(!c | G(!d))))". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & G(!a | G(!b | G(!c | G(!d)))))".

Fa & (Fb & G(!a)) & (Fc & G(!b)), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, reach landmark a. Then, reach landmark b without revisiting landmark a. Finally, reach landmark c without revisiting landmark b., We eventually visit some landmarks in a certain order while we cannot revisit some landmarks. Eventually is the "F" LTL operator. "without revisiting" specifies we cannot revisit a landmark. "First, reach landmark a" is "Fa". "Then, reach landmark b without revisiting landmark a" is "(Fb & G(!a))". "Finally, reach landmark c without revisiting landmark b" is "(Fc & G(!b))". The answer is "Fa & (Fb & G(!a)) & (Fc & G(!b))".

(Fa -> Fb) & (Fb -> Fc) & (Fa -> !F(Fa)) & !(Fc), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark a once. Then, visit landmark b once while avoiding landmark c. Finally, visit landmark c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "once" specifies we only visit a landmark once. "avoiding" specifies we cannot visit a certain landmark. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b and we only visit a once and we never visit c". Examining each part, "eventually visit b but not until visit a" is "(Fa -> Fb)". "eventually visit c but not until visit b" is "(Fb -> Fc)". "only visit a once" is "(Fa -> !F(Fa))". "never visit c" is "!(Fc)". The answer is "(Fa -> Fb) & (Fb -> Fc) & (Fa -> !F(Fa)) & !(Fc)".

(!B U A) & (!C U B) & G(!A | !B) & G(!B | !C) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark A, then visit landmark B, and finally visit landmark C. While visiting landmark A, stay away from landmark B. While visiting landmark B, stay away from landmark C., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "While visiting" and "stay away from" specify we cannot visit certain landmarks while visiting others. "We eventually visit C but not until we visit B and we visit B but not until we visit A. While visiting A, we stay away from B. While visiting B, we stay away from C". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "While visiting A, stay away from B" is "G(!A | !B)". "While visiting B, stay away from C" is "G(!B | !C)". The answer is "(!B U A) & (!C U B) & G(!A | !B) & G(!B | !C) & Fc".

(a) & (!b U a) & (!(c & b) U (a & b)) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark a. Then, visit landmark b. After that, visit landmark c while making sure to only visit landmarks a and b once each., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only once" specifies we only visit a landmark once. "We eventually visit c but not until we visit a and we visit b but not until we visit a and we visit c but not until we visit a and b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit a and b" is "(!(c & b) U (a & b))". Repeat for the remaining parts. The answer is "(a) & (!b U a) & (!(c & b) U (a & b)) & Fc".

Fa & (!b U a) & (!c U b) & G(b -> !a) & G(c -> !b), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark a. Then, visit landmark b. After visiting b, do not visit a again. Next, visit landmark c. After visiting c, do not visit b again., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Then" specifies we only visit one landmark after visiting another. "After visiting b, do not visit a again" and "After visiting c, do not visit b again" specify that we cannot visit some landmarks again after visiting others. Examining each part, "eventually visit a" is "Fa". "visit b only after a is visited" is "(!b U a)". "visit c only after b is visited" is "(!c U b)". "do not visit a again after visiting b" is "G(b -> !a)". "do not visit b again after visiting c" is "G(c -> !b)". The answer is "Fa & (!b U a) & (!c U b) & G(b -> !a) & G(c -> !b)".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, First, go to landmark a. Then, go to landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a) & Fb".

(!b U a), F & a F b, sequenced_visit, 2, After visiting a, go to b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "After visiting a, go to b" specifies we only visit b after visiting a. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

Fa & Fb, F & a F b, sequenced_visit, 2, First, go to landmark a. Then, eventually go to landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We first visit a and then eventually visit b". Examining each part, "eventually visit b" is "Fb". "visit a" is "Fa". The answer is "Fa & Fb".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, First, travel to landmark a. Then, make your way to landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a) & Fb".

Fa & (Fa -> Fb), F & a F b, sequenced_visit, 2, Visit a and then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a and then visit b" specifies we must "eventually visit a and eventually visit b after a". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". The answer is "Fa & (Fa -> Fb)".

(!b U a) & (!c U b) & (!d U c) & Fd, F & a F & b F & c F d, sequenced_visit, 4, Visit a, then visit b, then visit c, then visit d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in strictly this order" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a, we eventually visit c but not until we visit b, and we eventually visit d but not until we visit c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until visit c" is "(!d U c)". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

(!b U a) & (!c U b) & (!d U c) & Fd, F & a F & b F & c F d, sequenced_visit, 4, Travel from a to b to c to d, ensuring that you visit b after a, c after b, and d after c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

((Fa -> Fb) -> Fc) -> Fd, F & a F & b F & c F d, sequenced_visit, 4, Travel to a, then travel to b, then go to c, and finally reach d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Travel to a, then travel to b, then go to c, and finally reach d" specifies we must visit a, then b, then c, and finally d. Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". Repeat for the remaining parts. "eventually visit c after b" is "(Fa -> Fb) -> Fc". "eventually visit d after c" is "((Fa -> Fb) -> Fc) -> Fd". The answer is "((Fa -> Fb) -> Fc) -> Fd".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd), F & a F & b F & c F d, sequenced_visit, 4, Travel from a to b, then from b to c, and finally from c to d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Travel from a to b, then from b to c, and finally from c to d" specifies we visit a, then b, then c, then d. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". "visit c after b" is "Fb -> Fc". "visit d after c" is "Fc -> Fd". The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd)".

Fa & Fb & Fc & Fd, F & a F & b F & c F d, sequenced_visit, 4, First, visit landmark a. Then, visit landmark b. After that, move to landmark c. Finally, reach landmark d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Then" and "After that" specify we only visit one landmark after visiting another. "We eventually visit a then we eventually visit b then we eventually visit c then we eventually visit d". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fa & Fb & Fc & Fd & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b. After visiting b, visit c. After visiting c, visit d. Finally, visit h after visiting d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "After" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fa & Fb & Fc & Fd & Fh".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh), F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, then visit d, and finally visit h" specifies the order of visiting landmarks. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh)".

(!a U true) & (!b U a) & (!c U b) & (!d U c) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in that order., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that order" specifies we only visit one landmark after visiting another. "We eventually visit a, then b, then c, then d, and finally h". Examining each part, "visit a but not until visit nothing" is "(!a U true)". "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!a U true) & (!b U a) & (!c U b) & (!d U c) & Fh".

(!b U a) & (!c U a) & (!d U b) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, visit landmark b. After visiting a, visit c. After visiting b, visit d. Finally, after visiting d, visit landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Then" and "After" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit b and we visit b but not until we visit a and we visit c but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit a" is "(!c U a)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U a) & (!d U b) & (!h U d) & Fh".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh), F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "Visit a, then visit b, then visit c, then visit d, and finally visit h" specifies the order of visiting landmarks. Examining each part, "visit a" is "Fa". "visit b after a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh)".

(!b U a) & G(!a) & G(!b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit a first. Then, visit b. Only visit each location once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "Only visit each location once" specifies that we cannot revisit any landmark. "We eventually visit b but not until we visit a and we never visit a again". Examining each part, "never visit a again" is "G(!a)". "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a) & G(!a) & G(!b)".

G(!B -> F A) & (!B U A), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, visit A without stopping at B. Then, visit B., We eventually visit some landmarks in a certain order while we cannot stop at some landmarks until we visit others first. Eventually is the "F" LTL operator. "without stopping at" specifies we cannot visit one landmark until we visit another first. "We eventually visit B but not until we visit A and we visit A without stopping at B". Examining each part, "visit A without stopping at B" is "G(!B -> F A)". "visit B but not until visit A" is "(!B U A)". The answer is "G(!B -> F A) & (!B U A)".

(!b U a) & G(!a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, go to landmark "a". Then, go to landmark "b" without visiting landmark "a" again., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting landmark a again" specifies that we must not visit "a" again after we have visited it. "We eventually visit b but not until we visit a and we never visit a again". Examining each part, "visit b but not until visit a" is "(!b U a)". "never visit a again" is "G(!a)". The answer is "(!b U a) & G(!a)".

Fa & !Fa U Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a once and then reach landmark b., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "Visit landmark a once" specifies we must visit a exactly once. "reach landmark b" specifies we must eventually visit b. Examining each part, "eventually visit b" is "Fb". To specify that we visit a exactly once, we can use the following LTL formula: "Fa & !Fa U Fb". This means "eventually visit a and then eventually visit b, but not until after a has been visited". The exclamation mark before the first occurrence of "Fa" means "not", and "U" means "until". The answer is "Fa & !Fa U Fb".

G(!b -> Fa) & (a -> (Fb & G(a -> Fb))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Go to a, avoiding b. Then go to b, but only after visiting a once., We eventually visit some landmarks in a certain order while avoiding some landmarks. Eventually is the "F" LTL operator. "avoiding" specifies we must not visit a landmark. "only after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a once and we visit a while avoiding b". Examining each part, "visit a while avoiding b" is "G(!b -> Fa)". "visit b but not until visit a once" is "(a -> (Fb & G(a -> Fb)))". The answer is "G(!b -> Fa) & (a -> (Fb & G(a -> Fb)))".

Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh) & G(!a U Fa) & G(!b U Fb) & G(!c U Fc) & G(!d U Fd) & G(!h U Fh), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h. You can only visit each landmark once., We must eventually visit some landmarks in a specific order while we cannot visit the same landmark more than once. Eventually is the "F" LTL operator. "We eventually visit a then b then c then d then h". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa -> Fb". Repeat for the remaining parts. "We never visit a again after the first time" is "G(!a U Fa)". Repeat for the remaining landmarks. The answer is "Fa & (Fa -> Fb) & (Fb -> Fc) & (Fc -> Fd) & (Fd -> Fh) & G(!a U Fa) & G(!b U Fb) & G(!c U Fc) & G(!d U Fd) & G(!h U Fh)".

G(a -> !b) & G(b -> !c) & G(c -> !d) & G(d -> !h) & Fh & (a & !b & !c & !d & !h), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit a while avoiding b. Then, visit b while avoiding c. After that, visit c while avoiding d. Next, visit d while avoiding h. Finally, visit h. Make sure to visit each location only once., We must eventually visit some landmarks in a certain order while avoiding other landmarks. Eventually is the "F" LTL operator. "while avoiding" specifies we must not visit certain landmarks before visiting others. "Visit a while avoiding b" is "G(a -> !b)". "visit b while avoiding c" is "G(b -> !c)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "G(a -> !b) & G(b -> !c) & G(c -> !d) & G(d -> !h) & Fh & (a & !b & !c & !d & !h)".

Fa & (!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmark A once, then landmark B once without visiting C, then landmark C once without visiting D, then landmark D once without visiting H, and finally visit landmark H., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting" specifies we cannot visit certain landmarks until we visit others first. "We eventually visit A, then eventually visit B but not until we visit A, then eventually visit C but not until we visit B, then eventually visit D but not until we visit C, then eventually visit H but not until we visit D". Examining each part, "eventually visit A" is "Fa". "visit B but not until visit A" is "(!b U a)". "visit C but not until visit B" is "(!c U b)". Repeat for the remaining parts. "eventually visit H" is "Fh". The answer is "Fa & (!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

 any previous landmark, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks in sequence while staying away from the next landmark until reaching the final landmark without revisiting any previous landmarks., This is a bit more complex than the previous examples. We must visit landmarks in a certain order while staying away from the next landmark until reaching the final landmark without revisiting any previous landmarks. We can use the "U" operator to specify that we must stay away from the next landmark until reaching the final landmark. We can use the "G" operator to specify that we cannot revisit any previous landmarks.

(!a U h) & (!b U a) & (!c U b) & (!d U c) & (!h U (a & b & c & d)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, First, go to landmark A without stopping at landmark B. Then, proceed to landmark B without stopping at landmark C. After that, go to landmark C without stopping at landmark D. Next, go to landmark D without stopping at landmark H. Finally, go to landmark H and visit landmarks A, B, C, and D only once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without stopping at" specifies we cannot visit a certain landmark before visiting another. "First, visit A but not until you visit H. Then, visit B but not until you visit A. Then, visit C but not until you visit B. Then, visit D but not until you visit C. Finally, visit H but not until you visit A, B, C, and D". Examining each part, "visit A but not until visit H" is "(!a U h)". "visit B but not until visit A" is "(!b U a)". Repeat for the remaining parts. "visit H but not until visit A, B, C, and D" is "(!h U (a & b & c & d))". The answer is "(!a U h) & (!b U a) & (!c U b) & (!d U c) & (!h U (a & b & c & d))".

(!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

Fa & (!b U a) & (!c U b) & Fc, F & a F & b F c, sequenced_visit, 3, Visit a, then visit b, then visit c. Make sure to visit b after a and visit c after b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit a" is "Fa". The answer is "Fa & (!b U a) & (!c U b) & Fc".

(!b U a) & (!c U b) & Fc, F & a F & b F c, sequenced_visit, 3, First, reach a. Then, reach b. Finally, reach c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

a -> Fb -> Fc, F & a F & b F c, sequenced_visit, 3, Visit a, then go to b, and finally make your way to c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "make your way to" specifies we only visit one landmark after visiting another. "We eventually visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". The answer is "a -> Fb -> Fc".

Fa & (!b U a) & (!c U b), F & a F & b F c, sequenced_visit, 3, First, visit landmark a. Then, proceed to landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit a" is "Fa". The answer is "Fa & (!b U a) & (!c U b)".

Accuracy: 0.041401273885350316