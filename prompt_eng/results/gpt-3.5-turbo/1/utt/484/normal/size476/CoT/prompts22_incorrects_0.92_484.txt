Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

Fa & G(!a), F a, visit, 1, stop by a, We must eventually visit a landmark and stop there. Eventually is the "F" LTL operator. "stop by" specifies we must "eventually visit a and stop there". Examining each part, "eventually visit a" is "Fa". "stop there" means we must not visit any other landmarks after visiting a. The answer is "Fa & G(!a)".

 you can provide more context or details about the system and the desired behavior, I can help you translate it into LT, F a, visit, 1, approach a, "Approach a" is not a well-defined instruction in LTL. LTL is a logic used to reason about temporal properties of systems, and it requires a precise specification of the system and the properties to be verified. If you can provide more context or details about the system and the desired behavior, I can help you translate it into LTL.

F(a & b), & F a F b, visit, 2, eventually reach a and b, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "reach" specifies we must "eventually visit a and b". Examining each part, "eventually visit a and b" is "F(a & b)". There are 2 landmarks so we are done. The answer is "F(a & b)".

(Fa | Fb) & ((Fa U Fb) | (Fb U Fa)), & F a F b, visit, 2, pick one from a and b go there and then head to the other one, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "pick one from a and b" specifies we must "eventually visit either a or b". "go there and then head to the other one" specifies we must "visit one of them and then visit the other one". Examining each part, "eventually visit either a or b" is "(Fa | Fb)". "visit one of them and then visit the other one" is "((Fa U Fb) | (Fb U Fa))". We reached the first landmark so we are done. The answer is "(Fa | Fb) & ((Fa U Fb) | (Fb U Fa))".

F(a & Fb), & F a F b, visit, 2, go to a and go to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to a and go to b" specifies we must "visit a and then visit b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(a & (b & Fc)), & F a & F b F c, visit, 3, go to a b and c, We must eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "eventually visit a, then visit b, then visit c". Working backwards, "eventually visit c" is "Fc". "visit b and then visit c" is "(b & Fc)". "visit a and then visit b and then visit c" is "(a & (b & Fc))". We reached the first landmark so we are done. The answer is "(a & (b & Fc))".

F(a & Fc & Fb), & F a & F b F c, visit, 3, when you have the chance can you go to a c and b , We eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. "when you have the chance" specifies we can visit other landmarks before visiting a, c, and b. "can you go to a, c, and b" is "F(a & Fc & Fb)". There are 3 landmarks so we are done. The answer is "F(a & Fc & Fb)".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, go to a b and c, We must eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "eventually visit a, then visit b, then visit c". Working backwards, "eventually visit c" is "Fc". "eventually visit b and then visit c" is "F(b & Fc)". "eventually visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

 we want to enforce that, we can use the formula "G((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d)), & F a & F b & F c F d, visit, 4, go to a b c and d in arbitrary order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in arbitrary order" specifies we must "eventually visit a, b, c, and d in any order". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd". However, this formula does not enforce that we visit each landmark exactly once. If we want to enforce that, we can use the formula "G((a & !b & !c & !d) | (!a & b & !c & !d) | (!a & !b & c & !d) | (!a & !b & !c & d))".

ing these landmarks is important, we need to specify the order using temporal operator, & F a & F b & F c F d, visit, 4, make sure to visit a b d and c in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must "eventually visit a, b, c, and d in any order". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd". However, this formula does not enforce the order of visiting a, b, d, and c. If the order of visiting these landmarks is important, we need to specify the order using temporal operators.

F(b & F(a & F(c & Fd))), & F a & F b & F c F d, visit, 4, visit b a c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We eventually visit b, then a, then c, then d". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit a and then c and then visit d" is "F(a & F(c & Fd))". "eventually, visit b and then a and then c and then visit d" is "F(b & F(a & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(b & F(a & F(c & Fd)))".

Fa & F(a -> Fb) & F(b -> Fc) & F(c -> Fd), & F a & F b & F c F d, visit, 4, make your way to a b c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We eventually visit a, then b, then c, then d". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "F(a -> Fb)". "eventually visit c after b" is "F(b -> Fc)". "eventually visit d after c" is "F(c -> Fd)". We reached the last landmark so we are done. The answer is "Fa & F(a -> Fb) & F(b -> Fc) & F(c -> Fd)".

perm{Fa, Fb, Fc, Fd}, & F a & F b & F c F d, visit, 4, go to b d a and c in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must "eventually visit a, b, c, and d in any order". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd". However, this formula does not enforce the "in any order" constraint. To enforce this constraint, we can use the permutation operator "perm" which allows us to specify all possible permutations of a set of formulas. The answer with the "perm" operator is "perm{Fa, Fb, Fc, Fd}".

GFa & GFb & GFc & GFd, & F a & F b & F c F d, visit, 4, do not stop until a b c and d are all visited, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "all visited" specifies we must "eventually visit a, b, c, and d forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, go to a go to b go to c and go to d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "eventually visit a, then visit b, then visit c, and then visit d". Working backwards, "eventually visit d" is "Fd". "eventually visit c and then visit d" is "F(c & Fd)". "eventually visit b and then c and then visit d" is "F(b & F(c & Fd))". "eventually visit a and then b and then c and then visit d" is "F(a & F(b & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & Fd)))".

Fa & (F b) U c & F c & F d, & F a & F b & F c F d, visit, 4, visit a go to b reach c reach d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" and "reach" specify we must "visit a, then go to b, then eventually reach c, and finally reach d". Examining each part, "eventually reach c" is "F c". "eventually reach d" is "F d". "go to b" is "F b". "visit a" is "Fa". We must go to b before reaching c so we use the "U" operator. "go to b before reaching c" is "(F b) U c". We reached the first landmark so we are done. The answer is "Fa & (F b) U c & F c & F d".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, go to a go to b go to c go to d go to h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh))))), & F a & F b & F c & F d F h, visit, 5, make your way to a b c d and h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We eventually visit a, b, c, d, and h in that order". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh)))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, visit a b c d and h, We must eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We must visit a, then b, then c, then d, and finally h". Examining each part, "eventually visit a" is "Fa". "eventually visit b after visiting a" is "F(a & Fb)". Repeat for the remaining parts. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(h & c & b & d & a), & F a & F b & F c & F d F h, visit, 5, go to h c b d and a in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must "eventually visit h, c, b, d, and a in any order". Examining each part, "eventually visit h" is "Fh". "eventually visit c" is "Fc". Repeat for the remaining parts. The answer is "F(h & c & b & d & a)".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, visit c a d h and b in no particular order, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "in no particular order" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

Fb & F(b -> Fa) & F(a -> Fh) & F(h -> Fc) & F(c -> Fd), & F a & F b & F c & F d F h, visit, 5, go to b a h c and d , We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We eventually visit b, then a, then h, then c, then d". Examining each part, "eventually visit b" is "Fb". "eventually visit a after b" is "F(b -> Fa)". "eventually visit h after a" is "F(a -> Fh)". "eventually visit c after h" is "F(h -> Fc)". "eventually visit d after c" is "F(c -> Fd)". We reached the last landmark so we are done. The answer is "Fb & F(b -> Fa) & F(a -> Fh) & F(h -> Fc) & F(c -> Fd)".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, visit a b c d and h, We must eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "We must visit a, then b, then c, then d, and finally h". Examining each part, "eventually visit a" is "Fa". "eventually visit b after visiting a" is "F(a & Fb)". Repeat for the remaining parts. The answer is "F(a & F(b & F(c & F(d & Fh))))".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, do not stop until a b c d and h are all visited, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "are all visited" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

Fa & (!b U a), F & a F b, sequenced_visit, 2, go to a and move on to b once you have been to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "once you have been to" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit a" is "Fa". The answer is "Fa & (!b U a)".

Fa -> Fb, F & a F b, sequenced_visit, 2, go to a and sometime afterward visit b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "sometime afterward" specifies that we visit b after visiting a but not necessarily immediately after. "We eventually visit a and eventually visit b after a". Examining each part, "eventually visit b after a" is "Fa -> Fb". "eventually visit a" is "Fa". The answer is "Fa -> Fb".

Fa & Fb, F & a F b, sequenced_visit, 2, move a then find b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then find b, eventually". Working backwards, "eventually find b" is "Fb". "eventually, move a and then find b" is "Fa & Fb". We reached the first landmark so we are done. The answer is "Fa & Fb".

Fa & (b -> G(c)) & G(c), F & a F & b F c, sequenced_visit, 3, visit a then go to b finally make your way to c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then make our way to c". Working backwards, "make our way to c" is "G(c)". "visit b and then make our way to c" is "(b -> G(c))". "visit a and then visit b and then make our way to c" is "Fa & (b -> G(c))". We reached the first landmark so we are done. The answer is "Fa & (b -> G(c)) & G(c)".

(Fa -> Fb) & ((Fa & Fb) -> Fc), F & a F & b F c, sequenced_visit, 3, go to a and go to b after a is visited and go to c after a and b are visited, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit a and b. We visit a and then visit b". Examining each part, "visit a" is "Fa". "visit b after a is visited" is "Fa -> Fb". "visit c after a and b are visited" is "(Fa & Fb) -> Fc". We reached the first landmark so we are done. The answer is "(Fa -> Fb) & ((Fa & Fb) -> Fc)".

Fa & Fb & Fc, F & a F & b F c, sequenced_visit, 3, visit a sometime afterwards visit b sometime afterwards visit c, We eventually visit some landmarks in a certain order but not necessarily immediately after each other. Eventually is the "F" LTL operator. "sometime afterwards" specifies we visit one landmark after another but not necessarily immediately after. "We eventually visit a and then eventually visit b and then eventually visit c". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". "eventually visit c" is "Fc". The answer is "Fa & Fb & Fc".

Fa -> Fb & Fb -> Fc, F & a F & b F c, sequenced_visit, 3, visit b at least once after going to a and visit c at least once after going to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" specifies we must "eventually visit b after visiting a" and "eventually visit c after visiting b". Examining each part, "eventually visit b after visiting a" is "Fa -> Fb". "eventually visit c after visiting b" is "Fb -> Fc". There are 3 landmarks so we are done. The answer is "Fa -> Fb & Fb -> Fc".

Fa & Fb & Fc & Fd, F & a F & b F & c F d, sequenced_visit, 4, visit a b c and d in this order there can be other locations in between, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Examining each part, "eventually visit a" is "Fa". "eventually visit b after a" is "Fa & Fb". "eventually visit c after b" is "Fa & Fb & Fc". "eventually visit d after c" is "Fa & Fb & Fc & Fd". We reached the last landmark so we are done. The answer is "Fa & Fb & Fc & Fd".

(a & (b & (c & Fd))), F & a F & b F & c F d, sequenced_visit, 4, visit a followed by b then b followed by c then c followed by d and then d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "followed by" specifies we must visit "a and then visit b, then visit b and then visit c, then visit c and then visit d, and then visit d". Working backwards, "eventually, visit d" is "Fd". "visit c and then d" is "(c & Fd)". "visit b and then c and then visit d" is "(b & (c & Fd))". "visit a and then b and then visit c and then d" is "(a & (b & (c & Fd)))". We reached the first landmark so we are done. The answer is "(a & (b & (c & Fd)))".

F(a & (Fb & Fc & Fd)), F & a F & b F & c F d, sequenced_visit, 4, first go to a then visit b then move to c finally reach d , We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then move to c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "move to c and then visit d" is "(Fc & Fd)". "visit b and then move to c and then visit d" is "(Fb & Fc & Fd)". "eventually, visit a and then visit b and then move to c and then visit d" is "F(a & (Fb & Fc & Fd))". We reached the first landmark so we are done. The answer is "F(a & (Fb & Fc & Fd))".

F(b & Fa) & F(c & F(b & Fa)) & F(d & F(c & F(b & Fa))), F & a F & b F & c F d, sequenced_visit, 4, visit b at least once after visiting a visit c at least once after visiting a and b visit d at least once after visiting a b and c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once after visiting" specifies we must "eventually visit b after visiting a", "eventually visit c after visiting a and b", and "eventually visit d after visiting a, b, and c". Examining each part, "eventually visit b after visiting a" is "F(b & Fa)". "eventually visit c after visiting a and b" is "F(c & F(b & Fa))". "eventually visit d after visiting a, b, and c" is "F(d & F(c & F(b & Fa)))". There are no other landmarks remaining so we are done. The answer is "F(b & Fa) & F(c & F(b & Fa)) & F(d & F(c & F(b & Fa)))".

F(a & F(b & F(c & F(d & Fh))))), F & a F & b F & c F & d F h, sequenced_visit, 5, reach a b c d and h sequentially, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "sequentially" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh)))))".

F(b & Fa) & F(c & F(b & Fa)) & F(d & F(c & F(b & Fa))) & Fh & F(d & F(c & F(b & Fa))), F & a F & b F & c F & d F h, sequenced_visit, 5, visit b at least once after visiting a visit c at least once after visiting both a and b visit d at least once after visiting a b and c and visit h at least once after visiting a b c and d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once after visiting" specifies we must "eventually visit b after visiting a", "eventually visit c after visiting both a and b", "eventually visit d after visiting a, b, and c", and "eventually visit h after visiting a, b, c, and d". Examining each part, "eventually visit b after visiting a" is "F(b & Fa)". "eventually visit c after visiting both a and b" is "F(c & F(b & Fa))". "eventually visit d after visiting a, b, and c" is "F(d & F(c & F(b & Fa)))". "eventually visit h after visiting a, b, c, and d" is "Fh & F(d & F(c & F(b & Fa)))". There are no other landmarks remaining so we are done. The answer is "F(b & Fa) & F(c & F(b & Fa)) & F(d & F(c & F(b & Fa))) & Fh & F(d & F(c & F(b & Fa)))".

((Fa & Fb) & Fc & Fd) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, go to a then go to b and then reach c then reach d and finally go to h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then reach c and then reach d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "reach d and then visit h" is "(Fd & Fh)". "reach c and then reach d and then visit h" is "((Fc & Fd) & Fh)". "visit b and then reach c and then reach d and then visit h" is "((Fb & Fc) & Fd) & Fh". "visit a and then visit b and then reach c and then reach d and then visit h" is "((Fa & Fb) & Fc & Fd) & Fh". We reached the first landmark so we are done. The answer is "((Fa & Fb) & Fc & Fd) & Fh".

(a & (b & (c & (d & Fh)))), F & a F & b F & c F & d F h, sequenced_visit, 5, visit a followed by b then b followed by c then c followed by d then d followed by h and then h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "followed by" specifies we must visit "a and then visit b, then visit b and then visit c, then visit c and then visit d, then visit d and then visit h, and finally visit h". Working backwards, "eventually, visit h" is "Fh". "visit d and then visit h" is "(d & Fh)". "visit c and then visit d and then visit h" is "(c & (d & Fh))". "visit b and then visit c and then visit d and then visit h" is "(b & (c & (d & Fh)))". "visit a and then visit b and then visit c and then visit d and then visit h" is "(a & (b & (c & (d & Fh))))". We reached the first landmark so we are done. The answer is "(a & (b & (c & (d & Fh))))".

F(a & F(b & F(c & F(d & Fh))))), F & a F & b F & c F & d F h, sequenced_visit, 5, first go to a then move to b then go visit c then visit d finally reach h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then move to b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". "eventually, move to b and then visit c and then visit d and then visit h" is "F(b & F(c & F(d & Fh)))". "eventually, visit a and then move to b and then visit c and then visit d and then visit h" is "F(a & F(b & F(c & F(d & Fh)))))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & F(d & Fh)))))".

G(a U (b U (c U (d U (h & FG(a U (b U (c U (d U h))))))))), F & a F & b F & c F & d F h, sequenced_visit, 5, make sure a b c d and h are all visited in this order there can be other locations in between, We eventually visit some landmarks in a certain order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually and forever". Examining each part, "eventually visit h" is "Fh". "visit d and then visit h" is "(d U h)". "visit c and then d and then visit h" is "(c U (d U h))". "visit b and then c and then d and then visit h" is "(b U (c U (d U h)))". "visit a and then b and then c and then d and then visit h" is "(a U (b U (c U (d U h))))". We must repeat this pattern forever so we add the "G" operator. The answer is "G(a U (b U (c U (d U (h & FG(a U (b U (c U (d U h)))))))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, visit b after you visit a visit c after you visit b visit d after you visit c visit h after you visit d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, go to b after you have visited a and go to c after you have visited b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We visit b but not until we visit a and we visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". We reached the first landmark so we are done. The answer is "(!b U a) & (!c U b)".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, first go to a then go to b only after a finally go to c only after b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(a U (!b & !c)) & (b U !c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, keep away from b and c while heading to a and then keep away from c while heading to b and eventually go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "keep away" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we keep away from b and c while heading to a and then keep away from c while heading to b". Examining each part, "keep away from b and c while heading to a" is "(a U (!b & !c))". "keep away from c while heading to b" is "(b U !c)". "eventually visit c" is "Fc". The answer is "(a U (!b & !c)) & (b U !c) & Fc".

(!(a U b) U c), & U ! b a & U ! c b F c, ordered_visit, 3, reach c but not until you visit a and b and that specific order, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit a and then visit b". Examining each part, "visit b after visit a" is "(a U b)". "visit c but not until visit a and b" is "(!(a U b) U c)". There are no other landmarks remaining so we are done. The answer is "(!(a U b) U c)".

(a & (b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, visit a b and c in order but keep avoiding latter ones when you are heading to former ones, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in order" specifies we must visit "a and then visit b and then visit c". "keep avoiding latter ones when you are heading to former ones" specifies that we cannot visit a landmark until we visit the previous one and we cannot visit a landmark after we have visited the next one. Examining each part, "eventually visit c" is "Fc". "visit b and then visit c" is "(b & Fc)". "visit a and then visit b and then visit c" is "(a & (b & Fc))". There are no other landmarks remaining so we are done. The answer is "(a & (b & Fc))".

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, do not visit c until visiting b do not visit b until visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". There are no other landmarks remaining so we are done. The answer is "(!b U a) & (!c U b)".

((a & !b & !c) U a) & ((b & !c) U b) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, go to a at least once while avoiding b and c then go to b at least once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "at least once" specifies we must "eventually visit a and b". "We eventually visit c but not until we visit b and we visit a but not until we avoid b and c". Examining each part, "visit a while avoiding b and c" is "(a & !b & !c) U a". "visit b while avoiding c" is "(b & !c) U b". "eventually visit c" is "Fc". The answer is "((a & !b & !c) U a) & ((b & !c) U b) & Fc".

(a & !b & !c) & (b & !c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, go to a but not through b or c and then go to b but not through c and finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but not through" specifies we cannot visit certain landmarks while visiting others. "We eventually visit c but not until we visit b and we visit b but not through c and we visit a but not through b or c". Examining each part, "visit b but not through c" is "b & !c". "eventually visit c" is "Fc". "visit a but not through b or c" is "a & !b & !c". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(a & !b & !c) & (b & !c) & Fc".

(a & !b & !c) U b & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, move to a while avoiding b and c then move to b while avoiding c finally reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we move to b and we move to b but not until we move to a while avoiding b and c". Examining each part, "move to b but not until move to a while avoiding b and c" is "(a & !b & !c) U b". "eventually visit c" is "Fc". The answer is "(a & !b & !c) U b & Fc".

a & F(b & Fc), & U ! b a & U ! c b F c, ordered_visit, 3, in strictly this order visit a then eventually visit b and finally eventually c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then eventually visit c". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "visit a" is "a". We reached the first landmark so we are done. The answer is "a & F(b & Fc)".

Fa & (!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, visit a b and c where b does not proceed a and c does not proceed b, We eventually visit some landmarks in a certain order while some landmarks cannot be visited until others are visited first. Eventually is the "F" LTL operator. "does not proceed" specifies that we cannot visit a landmark until another landmark is visited first. "We eventually visit a, b, and c where b does not proceed a and c does not proceed b". Examining each part, "eventually visit a" is "Fa". "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "Fa & (!b U a) & (!c U b)".

(!a U !b) & (!b U !c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, first go to a while staying away from b then go to b while staying away from c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while staying away from" and "then" specify we only visit one landmark after visiting another. "We first visit a but not until we stay away from b and then we visit b but not until we stay away from c and finally we visit c". Examining each part, "visit a but not until stay away from b" is "(!a U !b)". "visit b but not until stay away from c" is "(!b U !c)". "eventually visit c" is "Fc". The answer is "(!a U !b) & (!b U !c) & Fc".

(a & !b & !c) & (!c W b) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, direct yourself to a but keep away from b and c then go to b but bypass c and eventually make your way to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "keep away" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but bypass c and we direct ourselves to a but keep away from b and c". Examining each part, "direct ourselves to a but keep away from b and c" is "(a & !b & !c)". "visit b but bypass c" is "(!c W b)". "eventually visit c" is "Fc". The answer is "(a & !b & !c) & (!c W b) & Fc".

Fa & Fb & Fc & !(Fb | Fc) U a & !(Fc U b), & U ! b a & U ! c b F c, ordered_visit, 3, visit a at least once then visit b at least once finally visit c do not visit b or c before a do not visit c before b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" specifies we must "eventually visit a and eventually visit b". "finally visit c" is "Fc". "do not visit b or c before a" is "!(Fb | Fc) U a". "do not visit c before b" is "!(Fc U b)". The answer is "Fa & Fb & Fc & !(Fb | Fc) U a & !(Fc U b)".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, visit a only then should you visit b and only after that should you reach c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

((a & !b) U (a & b & !c)) & (!b U !c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, visit a first while avoiding b and then move to b while avoiding c then visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit a first while avoiding b and then move to b while avoiding c". Examining each part, "visit b while avoiding c" is "(!b U !c)". "visit a first while avoiding b" is "(a & !b) U (a & b & !c)". "eventually visit c" is "Fc". The answer is "((a & !b) U (a & b & !c)) & (!b U !c) & Fc".

(a & !b) U (b | !a & !b) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, move to a exactly once while avoiding b then find b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a exactly once while avoiding b". Examining each part, "visit a exactly once while avoiding b" is "(a & !b) U (b | !a & !b)". "eventually visit b" is "Fb". The answer is "(a & !b) U (b | !a & !b) & Fb".

(a & !b) U a & Fa & (!a U Fb), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, go to a without visiting b then go to b without going to a again, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting" and "without going to again" specify that we visit a landmark only once. "We eventually visit b but not until we visit a and we visit a but not until we visit a without visiting b". Examining each part, "visit a without visiting b" is "(a & !b) U a". "eventually visit a" is "Fa". "eventually visit b" is "Fb". The answer is "(a & !b) U a & Fa & (!a U Fb)".

(!b U a) & Fb & (!a U (a U b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, navigate to a exactly once while staying away from b then you can go to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "stay away" and "then" specify we only visit one landmark after visiting another. "exactly once" specifies we visit a landmark only once. "We eventually visit b but not until we visit a and we visit a only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U b)). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & Fb & (!a U (a U b))".

(G(!a -> (!b U a))) & (!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, stay away from b until you visit a exactly once and then go to b while staying away from a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "stay away" and "then" specify we only visit one landmark after visiting another. "visit a exactly once" specifies we visit a landmark only once. "We visit b but not until we visit a and we stay away from b until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "stay away from b until visit a" is "(G(!a -> (!b U a)))". There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(G(!a -> (!b U a))) & (!b U a) & Fb".

(a U (!a U (b U (!b U true)))) & (!b U a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, reach a and then b in that exact order without repetitions, We eventually visit some landmarks in a certain order while we cannot visit a landmark more than once. Eventually is the "F" LTL operator. "in that exact order" and "without repetitions" specify we visit each landmark only once and in the given order. "We eventually visit b but not until we visit a and we visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit each landmark only once" is "(a U (!a U (b U (!b U true))))". The answer is "(a U (!a U (b U (!b U true)))) & (!b U a)".

(!b U a) & Fb & (!a U b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit b but before visiting b you must visit a visit each location once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "before" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U b). The answer is "(!b U a) & Fb & (!a U b)".

(a & !b) U b & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, go to a exactly once while avoiding b then go to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We visit a exactly once while avoiding b and then we visit b". Examining each part, "visit b" is "Fb". "visit a exactly once while avoiding b" is "(a & !b) U b". The answer is "(a & !b) U b & Fb".

(!b U a) & Fb & (!a U (a U b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit a and only then reach b you can only visit a once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b". "only once" specifies we visit a landmark only once. "We eventually visit b but not until we visit a and we visit a only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U b)). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & Fb & (!a U (a U b))".

(!a U (a U b)) & (!b U a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, only visit a once then visit b only after visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We visit a only once and then visit b but not until we visit a". Examining each part, "visit a only once" is (!a U (a U b)). "visit b but not until visit a" is "(!b U a)". There are no other landmarks remaining so we are done. The answer is "(!a U (a U b)) & (!b U a)".

(!b U a) & (b U (!a & b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, do not visit b before you visit a and then go to b without revisiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" and "without revisiting" specify we only visit one landmark after visiting another and we never visit the previous landmark again. "We eventually visit b but not until we visit a and we visit b without revisiting a". Examining each part, "visit b without revisiting a" is "(b U (!a & b))". "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a) & (b U (!a & b))".

((!b U a) & (!b U (!a U Fb))) & (G(!a | Fb)) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, reach a exactly once while staying away from b then move to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "stay away" and "then" specify we only visit one landmark after visiting another. "exactly once" specifies we visit a landmark only once. "We eventually visit b but not until we visit a exactly once and we stay away from b until we visit a". Examining each part, "visit b but not until visit a exactly once" is "((!b U a) & (!b U (!a U Fb)))". "stay away from b until visit a" is "(G(!a | Fb))". "eventually visit b" is "Fb". There is 1 landmark so we are done. The answer is "((!b U a) & (!b U (!a U Fb))) & (G(!a | Fb)) & Fb".

(a & !b) U (b | !a & !b) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, you must visit a exactly once while avoiding b then you can navigate to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "You must visit a exactly once while avoiding b and then you can navigate to b". Examining each part, "visit a exactly once while avoiding b" is "(a & !b) U (b | !a & !b)". "eventually visit b" is "Fb". The answer is "(a & !b) U (b | !a & !b) & Fb".

(!a U (a U b)) & (!b U a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit a and visit only once then eventually visit b do not visit b before visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only once" specifies we visit a landmark only once. "do not visit before" specifies we cannot visit a landmark before visiting another. "We visit a only once and then eventually visit b but not until we visit a". Examining each part, "visit a only once" is (!a U (a U b)). "visit b but not until visit a" is "(!b U a)". The answer is "(!a U (a U b)) & (!b U a)".

(!b U a) & (!a U (a U b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, only visit a once and do not visit b until you visit a , We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We visit a only once and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a only once" is (!a U (a U b)). There are no other landmarks remaining so we are done. The answer is "(!b U a) & (!a U (a U b))".

(!a U (a U !b)) & F(a & Fb), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, go to a only then go to b but ensure to not revisit a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". "ensure to not revisit a" specifies that we visit a landmark only once. Working backwards, "eventually, visit b" is "Fb". "visit a only once" is (!a U (a U !b)). "eventually, visit a and then visit b" is "F(a & Fb)". The answer is "(!a U (a U !b)) & F(a & Fb)".

(!a U (a U (!a U b))) & (a U b) & (!b U (a U b)) & (!a U (b U (!a U b))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit a one time but not through b and head to b after a is visited but not through a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "not through" specifies we cannot visit a landmark through another landmark. "We visit a only once but not through b. We visit b after we visit a but not through a". Examining each part, "visit a only once" is (!a U (a U (!a U b))). "visit b after we visit a" is "(a U b)". "not through b" is "(!b U (a U b))". "not through a" is "(!a U (b U (!a U b)))". There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!a U (a U (!a U b))) & (a U b) & (!b U (a U b)) & (!a U (b U (!a U b)))".

(!a U !b) & (!b U a) & (!a U (a U b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, you must go to a while avoiding b and then go to b only go to a one time before visiting b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "only go to a one time before visiting b" specifies we visit a landmark only once. "We eventually visit b but not until we visit a and we visit a but not until we avoid b". Examining each part, "avoid b until visit a" is "(!a U !b)". "visit b but not until visit a" is "(!b U a)". "visit a only once" is (!a U (a U b)). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!a U !b) & (!b U a) & (!a U (a U b))".

(a -> !b) & (Fa & !F(a & Fa)) & (!b U !a), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, avoid b initially when a is not visited and then just visit a once and then visit b while avoiding a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "initially" specifies we cannot visit b until we visit a first. "avoiding" and "then" specify we only visit one landmark after visiting another. "We avoid b initially when a is not visited, then visit a once, and then visit b while avoiding a". Examining each part, "avoid b initially when a is not visited" is "(a -> !b)". "visit a once" is "(Fa & !F(a & Fa))". "visit b while avoiding a" is "(!b U !a)". There are no other landmarks remaining so we are done. The answer is "(a -> !b) & (Fa & !F(a & Fa)) & (!b U !a)".

Fa & (Fb & !Fa U b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, go to a and only then go to b without returning to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only then" specifies we only visit one landmark after visiting another. "do not return to previous" specifies that we visit a landmark only once. "We visit a and only then visit b without returning to a". Examining each part, "visit b without returning to a" is "(Fb & !Fa U b)". "eventually visit a" is "Fa". The answer is "Fa & (Fb & !Fa U b)".

(!b U a) & Fb & (!a U (a U b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit a first then visit b while only visiting each location once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while only visiting each location once" specifies that we visit each landmark only once. "We eventually visit b but not until we visit a and we visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U b)). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & Fb & (!a U (a U b))".

(!b U a) & (!a U (a U b & X(!a))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit b but only after a also you cannot revisit a before completing the remaining tasks, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "cannot revisit" specifies that we visit a landmark only once. "We eventually visit b but not until we visit a. We visit each landmark only once except for the last landmark, b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a only once" is (!a U (a U b & X(!a))). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & (!a U (a U b & X(!a)))".

(!b U a) & (!a U (a U !b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit a only once then visit b but do not visit b before visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but do not visit" and "then" specify we only visit one landmark after visiting another. "visit a only once then visit b but do not visit b before visiting a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a only once" is (!a U (a U !b)). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & (!a U (a U !b))".

(Fa & !F(a & Fa)) & (!b U a) & (G(!c) U b) & (!c U Fc) & (Fb & !F(b & Fb)), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, first go to a once then go to b once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We first visit a, then visit b but not until we visit a, and finally visit c but not until we visit b while avoiding c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b while avoiding c" is "(G(!c) U b) & (!c U Fc)". "visit a once" is "(Fa & !F(a & Fa))". "visit b once" is "(Fb & !F(b & Fb))". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(Fa & !F(a & Fa)) & (!b U a) & (G(!c) U b) & (!c U Fc) & (Fb & !F(b & Fb))".

(!b U !a) & (!c U !b) & Fc & (!a U (a U (!a U b))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a once while staying away from b then visit b once while staying away from c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "stay away" and "then" specify we only visit one landmark after visiting another. "visit a once while staying away from b then visit b once while staying away from c finally visit c". Examining each part, "visit b but stay away from a" is "(!b U !a)". "visit c but stay away from b" is "(!c U !b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U !a) & (!c U !b) & Fc & (!a U (a U (!a U b)))".

(a & !b & !c) U (b U c U (a & (!b & !c))) & (b & !c) U (c U (b & !c)) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once avoid b or c before a then reach b exactly once  avoid c before b finally move to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies we visit a landmark only once. "avoid" and "then" specify we only visit one landmark after visiting another. "We visit a exactly once and avoid b or c before a. We then reach b exactly once and avoid c before b. Finally, we move to c". Examining each part, "visit a exactly once and avoid b or c before a" is "(a & !b & !c) U (b U c U (a & (!b & !c)))". "visit b exactly once and avoid c before b" is "(b & !c) U (c U (b & !c))". "move to c" is "Fc". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(a & !b & !c) U (b U c U (a & (!b & !c))) & (b & !c) U (c U (b & !c)) & Fc".

(!a U (a U (!a U b))) & Fb & (!c U (c U (!c U b))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, only visit a once followed by visiting b then visiting c once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once" specifies we visit a landmark only once. "We visit a only once, then visit b, then visit c only once". Examining each part, "visit a only once" is "(!a U (a U (!a U b)))". "visit b" is "Fb". "visit c only once" is "(!c U (c U (!c U b)))". There are no other landmarks remaining so we are done. The answer is "(!a U (a U (!a U b))) & Fb & (!c U (c U (!c U b)))".

(!b U a) & (!c U b) & G(!(b & c)) & G(!((a & b) | (a & c))) & (!c U (c & G(!(b & c)) & G(!((a & b) | (a & c)))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a but not through b or c and then go to b but not through c and finally go to c no revisiting is allowed , We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "not through" specifies we cannot visit certain landmarks while visiting others. "no revisiting" specifies that we visit a landmark only once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We cannot visit c while visiting b and we cannot visit b or c while visiting a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "cannot visit c while visiting b" is "G(!(b & c))". "cannot visit b or c while visiting a" is "G(!((a & b) | (a & c)))". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & G(!(b & c)) & G(!((a & b) | (a & c))) & (!c U (c & G(!(b & c)) & G(!((a & b) | (a & c))))".

(a U b) & (!c U b) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a but do not visit b or c and then go to b but do not visit c or revisit a and then go to c but do not revisit a or b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but do not visit" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we revisit a and we visit a but not until we visit it for the first time". Examining each part, "visit b but not until revisit a" is "(a U b)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". There are no other landmarks remaining besides a so we are done. The answer is "(a U b) & (!c U b) & Fc".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, reach a first only then reach b and do not visit a again only then reach c and do not visit b again, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only then" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we visit a only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & Fc".

(!b U a) & (b -> Fc) & Fb & (!a U (a U (!a U b))) & (!b U (b U c)) & (!c U (c U (!a U !b))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit b but before visiting b you must visit a only after that visit c visit each location once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "before" and "only after" specify we only visit one landmark after visiting another. "visit each location once" specifies that we visit a landmark only once. "We eventually visit b but not until we visit a and we visit c but only after we visit b. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but only after visit b" is "(b -> Fc)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (b -> Fc) & Fb & (!a U (a U (!a U b))) & (!b U (b U c)) & (!c U (c U (!a U !b)))".

(a & !b & !c & !Fa) & (b & !c & !Fb) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once while avoiding b and c then visit b exactly once while avoiding c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We visit a exactly once while avoiding b and c, then we visit b exactly once while avoiding c, and finally we visit c". Examining each part, "visit a exactly once while avoiding b and c" is "(a & !b & !c & !Fa)". "visit b exactly once while avoiding c" is "(b & !c & !Fb)". "eventually visit c" is "Fc". The answer is "(a & !b & !c & !Fa) & (b & !c & !Fb) & Fc".

(a & !b & !c & !Fa) & (b & !c & !Fb) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once while avoiding b and c then visit b exactly once while avoiding c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We visit a exactly once while avoiding b and c, then we visit b exactly once while avoiding c, and finally we visit c". Examining each part, "visit a exactly once while avoiding b and c" is "(a & !b & !c & !Fa)". "visit b exactly once while avoiding c" is "(b & !c & !Fb)". "eventually visit c" is "Fc". The answer is "(a & !b & !c & !Fa) & (b & !c & !Fb) & Fc".

(a & !b & !c) U (b | c) & (b & !c) U c, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a exactly once while avoiding b and c then go to b exactly once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We visit a exactly once while avoiding b and c, then we visit b exactly once while avoiding c, finally we visit c". Examining each part, "visit a exactly once while avoiding b and c" is "(a & !b & !c) U (b | c)". "visit b exactly once while avoiding c" is "(b & !c) U c". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(a & !b & !c) U (b | c) & (b & !c) U c".

(!b U a) & (!c U b) & (!b U (!a U (a & b))) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a only then go to b only then go to c while visiting a and b only once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only then" specifies we only visit one landmark after visiting another. "visit a and b only once" specifies we visit a and b only once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a and b only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a and b only once" is "(!b U (!a U (a & b)))". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & (!b U (!a U (a & b))) & Fc".

(a & !b) U a & (b & !c) U b & (c & !d) U c & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, first go to a once without visiting b then go to b once without visiting c then go to c once without visiting d finally go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once without visiting" specifies we visit a landmark only once and do not visit the next landmark until we have visited the current landmark. "We first visit a without visiting b, then visit b without visiting c, then visit c without visiting d, and finally visit d". Examining each part, "visit a without visiting b" is "(a & !b) U a". "visit b without visiting c" is "(b & !c) U b". Repeat for the remaining parts. There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(a & !b) U a & (b & !c) U b & (c & !d) U c & Fd".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, do not go to d until c is visited and do not go to c until b is visited and do not go to b until a is visited along the path never return to previous location you have been to, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "never return to previous" specifies that we visit a landmark only once. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

Fa & (b & !c) U a & (c & !d) U b & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, first go to a once then go to b once while avoiding c then go to c once while avoiding d finally go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We first visit a, then visit b but not until we avoid c, then visit c but not until we avoid d, and finally visit d". Examining each part, "visit b but not until avoid c" is "(b & !c) U a". "visit c but not until avoid d" is "(c & !d) U b". Repeat for the remaining parts. There are no other landmarks remaining besides the last landmark d so we are done. The answer is "Fa & (b & !c) U a & (c & !d) U b & Fd".

(a & (b & (c & Fd))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit a then b then c then d follow this strict order and visit each location only once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "strict order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". "visit each location only once" specifies that we visit a landmark only once. Examining each part, "eventually visit d" is "Fd". "visit c and then d" is "(c & Fd)". "visit b and then c and then d" is "(b & (c & Fd))". "visit a and then b and then c and then d" is "(a & (b & (c & Fd)))". We reached the first landmark so we are done. The answer is "(a & (b & (c & Fd)))".

(a & !b) U (b & !c) U (c & !d) & (b & !c) U (c & !d) & (c & !d) & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, head to a b c and d in this order without skipping or revisiting any one of them, We eventually visit some landmarks in a certain order while we cannot skip or revisit any landmarks. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". "without skipping or revisiting any one of them" specifies that we visit each landmark only once. Working backwards, "eventually, visit d" is "Fd". "visit c and then d" is "(c & !d) U d". "visit b and then c and then d" is "(b & !c) U (c & !d)". "visit a and then b and then c and then d" is "(a & !b) U (b & !c) U (c & !d)". The answer is "(a & !b) U (b & !c) U (c & !d) & (b & !c) U (c & !d) & (c & !d) & Fd".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b & !a U c & !a U d))) & (!b U (b U (!b U c & !b U d))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, go to a but not through b c or d and then go to b but not through c or d and then go to c but not through d and finally go to d no revisiting is allowed , We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "not through" and "then" specify we only visit one landmark after visiting another. "no revisiting" specifies that we visit a landmark only once. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b & !a U c & !a U d))). Repeat for the remaining landmarks except for the landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b & !a U c & !a U d))) & (!b U (b U (!b U c & !b U d))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & G(!a W a) & G(!b W b U a) & G(!c W c U b) & G(!d W d U c), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, go to a but do not visit b c or d and then go to b but do not visit c or d or revisit a and then go to c but do not visit d or revisit a or b and then go to d but do not revisit a b or c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "do not visit" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "do not revisit a" is "G(!a W a)". Repeat for the remaining landmarks except for the landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & G(!a W a) & G(!b W b U a) & G(!c W c U b) & G(!d W d U c)".

(!b U a) & (!c U b) & (!d U c) & (!c U (c U (!c U d))) & (!b U (b U (!b U c))) & (!d U (d U (!d U c))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, do not visit d until you visit c visit c only once do not visit c until you visit b visit b only once do no visit b until you visit a visit a only once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only once" specifies we visit a landmark only once. "do not visit" and "until" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c only once but not until we visit b and we visit b only once but not until we visit a and we visit a only once". Examining each part, "visit b only once" is "(!b U (b U (!b U c)))". "visit c only once" is "(!c U (c U (!c U d)))". Repeat for the remaining parts. The answer is "(!b U a) & (!c U b) & (!d U c) & (!c U (c U (!c U d))) & (!b U (b U (!b U c))) & (!d U (d U (!d U c)))".

(!b U a) & (!c U b) & (!d U c) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, go to a only once but keep away from b c and d and then go to b only once but keep away from a c and d and then go to c only once but keep way from a b and d and finally go to d once but keep away from a b and c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only once" specifies we visit a landmark only once. "keep away" specifies we do not visit certain landmarks until we visit others first. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the last landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d)))".

Fa & Fb & Fc & Fd & ((!a U b) & (!b U c) & (!c U d)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit each of a b c and d exactly once in this order, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "exactly once" specifies we visit each landmark only once. "We eventually visit a then b then c then d". Examining each part, "eventually visit a then b then c then d" is "Fa & Fb & Fc & Fd & ((!a U b) & (!b U c) & (!c U d))". The last part specifies that we visit each landmark only once. The answer is "Fa & Fb & Fc & Fd & ((!a U b) & (!b U c) & (!c U d))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a & (!a U b))) & (!b U (b & (!b U c))) & (!c U (c & (!c U d))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit a then b then c and then d in that strict order without returning to previously visited locations, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that strict order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". "never return to previous" specifies that we visit a landmark only once. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a & (!a U b))) & (!b U (b & (!b U c))) & (!c U (c & (!c U d)))".

(!b U a) & (!c U b) & (c -> Fd) & (!a U (a U !b)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit a only once while avoiding b then visit b once while avoiding c only after visiting c once visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We visit a only once while avoiding b. We visit b only once while avoiding c. We visit d only after visiting c once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until visit c" is "(c -> Fd)". "visit a only once" is (!a U (a U !b)). There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U b) & (c -> Fd) & (!a U (a U !b))".

F a & F b & F c & F d & (a -> Fb) & (c -> Fb) & (c -> Fd), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit a b c d once do not visit b without visiting a and do not visit b without visiting c do not visit d without visiting c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once" specifies we visit each landmark only once. "do not visit b without visiting a" is "(a -> Fb)". "do not visit b without visiting c" is "(c -> Fb)". "do not visit d without visiting c" is "(c -> Fd)". Examining each part, "eventually visit a once" is "F a". "eventually visit b once" is "F b". Repeat for the remaining parts. The answer is "F a & F b & F c & F d & (a -> Fb) & (c -> Fb) & (c -> Fd)".

(a U (!b & !c & !d)) & (!c U (c & !a & !b & !d)) & (!d U (d & !a & !b & !c)) & Fa, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, stay away from b c and d until you make a single visit to a and then make your way to b while staying away from a c and d and then make your way to c while staying away from a b or d and finally make your way to d while staying away from a b and c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "stay away from" and "then" specify we only visit one landmark after visiting another. "We visit a first and then visit b while staying away from a, c, and d. We visit c while staying away from a, b, or d. We visit d while staying away from a, b, and c". Examining each part, "visit b but stay away from a, c, and d until visit a" is "(a U (!b & !c & !d))". "visit c while staying away from a, b, or d" is "(!c U (c & !a & !b & !d))". "visit d while staying away from a, b, and c" is "(!d U (d & !a & !b & !c))". "eventually visit a" is "Fa". The answer is "(a U (!b & !c & !d)) & (!c U (c & !a & !b & !d)) & (!d U (d & !a & !b & !c)) & Fa".

(!b U a) & (b & !c U b) & (c & !d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U F 1), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, go to a without visiting b then go to b without visiting c then go to c without visiting d finally go to d while only visiting each location once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without visiting" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b without visiting c" is "(b & !c)". Repeat for the remaining parts. "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). Repeat for the remaining landmarks. The answer is "(!b U a) & (b & !c U b) & (c & !d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U F 1)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a & (b & !c & !d & !h))) & (!b U (b & (c | (a & !c & !d & !h)))) & (!c U (c & (d | (b & !d & !h)))) & (!d U (d & !h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, go to a but not through b c d or h and then go to b but not through c d or h and then go to c but not through d or h and then go to d but not through h and finally go to h no revisiting is allowed here, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "not through" and "then" specify we only visit one landmark after visiting another. "no revisiting" specifies that we visit a landmark only once. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not through c, d, or h" is "(b & !c & !d & !h)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a & (b & !c & !d & !h))). "visit b only once" is (!b U (b & (c | (a & !c & !d & !h)))). Repeat for the remaining landmarks except for the landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a & (b & !c & !d & !h))) & (!b U (b & (c | (a & !c & !d & !h)))) & (!c U (c & (d | (b & !d & !h)))) & (!d U (d & !h))".

(!a U b) & (G(!b U c)) & (G(!c U d)) & (G(!d U h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, go to a only then go to  b without returning only after that go to c without returning only after that go to d without returning  and finally only then go to h without returning, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "do not return" specifies that we visit a landmark only once. "We visit a then b then c then d then h, each landmark only once". Examining each part, "eventually visit h" is "Fh". "visit d without returning" is "(G(!d U h))". "visit c without returning only after that go to d without returning" is "(G(!c U d)) & (G(!d U h))". Repeat for the remaining parts. "visit a only" is "(!a U b)". There are no other landmarks remaining besides the last landmark h so we are done. The answer is "(!a U b) & (G(!b U c)) & (G(!c U d)) & (G(!d U h))".

(!a U (a U (!a U b))) & (G(!a U b) U (G(!b U c) U (G(!c U d) U Fh))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a and only then visit b without returning to a only then visit c without returning to b only then visit d without returning to c and only then visit h without returning to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". "without returning" specifies that we visit a landmark only once. Examining each part, "eventually visit h" is "Fh". "visit d without returning to c" is "(G(!c U d))". "visit c without returning to b" is "(G(!b U c))". "visit b without returning to a" is "(G(!a U b))". "visit a only once" is (!a U (a U (!a U b))). There are no other landmarks remaining besides the last landmark h so we are done. The answer is "(!a U (a U (!a U b))) & (G(!a U b) U (G(!b U c) U (G(!c U d) U Fh)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & F a & F b & F c & F d & F h, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a b c d and h once do not visit b without visiting a and do not visit c without visiting b also do not visit d without visiting c and do not visit h without visiting d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once" specifies we visit each landmark only once. "do not visit X without visiting Y" specifies we cannot visit landmark X until we visit landmark Y. "We visit a, b, c, d, and h once. We do not visit b without visiting a, we do not visit c without visiting b, we do not visit d without visiting c, and we do not visit h without visiting d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & F a & F b & F c & F d & F h".

Fa & (!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, eventually visit a afterward eventually visit b afterward eventually visit c afterward eventually visit d afterward eventually visit h visit each landmark only once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". "visit each landmark only once" specifies that we visit a landmark only once. Examining each part, "eventually visit h" is "Fh". "visit d but not until we visit c" is "(!d U c)". Repeat for the remaining parts. "eventually visit a" is "Fa". "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. The answer is "Fa & (!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(a & (b & (c & (d & Fh)))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a b c d and h in that exact order once you leave any location you cannot return to it, We eventually visit some landmarks in a certain order while we cannot visit a landmark again after leaving it. Eventually is the "F" LTL operator. "in that exact order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". "once you leave any location you cannot return to it" specifies that we visit a landmark only once. Working backwards, "eventually, visit h" is "Fh". "visit d and then h" is "(d & Fh)". "visit c and then d and then h" is "(c & (d & Fh))". "visit b and then c and then d and then h" is "(b & (c & (d & Fh)))". "visit a and then b and then c and then d and then h" is "(a & (b & (c & (d & Fh))))". The answer is "(a & (b & (c & (d & Fh))))".

(!d U c) & (!c U b) & (!b U a) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, do not visit h until you visit d visit d only once do not visit d until you visit c visit c only once do not visit c until you visit b visit b only once do no visit b until you visit a visit a only once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "do not visit" and "only once" specify that we visit a landmark only once. "We eventually visit h but not until we visit d and we visit d only once and we do not visit d until we visit c and we visit c only once and we do not visit c until we visit b and we visit b only once and we do not visit b until we visit a and we visit a only once". Examining each part, "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!d U c) & (!c U b) & (!b U a) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U h))".

(a U b) & (b U c) & (c U d) & (d U h) & Fh & (!a U !b) & (!b U (!a & !c)) & (!c U (!b & !d)) & (!d U (!c & !h)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, go to a only then go to b only then go to c only then go to d and only then go to h make sure to  not revisit any of the locations before completing the task, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only then" specifies we only visit one landmark after visiting another. "do not revisit" specifies that we visit a landmark only once. "We visit a then b then c then d then h. We visit each landmark only once". Examining each part, "visit b only then visit a" is "(a U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(a U b) & (b U c) & (c U d) & (d U h) & Fh & (!a U !b) & (!b U (!a & !c)) & (!c U (!b & !d)) & (!d U (!c & !h))".

(!a U (a & (!a U b))) & F(a & Fb) & (!b U (b & (!b U c))) & F(b & Fc) & (!c U (c & (!c U d))) & F(d & Fh), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a followed by visiting b then visit c d and h in this exact order visit all locations once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "followed by" specifies we visit one landmark after another in a certain order. "visit all locations once" specifies we visit each landmark only once. "We visit a, then b, then c, then d, and finally h". Examining each part, "visit b after visit a" is "F(a & Fb)". "visit c after visit b" is "F(b & Fc)". Repeat for the remaining parts. "eventually visit h after visit d" is "F(d & Fh)". "visit a only once" is (!a U (a & (!a U b))). "visit b only once" is (!b U (b & (!b U c))). Repeat for the remaining landmarks except for the last landmark h. The answer is "(!a U (a & (!a U b))) & F(a & Fb) & (!b U (b & (!b U c))) & F(b & Fc) & (!c U (c & (!c U d))) & F(d & Fh)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U h), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a then b then c then d and then h visit each landmark only once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "We visit a then b then c then d and then h. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U h)".

(a -> (!b U b)) & (b -> (!c U c)) & (c -> (!d U d)) & (d -> (!h U h)) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, before visiting b c d and h visit a and never visit it again then visit b before c d and h and never visit it again do not visit d and h until you visit c never visit c again then visit d before h and never visit h again finally visit h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "before" and "then" specify we only visit one landmark after visiting another. "never visit again" specifies that we visit a landmark only once. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b before c d and h and never visit it again" is "(a -> (!b U b)) & (b -> (!c U c)) & (c -> (!d U d)) & (d -> (!h U h))". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). Repeat for the remaining landmarks except for the landmark h. The answer is "(a -> (!b U b)) & (b -> (!c U c)) & (c -> (!d U d)) & (d -> (!h U h)) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & ((b & !c) U b) & ((c & !d) U c) & ((d & !h) U d) & Fh & (!a U (a & (!b U b))) & (!b U (b & (!c U c))) & (!c U (c & (!d U d))) & (!d U (d & (!h U h))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, go to a without visiting b then go to b without visiting c third go to c without visiting d fourth go to d without visiting h finally go to h visit a b c and d only one time, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without visiting" and "then" specify we only visit one landmark after visiting another. "We visit a without visiting b, then we visit b without visiting c, then we visit c without visiting d, then we visit d without visiting h, and finally we visit h. We visit each landmark only once". Examining each part, "visit b without visiting c" is "(b & !c) U b". Repeat for the remaining parts. "visit a only once" is (!a U (a & (!b U b))). "visit b only once" is (!b U (b & (!c U c))). Repeat for the remaining landmarks. The answer is "(!b U a) & ((b & !c) U b) & ((c & !d) U c) & ((d & !h) U d) & Fh & (!a U (a & (!b U b))) & (!b U (b & (!c U c))) & (!c U (c & (!d U d))) & (!d U (d & (!h U h)))".

(a -> Fb) & (b -> (F c & !Fc U d)) & (c -> Fd) & (d -> Fh), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a only once then eventually visit b only once then visit c in the future for one time followed by one visit to d and after that h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only once" specifies we visit a landmark only once. "We visit a only once, then eventually visit b only once, then visit c in the future for one time followed by one visit to d and after that h". Examining each part, "visit b only once after visiting a" is "(a -> Fb)". "visit c in the future for one time after visiting b" is "(b -> (F c & !Fc U d))". "visit d after visiting c" is "(c -> Fd)". "eventually visit h after visiting d" is "(d -> Fh)". There are no other landmarks remaining besides the last landmark h so we are done. The answer is "(a -> Fb) & (b -> (F c & !Fc U d)) & (c -> Fd) & (d -> Fh)".

(a -> Xb) & (!b U (c | d | h)) & (a & b -> Xc) & (!c U (d | h | b)) & (a & b & c -> Xd) & (!d U (h | c | b | a)) & (a & b & c & d -> Fh) & (!h U (a | b | c | d)), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, go to a but do not visit b c d or h and then go to b but do not visit c d or h or revisit a and then go to c but do not visit d or h or revisit a or b and then go to d but do not visit h or revisit a b or c and then go to h but do not revisit a b c or d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "do not visit" and "then" specify we only visit one landmark after visiting another. "We visit a but not b, c, d, or h. We visit b but not c, d, or h or revisit a. We visit c but not d, h, or revisit a or b. We visit d but not h or revisit a, b, or c. We visit h but not revisit a, b, c, or d". Examining each part, "visit b but not c, d, or h or revisit a" is "(a -> Xb) & (!b U (c | d | h))". "visit c but not d, h, or revisit a or b" is "(a & b -> Xc) & (!c U (d | h | b))". "visit d but not h or revisit a, b, or c" is "(a & b & c -> Xd) & (!d U (h | c | b | a))". "visit h but not revisit a, b, c, or d" is "(a & b & c & d -> Fh) & (!h U (a | b | c | d))". The answer is "(a -> Xb) & (!b U (c | d | h)) & (a & b -> Xc) & (!c U (d | h | b)) & (a & b & c -> Xd) & (!d U (h | c | b | a)) & (a & b & c & d -> Fh) & (!h U (a | b | c | d))".

(G(!b) U a) & (!b U Fb), & U ! b a F b, ordered_visit, 2, first go to a while avoiding b then move to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a while avoiding b". Examining each part, "visit b but not until visit a while avoiding b" is "(G(!b) U a) & (!b U Fb)". The answer is "(G(!b) U a) & (!b U Fb)".

Fa -> Fb, & U ! b a F b, ordered_visit, 2, first go to a then go to b only after a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b". "only after" specifies we only visit one landmark after visiting another. "We visit a first and then visit b". Examining each part, "eventually visit b" is "Fa -> Fb". "eventually visit a" is "Fa". We reached the first landmark so we are done. The answer is "Fa -> Fb".

(G(!a -> (!b U a))) & (!b U a) & Fb, & U ! b a F b, ordered_visit, 2, go to a while staying away from b then move to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while staying away from" specifies we cannot visit a landmark until we visit another first. "We eventually visit b but not until we visit a and we stay away from b until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "stay away from b until visit a" is "(G(!a -> (!b U a)))". "eventually visit b" is "Fb". The answer is "(G(!a -> (!b U a))) & (!b U a) & Fb".

(!b U a) -> Fb, & U ! b a F b, ordered_visit, 2, ensure that you do not reach b before going to a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "before" specifies we must visit one landmark before another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) -> Fb".

F(a & Fb), & U ! b a F b, ordered_visit, 2, visit b only after visiting a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, you must visit a first before going to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "before" specifies we must visit "a and then visit b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(a -> Fb) & (!a U (a U b)), & U ! b a F b, ordered_visit, 2, go to b after going to a do not go to b before, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "do not go to b before" specifies we visit a landmark only once. "We eventually visit b but only after we visit a and we visit a only once". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit a only once" is (!a U (a U b)). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(a -> Fb) & (!a U (a U b))".

Fa & G(!b | (a U b)), & U ! b a F b, ordered_visit, 2, go from a to b do not go to b before visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "do not go to b before visiting a" specifies we must "visit a and then visit b, without visiting b before a". Working backwards, "visit b without visiting b before a" is "G(!b | (a U b))". "visit a and then visit b without visiting b before a" is "Fa & G(!b | (a U b))". We reached the first landmark so we are done. The answer is "Fa & G(!b | (a U b))".

(G(!b) U a) & Fb, & U ! b a F b, ordered_visit, 2, go to a while avoiding b then go to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a while avoiding b". Examining each part, "visit b but not until visit a while avoiding b" is "(G(!b) U a) & Fb". The answer is "(G(!b) U a) & Fb".

(!b U a), & U ! b a F b, ordered_visit, 2, do not visit b until you go to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". There are no other landmarks remaining so we are done. The answer is "(!b U a)".

(G(!a & !b)) & (Fa -> Fb), & U ! b a F b, ordered_visit, 2, find a while avoiding b then after finding a go to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we find a and we avoid b while finding a". Examining each part, "avoid b while finding a" is "(G(!a & !b))". "eventually visit b" is "Fb". "find a" is "(Fa)". The answer is "(G(!a & !b)) & (Fa -> Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, go to a and then go to b but do not visit b before a is visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". "do not visit b before a is visited" specifies "a must be visited before b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb) & !(b U a), & U ! b a F b, ordered_visit, 2, visit a then eventually visit b do not visit b before visiting a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". "do not visit b before visiting a" is "!(b U a)". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb) & !(b U a)".

(a -> Fb) & Fb, & U ! b a F b, ordered_visit, 2, go to b but only visit b if you already visited a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only visit" and "if" specify we only visit one landmark after visiting another. "We eventually visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "eventually visit b" is "Fb". The answer is "(a -> Fb) & Fb".

F(a & Fb), & U ! b a F b, ordered_visit, 2, go to a and only then go to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

Fa -> Fb, & U ! b a F b, ordered_visit, 2, go to a then b you cannot visit b before a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "cannot visit" and "before" specify we only visit one landmark after visiting another. "We eventually visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "a -> Fb". "eventually visit a" is "Fa". The answer is "Fa -> Fb".

(!b U a) & !(b & !a), & U ! b a F b, ordered_visit, 2, visit b but do not visit b before you reach a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we never visit b before we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "never visit b before visit a" is "!(b & !a)". The answer is "(!b U a) & !(b & !a)".

Fa & (!b U a), & U ! b a F b, ordered_visit, 2, head to a first and then to b but do not visit b if you have not been to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but do not visit" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit a first". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a first" is "Fa". The answer is "Fa & (!b U a)".

Fa & F(b & (!b U a)), & U ! b a F b, ordered_visit, 2, visit a and b but do not visit b without visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without" specifies we cannot visit one landmark without visiting another first. "We eventually visit a and b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit a and b" is "Fa & F(b & (!b U a))". We reached the first landmark so we are done. The answer is "Fa & F(b & (!b U a))".

Fa & (a -> Fb), & U ! b a F b, ordered_visit, 2, visit a and visit b only if a is visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only if" specifies we only visit one landmark after visiting another. "We eventually visit a and we visit b but only if we visit a first". Examining each part, "eventually visit a" is "Fa". "visit b only if visit a" is "(a -> Fb)". There are no other landmarks remaining so we are done. The answer is "Fa & (a -> Fb)".

G(a & Fa), G F a, patrolling, 1, make sure you visit a infinite times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "infinite times" specifies we must "visit a forever". Examining each part, "visit a forever" is "G(a & Fa)". There is 1 landmark so we are done. The answer is "G(a & Fa)".

Ga & G(!a U a), G F a, patrolling, 1, do not stop going to a, We must keep visiting a landmark forever. Forever is the "G" LTL operator. "do not stop" specifies we must "keep visiting a forever". Examining each part, "keep visiting a forever" is "Ga & G(!a U a)". There is 1 landmark so we are done. The answer is "Ga & G(!a U a)".

Ga & G(Ga), G F a, patrolling, 1, do not stop visiting a, We must keep visiting a landmark forever. Forever is the "G" LTL operator. "do not stop" specifies we must "keep visiting a forever". Examining each part, "keep visiting a forever" is "Ga & G(Ga)". There is 1 landmark so we are done. The answer is "Ga & G(Ga)".

G(a & Fa), G F a, patrolling, 1, go to a repeatedly, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "repeatedly" specifies we must "visit a forever". Examining each part, "visit a forever" is "G(a & Fa)". There is 1 landmark so we are done. The answer is "G(a & Fa)".

Ga & G(Ga), G F a, patrolling, 1, do not stop visiting a, We must keep visiting a landmark forever. Forever is the "G" LTL operator. "do not stop" specifies we must "keep visiting a forever". Examining each part, "keep visiting a forever" is "Ga & G(Ga)". There is 1 landmark so we are done. The answer is "Ga & G(Ga)".

G(a), G F a, patrolling, 1, never stop visiting a, We must keep visiting a landmark forever. Forever is the "G" LTL operator. "never stop visiting a" specifies we must "visit a forever". Examining each part, "visit a forever" is "G(a)". There is 1 landmark so we are done. The answer is "G(a)".

G(a), G F a, patrolling, 1, continue to visit a, We must continue to visit a landmark forever. Forever is the "G" LTL operator. "continue to visit a" specifies we must "always visit a forever". Examining each part, "always visit a forever" is "G(a)". There is 1 landmark so we are done. The answer is "G(a)".

eans that we must keep moving towards a and eventually reach it at some point in the futur, G F a, patrolling, 1, continue moving to a, We must keep moving towards a landmark. "continue moving to a" is "G(Fa)". This means that we must keep moving towards a and eventually reach it at some point in the future.

Ga, G F a, patrolling, 1, please keep visiting a without stopping, We must keep visiting a landmark forever. Forever is the "G" LTL operator. "keep visiting" specifies we must "visit a forever". Examining each part, "visit a forever" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

GFa & G(a & G(a)), G F a, patrolling, 1, visit a again and again, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "again and again" specifies we must "eventually visit a forever and keep visiting it forever". Examining each part, "eventually visit a forever" is "GFa". "keep visiting a forever" is "G(a & G(a))". The answer is "GFa & G(a & G(a))".

(b & !a) U b & (c & !b) U c & (d & !c) U d, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a without visiting b then visit b without visiting c then visit c without visiting d finally visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without visiting" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a without visiting b". Examining each part, "visit b without visiting a" is "(b & !a) U b". "visit c without visiting b" is "(c & !b) U c". "visit d without visiting c" is "(d & !c) U d". We reached the first landmark so we are done. The answer is "(b & !a) U b & (c & !b) U c & (d & !c) U d".

a -> b & b -> c & c -> d, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, first go directly to a without visiting any other waypoints then go directly to b then directly to c and finally directly to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "directly" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but only after we directly visit c and we directly visit c only after we directly visit b and we directly visit b only after we directly visit a". Examining each part, "directly visit b only after directly visit a" is "a -> b". "directly visit c only after directly visit b" is "b -> c". "directly visit d only after directly visit c" is "c -> d". We reached the first landmark so we are done. The answer is "a -> b & b -> c & c -> d".

(!b U a) & (!c U (!d U b)) & Fd, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, first go to a while avoiding b then go to b while staying away from c then go to c while staying away from d then visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a while avoiding b". Examining each part, "visit b while avoiding b" is "(!b U a)". "visit c while staying away from d" is "(!c U (!d U b))". "visit d" is "Fd". The answer is "(!b U a) & (!c U (!d U b)) & Fd".

(!b U a) & (!c U b) & (!d U c), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c and d in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "strict order" specifies we must visit "a and then visit b and then visit c and then visit d". "once the predecessor is visited you must visit the successor" specifies we only visit one landmark after visiting another. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until visit c" is "(!d U c)". There are no other landmarks remaining so we are done. The answer is "(!b U a) & (!c U b) & (!d U c)".

(a & !b) U (b & !a) & (b & !c) U (c & !b) & (c & !d) U (d & !c) & Fd, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a first while avoiding b then visit b while avoiding c then visit c while avoiding d then visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a while avoiding b". Examining each part, "visit b but not until visit a while avoiding b" is "(a & !b) U (b & !a)". "visit c but not until visit b while avoiding c" is "(b & !c) U (c & !b)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(a & !b) U (b & !a) & (b & !c) U (c & !b) & (c & !d) U (d & !c) & Fd".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c d in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "eventually, visit a and then b and then c and then visit d" is "F(a & F(b & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit d but do not visit d until you have reached c in turn only go to c after you visit b and only go to b after reaching a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U b) & (!d U c)".

(!b U a) & (!c U b) & (!d U c) & Fd & !(b | c | d) U (a & !b & !c & !d), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a but not through b c or d and then go to b but not through c or d and then go to c but not through d and finally go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first and we cannot pass through certain landmarks. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". "not through" specifies we cannot pass through certain landmarks. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a. We cannot pass through b, c, or d while heading to the next landmark". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "cannot pass through" is "!(b | c | d) U (a & !b & !c & !d)". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & !(b | c | d) U (a & !b & !c & !d)".

(a & !b) U b & (b & !c) U c & (c & !d) U d & Fd, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, reach a without going to b then go to b without passing c then go to c without passing d finally go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without going to" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a without going to b". Examining each part, "visit b but not until visit a without going to b" is "(a & !b) U b". "visit c but not until visit b without passing c" is "(b & !c) U c". "visit d but not until visit c without passing d" is "(c & !d) U d". "eventually visit d" is "Fd". The answer is "(a & !b) U b & (b & !c) U c & (c & !d) U d & Fd".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c and d in that specific order make sure not to visit waypoints out of turn, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "eventually, visit a and then b and then c and then visit d" is "F(a & F(b & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, make your way to d only after going to c before that make your way to c only after going to b before that make your way to b only after going to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U b) & (!d U c)".

(a -> Fb) & (b -> Fc) & (c -> Fd), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a only after that go to b only then go to c and only then go to d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit d but only after we visit c and we visit c but only after we visit b and we visit b but only after we visit a". Examining each part, "visit b but only after visit a" is "(a -> Fb)". "visit c but only after visit b" is "(b -> Fc)". "visit d but only after visit c" is "(c -> Fd)". We reached the first landmark so we are done. The answer is "(a -> Fb) & (b -> Fc) & (c -> Fd)".

(a -> Fb) & (b -> Fc) & (c -> Fd), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, do not visit successor without visiting the predecessor in the following strict order a b c and d, We eventually visit some landmarks in a strict order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "strict order" specifies we must visit "a, then b, then c, then d". "We cannot visit b without first visiting a, we cannot visit c without first visiting b, and we cannot visit d without first visiting c". Examining each part, "visit b only after visit a" is "(a -> Fb)". "visit c only after visit b" is "(b -> Fc)". "visit d only after visit c" is "(c -> Fd)". There are no other landmarks remaining so we are done. The answer is "(a -> Fb) & (b -> Fc) & (c -> Fd)".

(!b U a) & (!c U (a & b)) & (!d U (a & b & c)) & Fd, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a and only go to b only after a is visited and then go to c only after a and b are both visited and then go to d only after a b and c are all visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit a, b, and c. We visit c but not until we visit a and b. We visit b but not until we visit a. We visit a first". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit a and b" is "(!c U (a & b))". "visit d but not until we visit a, b, and c" is "(!d U (a & b & c))". "eventually visit d" is "Fd". There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U (a & b)) & (!d U (a & b & c)) & Fd".

F(a & F(b & F(c & F(d & Fh))))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this order without skipping any one of them, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "without skipping any one of them" specifies we must visit "a, b, c, d, and h in this order, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then h" is "F(d & Fh)". "eventually, visit c and then d and then h" is "F(c & F(d & Fh))". "eventually, visit b and then c and then d and then h" is "F(b & F(c & F(d & Fh)))". "eventually, visit a and then b and then c and then d and then h" is "F(a & F(b & F(c & F(d & Fh))))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & F(d & Fh)))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fd & Fa & Fb & Fc, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a then b then c finally d you cannot visit b before a you cannot visit c before b you cannot visit d before c you cannot visit h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". "cannot visit before" specifies we only visit one landmark after visiting another. "We visit a and then b and then c and then d. We cannot visit b before a, we cannot visit c before b, we cannot visit d before c, and we cannot visit h before d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". "cannot visit h before d" is "(!h U d)". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fd & Fa & Fb & Fc".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to h but only after visiting a b c d in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

Fa U b & Fb U c & Fc U d & Fh U d, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a before b b before c c before d and h before d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "before" specifies we must visit one landmark before another. "We eventually visit a before b before c before d and h before d". Examining each part, "visit a before b" is "Fa U b". "visit b before c" is "Fb U c". Repeat for the remaining parts. "visit h before d" is "Fh U d". The answer is "Fa U b & Fb U c & Fc U d & Fh U d".

(b & !c & !d & !h) U a & (c & !d & !h) U b & (d & !h) U c & Fd & Fh, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a but not through b c d or h and then go to b but not through c d or h and then go to c but not through d or h and then go to d but not through h and finally go to h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "not through" and "then" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a. We cannot visit b, c, d, or h while traveling to the next landmark". Examining each part, "visit b but not through c, d, or h" is "(b & !c & !d & !h) U a". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(b & !c & !d & !h) U a & (c & !d & !h) U b & (d & !h) U c & Fd & Fh".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a b c d and h in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to h not before going to d do not go to d before going to c do not go to c before going to b and do not go to b before going to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "not before" and "do not go to" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. "visit h but not until visit d" is "(!h U d)". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d)".

(!b U a) & (!c U (a & b)) & (!d U (a & b & c)) & (!h U (a & b & c & d)) & Fh, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a and only go to b only after a is visited and then go to c only after a and b are both visited and then go to d only after a b and c are all visited and then go to h only after a b c and d are all visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit a and b" is "(!c U (a & b))". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U (a & b)) & (!d U (a & b & c)) & (!h U (a & b & c & d)) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a only after a is visited go to b only after b is visited go to c only after c is visited go to d only after d is visited go to h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a and we visit a only once". Examining each part, "visit b but not until visit a" is "(!b U a)". Repeat for the remaining parts. "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b)))".

(a -> b) & (b -> c) & (c -> d) & (d -> Fh), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in this strict order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "visit d and then visit h" is "(d -> Fh)". "visit c and then d" is "(c -> d)". "visit b and then c" is "(b -> c)". "visit a and then b" is "(a -> b)". We reached the first landmark so we are done. The answer is "(a -> b) & (b -> c) & (c -> d) & (d -> Fh)".

(a & (b & (c & (d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in this strict order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "visit d and then visit h" is "(d & Fh)". "visit c and then d and then visit h" is "(c & (d & Fh))". "visit b and then c and then d and then visit h" is "(b & (c & (d & Fh)))". "visit a and then b and then c and then d and then visit h" is "(a & (b & (c & (d & Fh))))". We reached the first landmark so we are done. The answer is "(a & (b & (c & (d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in that specific order ensure to not visit locations out of turn, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

G(a & G(b & Gc)), & G F a & G F b G F c, patrolling, 3, do not stop visiting a b and c, We must keep visiting some landmarks in any order and do so forever. Forever is the "G" LTL operator. "do not stop visiting" specifies we must "keep visiting a, b, and c forever". Examining each part, "keep visiting a forever" is "G(a & G(b & Gc))". There are no other landmarks remaining so we are done. The answer is "G(a & G(b & Gc))".

G(a & G(b & Gc)), & G F a & G F b G F c, patrolling, 3, please keep visiting a b and c without stopping, We must keep visiting some landmarks in any order forever. Forever is the "G" LTL operator. "keep visiting" specifies we must "keep visiting a, b, and c forever". Examining each part, "keep visiting a forever" is "G(a & G(b & Gc))". There are no other landmarks remaining so we are done. The answer is "G(a & G(b & Gc))".

, & G F a & G F b G F c, patrolling, 3, keep visiting a b and c infinitely often, We must eventually visit some landmarks in any order and do so infinitely often. Eventually is the "F" LTL operator. Infinitely often is the "G" LTL operator. "keep visiting" specifies we must "eventually visit a, b, and c infinitely often". Examining each part, "eventually visit a infinitely often" is "G(a & F(a & F(a & ...)))". "eventually visit b infinitely often" is "G(b & F(b & F(b & ...)))". Repeat for the remaining parts. The answer is "G(a & F(a & F(a & ...))) & G(b & F(b & F(b & ...))) & G(c & F(c & F(c & ...)))".

), & G F a & G F b G F c, patrolling, 3, go to a c and b an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "eventually visit a, b, and c forever and visit each of them infinitely many times". Examining each part, "eventually visit a forever and visit it infinitely many times" is "GF(G(a & G(a & G(a & ...))))". "eventually visit b forever and visit it infinitely many times" is "GF(G(b & G(b & G(b & ...))))". Repeat for the remaining parts. The answer is "GF(G(a & G(a & G(a & ...)))) & GF(G(b & G(b & G(b & ...)))) & GF(G(c & G(c & G(c & ...))))".

G(a & Gb & Gc), & G F a & G F b G F c, patrolling, 3, never stop visiting a b and c, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "never stop visiting" specifies we must "always visit a, b, and c forever". Examining each part, "always visit a forever" is "G(a & Gb & Gc)". There are no other landmarks remaining so we are done. The answer is "G(a & Gb & Gc)".

G(a & F(G(a & F(G(a))))) & G(b & F(G(b & F(G(b))))) & G(c & F(G(c & F(G(c))))), & G F a & G F b G F c, patrolling, 3, do not ever stop visiting a b and c, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "do not ever stop" specifies we must "visit a, b, and c forever". Examining each part, "visit a forever" is "G(a & F(G(a & F(G(a))))". "visit b forever" is "G(b & F(G(b & F(G(b))))". Repeat for the remaining parts. The answer is "G(a & F(G(a & F(G(a))))) & G(b & F(G(b & F(G(b))))) & G(c & F(G(c & F(G(c)))))".

F(infinitely often a) & F(infinitely often b) & F(infinitely often c), & G F a & G F b G F c, patrolling, 3, keep visiting a b and c an infinite number of times, We must eventually visit some landmarks in any order and do so infinitely many times. Eventually is the "F" LTL operator. Infinitely many times is the "inf" LTL operator. "keep visiting" specifies we must "eventually visit a, b, and c infinitely many times". Examining each part, "eventually visit a infinitely many times" is "F(infinitely often a)". "eventually visit b infinitely many times" is "F(infinitely often b)". Repeat for the remaining parts. The answer is "F(infinitely often a) & F(infinitely often b) & F(infinitely often c)".

G(c -> G(b -> Ga)), & G F a & G F b G F c, patrolling, 3, continuously move to c b and a, We must continuously move to some landmarks in a certain order. Continuously is the "G" LTL operator. "move to" specifies we must "continuously move to c, then b, then a". Examining each part, "continuously move to a" is "Ga". "continuously move to b" is "Gb". Repeat for the remaining parts. The answer is "G(c -> G(b -> Ga))".

FGa & FGb & FGc, & G F a & G F b G F c, patrolling, 3, repeatedly keep visiting a b and c, We must eventually visit some landmarks in any order and do so repeatedly. Eventually is the "F" LTL operator. Repeatedly is the "G" LTL operator. "keep visiting" specifies we must "eventually visit a, b, and c repeatedly". Examining each part, "eventually visit a repeatedly" is "FGa". "eventually visit b repeatedly" is "FGb". Repeat for the remaining parts. The answer is "FGa & FGb & FGc".

G(a & b & c), & G F a & G F b G F c, patrolling, 3, make sure you are always visiting a b and c, We must always visit some landmarks in any order. Always is the "G" LTL operator. "make sure you are always visiting a, b, and c" specifies we must "always visit a, b, and c". Examining each part, "always visit a" is "G(a)". "always visit b" is "G(b)". Repeat for the remaining parts. The answer is "G(a & b & c)".

Ga & Gb & Gc & Gd, & G F a & G F b & G F c G F d, patrolling, 4, continuously visit a b c and d, We must continuously visit some landmarks in a certain order. Continuously is the "G" LTL operator. "visit" specifies we must "continuously visit a, b, c, and d". Examining each part, "continuously visit a" is "Ga". "continuously visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd".

, & G F a & G F b & G F c G F d, patrolling, 4, keep going to a b c and d an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "eventually visit a, b, c, and d an infinite number of times". Examining each part, "eventually visit a an infinite number of times" is "G(a & G(a & G(a & ...)))". "eventually visit b an infinite number of times" is "G(b & G(b & G(b & ...)))". Repeat for the remaining parts. The answer is "G(a & G(a & G(a & ...))) & G(b & G(b & G(b & ...))) & G(c & G(c & G(c & ...))) & G(d & G(d & G(d & ...)))".

G(a) & G(b) & G(c) & G(d), & G F a & G F b & G F c G F d, patrolling, 4, please keep visiting a b c and d without stopping, We must keep visiting some landmarks in any order forever. Forever is the "G" LTL operator. "keep visiting" specifies we must "visit a, b, c, and d forever". Examining each part, "visit a forever" is "G(a)". "visit b forever" is "G(b)". Repeat for the remaining parts. The answer is "G(a) & G(b) & G(c) & G(d)".

), & G F a & G F b & G F c G F d, patrolling, 4, visit locations a b c and d an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "eventually visit a, b, c, and d forever and visit each of them infinitely many times". Examining each part, "eventually visit a forever and visit it infinitely many times" is "GF(G(a & G(a & G(a & ...))))". Repeat for the remaining parts. The answer is "GF(G(a & G(a & G(a & ...)))) & GF(G(b & G(b & G(b & ...)))) & GF(G(c & G(c & G(c & ...)))) & GF(G(d & G(d & G(d & ...))))".

, & G F a & G F b & G F c G F d, patrolling, 4, keep visiting a b c and d in any order infinitely , We must eventually visit some landmarks in any order and do so infinitely. Eventually is the "F" LTL operator. Infinitely is the "G" LTL operator. "keep visiting" specifies we must "eventually visit a, b, c, and d infinitely". Examining each part, "eventually visit a infinitely" is "G(a & F(a & F(a & ...)))". "eventually visit b infinitely" is "G(b & F(b & F(b & ...)))". Repeat for the remaining parts. The answer is "G(a & F(a & F(a & ...))) & G(b & F(b & F(b & ...))) & G(c & F(c & F(c & ...))) & G(d & F(d & F(d & ...)))".

G(a & F(Ga)) & G(b & F(Gb)) & G(c & F(Gc)) & G(d & F(Gd)), & G F a & G F b & G F c G F d, patrolling, 4, never stop visiting a b c and d, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "never stop visiting" specifies we must "visit a, b, c, and d forever". Examining each part, "visit a forever" is "G(a & F(Ga)))". "visit b forever" is "G(b & F(Gb)))". Repeat for the remaining parts. The answer is "G(a & F(Ga)) & G(b & F(Gb)) & G(c & F(Gc)) & G(d & F(Gd))".

Gb & Gc & Gd & Ga, & G F a & G F b & G F c G F d, patrolling, 4, perpetually travel to b c d and a, We must continually visit some landmarks in a certain order. Continually is the "G" LTL operator. "travel to" specifies we must "continually visit b, c, d, and a". Examining each part, "continually visit a" is "Ga". "continually visit b" is "Gb". Repeat for the remaining parts. The answer is "Gb & Gc & Gd & Ga".

G(a & Gb & Gc & Gd), & G F a & G F b & G F c G F d, patrolling, 4, do not stop visiting a b c and d, We must keep visiting some landmarks in any order and do so forever. Forever is the "G" LTL operator. "do not stop visiting" specifies we must "keep visiting a, b, c, and d forever". Examining each part, "keep visiting a forever" is "G(a & Gb & Gc & Gd)". There are no other landmarks remaining so we are done. The answer is "G(a & Gb & Gc & Gd)".

G (Fa & Ga) & G (Fb & Gb) & G (Fc & Gc) & G (Fd & Gd), & G F a & G F b & G F c G F d, patrolling, 4, you are prohibited from not infinitely going to d c a and b, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "prohibited from not infinitely going" specifies we must "infinitely visit d, c, a, and b". Examining each part, "infinitely visit a" is "G (Fa & Ga)". "infinitely visit b" is "G (Fb & Gb)". Repeat for the remaining parts. The answer is "G (Fa & Ga) & G (Fb & Gb) & G (Fc & Gc) & G (Fd & Gd)".

G(a & G(b & G(c & Gd))), & G F a & G F b & G F c G F d, patrolling, 4, do not stop going to a b c and d in any order, We must keep visiting some landmarks in any order forever. Forever is the "G" LTL operator. "do not stop" specifies we must "keep visiting a, b, c, and d forever". Examining each part, "keep visiting a forever" is "G(a & G(b & G(c & Gd)))". There are no other landmarks remaining so we are done. The answer is "G(a & G(b & G(c & Gd)))".

GF(G(a)) & GF(G(b)) & GF(G(c)) & GF(G(d)) & GF(G(h)), & G F a & G F b & G F c & G F d G F h, patrolling, 5, frequent a b c d and h infinitely in any order, We must eventually visit some landmarks in any order and do so infinitely often. Eventually is the "F" LTL operator. Infinitely often is the "G" LTL operator. "frequent" specifies we must "eventually visit a, b, c, d, and h infinitely often". Examining each part, "eventually visit a infinitely often" is "GF(G(a))". "eventually visit b infinitely often" is "GF(G(b))". Repeat for the remaining parts. The answer is "GF(G(a)) & GF(G(b)) & GF(G(c)) & GF(G(d)) & GF(G(h))".

G(a & Xa) & G(b & Xb) & G(c & Xc) & G(d & Xd) & G(h & Xh), & G F a & G F b & G F c & G F d G F h, patrolling, 5, please keep visiting a b c d and h without stopping, We must visit some landmarks in any order and do so forever without stopping. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "without stopping" specifies we must "visit a, b, c, d, and h forever without stopping". Examining each part, "visit a forever without stopping" is "G(a & Xa)". "visit b forever without stopping" is "G(b & Xb)". Repeat for the remaining parts. The answer is "G(a & Xa) & G(b & Xb) & G(c & Xc) & G(d & Xd) & G(h & Xh)".

G(Fh -> (Fd -> (Fc -> (Fb -> Fa)))), & G F a & G F b & G F c & G F d G F h, patrolling, 5, keep going to h d c b and a, We must eventually visit some landmarks in a certain order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "keep going" specifies we must "eventually visit h, then visit d, then visit c, then visit b, and finally visit a, and repeat this pattern forever". Examining each part, "eventually visit a" is "Fa". "visit b after visiting a" is "Fa -> Fb". Repeat for the remaining parts. The answer is "G(Fh -> (Fd -> (Fc -> (Fb -> Fa))))".

G(a & GFa) & G(b & GFb) & G(c & GFc) & G(d & GFd) & G(h & GFh), & G F a & G F b & G F c & G F d G F h, patrolling, 5, never stop visiting a b c d and h, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "never stop visiting" specifies we must "visit a, b, c, d, and h forever". Examining each part, "visit a forever" is "G(a & GFa)". "visit b forever" is "G(b & GFb)". Repeat for the remaining parts. The answer is "G(a & GFa) & G(b & GFb) & G(c & GFc) & G(d & GFd) & G(h & GFh)".

G(!(!a)) & G(!(!b)) & G(!(!c)) & G(!(!d)) & G(!(!h)), & G F a & G F b & G F c & G F d G F h, patrolling, 5, you are prohibited from not going to d c h b and a forever, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "prohibited from not going to" specifies we must "never not visit d, c, h, b, and a forever". Examining each part, "never not visit d forever" is "G(!(!d))". "never not visit c forever" is "G(!(!c))". Repeat for the remaining parts. The answer is "G(!(!a)) & G(!(!b)) & G(!(!c)) & G(!(!d)) & G(!(!h))".

G(a & Ga) & G(b & Gb) & G(c & Gc) & G(d & Gd) & G(h & Gh), & G F a & G F b & G F c & G F d G F h, patrolling, 5, continue visiting  a b c d and h an infinite number of times, We must visit some landmarks in any order and do so infinitely many times. Infinity is the "G" LTL operator. "continue visiting" specifies we must "visit a, b, c, d, and h infinitely many times". Examining each part, "visit a infinitely many times" is "G(a & Ga)". "visit b infinitely many times" is "G(b & Gb)". Repeat for the remaining parts. The answer is "G(a & Ga) & G(b & Gb) & G(c & Gc) & G(d & Gd) & G(h & Gh)".

, & G F a & G F b & G F c & G F d G F h, patrolling, 5, visit b c a d and h an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "visit b, c, a, d, and h an infinite number of times". Examining each part, "visit b an infinite number of times" is "G(b & G(b & G(b & ...)))". Repeat for the remaining parts. The answer is "G(b & G(b & G(b & ...))) & G(c & G(c & G(c & ...))) & G(a & G(a & G(a & ...))) & G(d & G(d & G(d & ...))) & G(h & G(h & G(h & ...)))".

G(a & Ga) & G(b & Gb), & G F a G F b, patrolling, 2, continue visiting  a and b an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "continue visiting a and b forever". Examining each part, "continue visiting a forever" is "G(a & Ga)". "continue visiting b forever" is "G(b & Gb)". The answer is "G(a & Ga) & G(b & Gb)".

G a & G b, & G F a G F b, patrolling, 2, always keep visiting a and b, We must keep visiting some landmarks in any order forever. Forever is the "G" LTL operator. "always keep visiting a and b" specifies we must "always visit a and b forever". Examining each part, "always visit a" is "G a". "always visit b" is "G b". The answer is "G a & G b".

G(a & Ga) & G(b & Gb), & G F a G F b, patrolling, 2, keep going to a and b an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "keep visiting a and b forever". Examining each part, "keep visiting a forever" is "G(a & Ga)". "keep visiting b forever" is "G(b & Gb)". The answer is "G(a & Ga) & G(b & Gb)".

(G(a -> Fb) & G(b -> Fa)), & G F a G F b, patrolling, 2, keep going between a and b, We must eventually visit some landmarks in a certain order while we keep going back and forth between two landmarks. Eventually is the "F" LTL operator. "keep going between" specifies we must "eventually visit a and then visit b and then visit a and then visit b and so on, forever". Examining each part, "eventually visit a and then visit b and then visit a and then visit b and so on, forever" is "(G(a -> Fb) & G(b -> Fa))". There are only two landmarks so we are done. The answer is "(G(a -> Fb) & G(b -> Fa))".

GF(a & b), & G F a G F b, patrolling, 2, do not stop visiting a and b, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "do not stop visiting a and b" specifies we must "eventually visit a and b forever". Examining each part, "eventually visit a and b forever" is "GF(a & b)". There are 2 landmarks so we are done. The answer is "GF(a & b)".

GF(a & b), & G F a G F b, patrolling, 2, do not stop visiting a and b, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "do not stop visiting a and b" specifies we must "eventually visit a and b forever". Examining each part, "eventually visit a and b forever" is "GF(a & b)". There are 2 landmarks so we are done. The answer is "GF(a & b)".

G(a & Fb), & G F a G F b, patrolling, 2, please keep visiting a and b without stopping, We must keep visiting some landmarks in a certain order forever. Forever is the "G" LTL operator. "without stopping" specifies we must "keep visiting a and b forever". Examining each part, "keep visiting a forever" is "G(a & Fb)". There are only two landmarks so we are done. The answer is "G(a & Fb)".

G(Fa & F(b & G(Fa)))), & G F a G F b, patrolling, 2, keep going back and forth between a and b, We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "back and forth" specifies we must "eventually visit a and then visit b and then visit a and then visit b, and so on, forever". Examining each part, "eventually visit a and then visit b, and so on, forever" is "G(Fa & F(b & G(Fa))))". There are only 2 landmarks so we are done. The answer is "G(Fa & F(b & G(Fa))))".

G(a & Ga) & G(b & Gb), & G F a G F b, patrolling, 2, keep visiting a and b an infinite number of times, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "an infinite number of times" specifies we must "keep visiting a and b forever". Examining each part, "keep visiting a forever" is "G(a & Ga)". "keep visiting b forever" is "G(b & Gb)". The answer is "G(a & Ga) & G(b & Gb)".

Accuracy: 0.5525210084033614