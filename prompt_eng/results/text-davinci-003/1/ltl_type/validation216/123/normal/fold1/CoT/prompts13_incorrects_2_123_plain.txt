Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

F(a & Fb), & F a F b, visit, 2, visit a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "and" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(b & Fa), & F a F b, visit, 2, visit b and a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "and" specifies we must "visit b and then visit a, eventually". Working backwards, "eventually, visit a" is "Fa". "eventually, visit b and then visit a" is "F(b & Fa)". We reached the first landmark so we are done. The answer is "F(b & Fa)".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, go to a b and c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "visit a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(b & F(a & F(c & Fd))), & F a & F b & F c F d, visit, 4, visit b a c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "visit b a c and d" specifies we must visit "b and then visit a and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit a and then c and then visit d" is "F(a & F(c & Fd))". "eventually, visit b and then a and then c and then visit d" is "F(b & F(a & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(b & F(a & F(c & Fd)))".

F(a & F(b & F(d & Fc))), & F a & F b & F c F d, visit, 4, go to four locations a b d and c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to four locations" specifies we must visit "a and then visit b and then visit d and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit d and then visit c" is "F(d & Fc)". "eventually, visit b and then d and then visit c" is "F(b & F(d & Fc))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(d & Fc)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, in no particular order visit a b c and d, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in no particular order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, visit a b c d and h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "visit" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(h & F(d & Fc)))), & F a & F b & F c & F d F h, visit, 5, eventually go visit a b h d and c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "eventually" specifies we must "visit a and then visit b and then visit h and then visit d and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit d and then visit c" is "F(d & Fc)". "eventually, visit h and then d and then visit c" is "F(h & F(d & Fc))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(h & F(d & Fc))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, go to a b c d and h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!c U b) & (!b U a), & U ! b a & U ! c b F c, ordered_visit, 3, do not visit c until visiting b do not visit b until visiting a, We cannot visit some landmarks until we visit others first. Until is the "U" LTL operator. "do not visit c until visiting b" specifies we must "not visit c until we visit b". Examining each part, "not visit c until visit b" is "(!c U b)". "not visit b until visit a" is "(!b U a)". We reached the first landmark so we are done. The answer is "(!c U b) & (!b U a)".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, in strictly this order visit a then eventually visit b and finally eventually c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "strictly this order" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & Fb), & U ! b a F b, ordered_visit, 2, go to b but do not go to b until you go to a first, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but do not go to b until you go to a first" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, find b but not until you find a first, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but not until" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, find a while avoiding b then after finding a go to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, first go to a while avoiding b then move to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, go to a while staying away from b then move to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while staying away from" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, head to a b and c in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, and c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

Fa U (b & c) & Fb U (a & c) & Fc U (a & b), & F a & F b F c, visit, 3, do not stop until a b and c are visited, We must eventually visit some landmarks in any order and do so until we visit all of them. Eventually is the "F" LTL operator. Until is the "U" LTL operator. "do not stop until" specifies we must "eventually visit a, b, and c until we visit all of them". Examining each part, "eventually visit a until we visit all of them" is "Fa U (b & c)". "eventually visit b until we visit all of them" is "Fb U (a & c)". Repeat for the remaining parts. The answer is "Fa U (b & c) & Fb U (a & c) & Fc U (a & b)".

Fa | Fb | F(a & Fb) | F(b & Fa), & F a F b, visit, 2, pick one from a and b go there and then head to the other one, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "pick one from a and b" specifies we must "visit a or visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a or visit b" is "Fa | Fb". "then head to the other one" specifies we must "visit a and then visit b, eventually" or "visit b and then visit a, eventually". Working backwards, "eventually, visit a and then visit b" is "F(a & Fb)". "eventually, visit b and then visit a" is "F(b & Fa)". We reached the first landmark so we are done. The answer is "Fa | Fb | F(a & Fb) | F(b & Fa)".

F(a | b) & (a | b), & F a F b, visit, 2, go to one of a and b and then to the other, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "one of a and b and then visit the other, eventually". Working backwards, "eventually, visit the other" is "F(a | b)". "eventually, visit one of a and b and then visit the other" is "F(a | b) & (a | b)". We reached the first landmark so we are done. The answer is "F(a | b) & (a | b)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, visit a and visit b only if a is visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only if" specifies we must visit "a and then visit b, eventually, but only if a is visited". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, go to a but keep avoiding b and once you have been to a go to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

F(a & Fb), & U ! b a F b, ordered_visit, 2, head to a first and then to b but do not visit b if you have not been to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "first" and "then" specify we must visit "a and then visit b, eventually". "but do not visit b if you have not been to a" specifies we cannot visit b until we visit a. Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, go to a and go to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, visit a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "and" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, reach a reach b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "reach" specifies we must "eventually visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, visit both a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "both" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, find a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "find" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, go to the following locations a b and c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "the following locations" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, visit all three locations a b and c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "all three locations" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, go to a go to b go to c go to d go to h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, visit a b c d h in any order required, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, d, and h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, reach the following five locations a b c d h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "the following five locations" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, find the following a b c d h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "find the following" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, go to a b and c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "visit a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

Gc & Ga & Gb, & F a & F b F c, visit, 3, you must go to c a and b at least once, We must eventually visit some landmarks in any order and do so at least once. Eventually is the "F" LTL operator. At least once is the "G" LTL operator. "at least once" specifies we must "eventually visit c, a, and b at least once". Examining each part, "eventually visit c at least once" is "Gc". "eventually visit a at least once" is "Ga". Repeat for the remaining parts. The answer is "Gc & Ga & Gb".

(!b U a), & U ! b a F b, ordered_visit, 2, visit b only after visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, go to a and only then go to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "only then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!a U b), & U ! b a F b, ordered_visit, 2, ensure that you do not reach b before going to a, We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" specifies we must visit "a and not visit b until we visit a". Examining each part, "visit a but not until visit b" is "(!a U b)". We reached the first landmark so we are done. The answer is "(!a U b)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, visit b but do not visit b before you reach a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but do not visit b before you reach a" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, visit c but only after visiting b and visit b only after visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, go to a only then go to b and only then go to c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "only then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))), & U ! b a & U ! c b F c, ordered_visit, 3, visit a only then should you visit b and only after that should you reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only then" and "only after that" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c and d in that specific order make sure not to visit waypoints out of turn, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a only after that go to b only then go to c and only then go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" and "only then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit d but do not visit d until you have reached c in turn only go to c after you visit b and only go to b after reaching a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" and "after" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, first go directly to a without visiting any other waypoints then go directly to b then directly to c and finally directly to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "directly" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c d in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, visit a b c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "visit" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, do not stop until a b c and d are all visited, We must eventually visit some landmarks in any order and do not stop until all landmarks are visited. Eventually is the "F" LTL operator. "do not stop until" specifies we must "visit a and then visit b and then visit c and then visit d". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, make your way to a b c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "make your way" specifies we must "visit a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, visit a b c d and h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

Fa U (b & c & d & h) & Fb U (c & d & h) & Fc U (d & h) & Fd U h & Fh, & F a & F b & F c & F d F h, visit, 5, do not stop until a b c d and h are all visited, We must eventually visit some landmarks in any order and do so until all landmarks are visited. Eventually is the "F" LTL operator. Until is the "U" LTL operator. "do not stop until" specifies we must "eventually visit a, b, c, d, and h until all landmarks are visited". Examining each part, "eventually visit a until all landmarks are visited" is "Fa U (b & c & d & h)". "eventually visit b until all landmarks are visited" is "Fb U (c & d & h)". Repeat for the remaining parts. The answer is "Fa U (b & c & d & h) & Fb U (c & d & h) & Fc U (d & h) & Fd U h & Fh".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, make your way to a b c d and h, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "make your way" specifies we must "visit a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a but not through b c or d and then go to b but not through c or d and then go to c but not through d and finally go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but not through" specifies we must visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a and only go to b only after a is visited and then go to c only after a and b are both visited and then go to d only after a b and c are all visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, make your way to d only after going to c before that make your way to c only after going to b before that make your way to b only after going to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" and "before that" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c and d in this order without skipping any one of them, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a but not through b c d or h and then go to b but not through c d or h and then go to c but not through d or h and then go to d but not through h and finally go to h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but not through" specifies we must visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a and only go to b only after a is visited and then go to c only after a and b are both visited and then go to d only after a b and c are all visited and then go to h only after a b c and d are all visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, make your way to h only after going to d before that make your way to d only after going to c before that make your way to c only after going to b before that make your way to b only after going to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" and "before that" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this order without skipping any one of them, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, do not go to h until d is visited and do not go to d until c is visited and do not go to c until b is visited and do not go to b until a is visited, We cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We cannot visit h until we visit d and we cannot visit d until we visit c and we cannot visit c until we visit b and we cannot visit b until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d)".

F(a & Fb), & F a F b, visit, 2, move to a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "and" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, go to a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "and" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, stop by a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "stop by" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, move to a b c and d in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, stop by a b c and d in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, visit a b c and d in any order, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, move to a b c and d in any order, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, visit a b c and d in any order, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, stop by a b c and d in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, and d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, move to a b and c in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, and c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, stop by a b and c in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, and c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, visit a b c d and h in any order, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, d, and h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

XFa & XFd & XFc & XFh & XFb, & F a & F b & F c & F d F h, visit, 5, go to a d c h and b at least once, We must eventually visit some landmarks in any order and do so at least once. Eventually is the "F" LTL operator. At least once is the "X" LTL operator. "at least once" specifies we must "eventually visit a, d, c, h, and b at least once". Examining each part, "eventually visit a at least once" is "XFa". "eventually visit d at least once" is "XFd". Repeat for the remaining parts. The answer is "XFa & XFd & XFc & XFh & XFb".

F(b & F(a & F(h & F(c & Fd)))), & F a & F b & F c & F d F h, visit, 5, go to b a h c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "b and then visit a and then visit h and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". Keep doing this until we reach the first landmark. The answer is "F(b & F(a & F(h & F(c & Fd))))".

F(h & F(c & F(b & F(d & Fa)))), & F a & F b & F c & F d F h, visit, 5, go to h c b d and a in any order, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we can visit the landmarks in any order. Working backwards, "eventually, visit a" is "Fa". "eventually, visit d and then visit a" is "F(d & Fa)". "eventually, visit b and then d and then visit a" is "F(b & F(d & Fa))". Keep doing this until we reach the first landmark. The answer is "F(h & F(c & F(b & F(d & Fa))))".

F(a & Ffalse), F a, visit, 1, stop at a, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. "stop" specifies we must "eventually visit a and then stop". Working backwards, "eventually, stop" is "Ffalse". "eventually, visit a and then stop" is "F(a & Ffalse)". We reached the first landmark so we are done. The answer is "F(a & Ffalse)".

F(a & Fb), & F a F b, visit, 2, make sure to go to both a and b, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "make sure to go to both a and b" specifies we must "eventually visit a and then visit b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, visit a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "and" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

Ga & Gb, & F a F b, visit, 2, make sure to go to both a and b at least once, We must eventually visit some landmarks in any order and do so at least once. Eventually is the "F" LTL operator. At least once is the "G" LTL operator. "at least once" specifies we must "eventually visit a and b at least once". Examining each part, "eventually visit a at least once" is "Ga". "eventually visit b at least once" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

F(b & F(d & F(a & Fc))), & F a & F b & F c F d, visit, 4, go to b d a and c in any order, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "b and then d and then a and then c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit a and then visit c" is "F(a & Fc)". "eventually, visit d and then a and then visit c" is "F(d & F(a & Fc))". "eventually, visit b and then d and then a and then visit c" is "F(b & F(d & F(a & Fc)))". We reached the first landmark so we are done. The answer is "F(b & F(d & F(a & Fc)))".

F(a & F(b & F(d & Fc))), & F a & F b & F c F d, visit, 4, make sure to visit a b d and c in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, d, and c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit d and then visit c" is "F(d & Fc)". "eventually, visit b and then d and then visit c" is "F(b & F(d & Fc))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(d & Fc)))".

F(d & F(c & F(b & Fa))), & F a & F b & F c F d, visit, 4, please visit each of d c b and a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "each of" specifies we must visit "d and then visit c and then visit b and then visit a, eventually". Working backwards, "eventually, visit a" is "Fa". "eventually, visit b and then visit a" is "F(b & Fa)". Keep doing this until we reach the first landmark. The answer is "F(d & F(c & F(b & Fa)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, travel to a b c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "travel to" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, reach a b c d and h in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, d, and h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, make sure you go to a b c d h in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in any order" specifies we must visit "a, b, c, d, and h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, you must visit a b c d h but it can be done in any order, We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "any order" specifies we must visit "a, b, c, d, and h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, in no particular order visit a b c d h, We eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "in no particular order" specifies we must visit "a, b, c, d, and h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c)), & U ! b a & U ! c b F c, ordered_visit, 3, go to a at least once while avoiding b and c then go to b at least once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we may visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "at least once" specifies we visit a landmark at least once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark at least once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is (a U (!a U b)). "visit b at least once" is (b U (!b U c)). The answer is "(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c))".

(!b U a) & (!c U b) & Fc & (a & (!a U (a U (!a U b)))) & (b & (!b U (b U (!b U c)))), & U ! b a & U ! c b F c, ordered_visit, 3, visit a at least once do not visit b or c before a then visit b at least once do not visit c before b finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once. "do not visit" specifies we cannot visit a landmark until we visit another landmark first. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark at least once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is "a & (!a U (a U (!a U b)))". "visit b at least once" is "b & (!b U (b U (!b U c)))". The answer is "(!b U a) & (!c U b) & Fc & (a & (!a U (a U (!a U b)))) & (b & (!b U (b U (!b U c))))".

(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c)), & U ! b a & U ! c b F c, ordered_visit, 3, visit a at least once then visit b at least once finally visit c do not visit b or c before a do not visit c before b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once. "then" and "finally" specify we must visit one landmark after visiting another. "do not visit b or c before a" and "do not visit c before b" specify we cannot visit certain landmarks until we visit others first. Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is "a U (!a U b)". "visit b at least once" is "b U (!b U c)". The answer is "(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c))".

(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c)), & U ! b a & U ! c b F c, ordered_visit, 3, move to a at least once do not visit b or c before a then move to b at least once do not visit c before b finally reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once. "do not visit" specifies we cannot visit a landmark until we visit another landmark first. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark at least once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is "a U (!a U b)". "visit b at least once" is "b U (!b U c)". The answer is "(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, move to a while avoiding b and c then move to b while avoiding c finally reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a do not visit b c d or h before visiting a then visit b do not visit c d or h before visiting b then visit c do not visit d or h before visiting c then visit d do not visit h before visiting d finally visit h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "do not visit...before" specifies that we cannot visit a landmark until we visit another first. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a do not visit b c d or h until you visit a then visit b do not visit c d or h until you visit b then visit c do not visit d or h until you visit c then visit d do not visit h until you visit d finally reach h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "do not visit...until" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, go to a but not through b or c and then go to b but not through c and finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but not through" specifies we must visit one landmark before visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, make your way to a but keep avoiding b and c and head to b but keep avoiding c and then visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, direct yourself to a but keep away from b and c then go to b but bypass c and eventually make your way to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but keep away from" and "but bypass" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U a) & F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, visit a b and c in order but keep avoiding latter ones when you are heading to former ones, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in order" specifies we must visit "a and then visit b and then visit c, eventually". "keep avoiding" specifies we must not visit "b and c until we visit a". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". "visit b and c only after visit a" is "(!b U a) & (!c U a)". We reached the first landmark so we are done. The answer is "(!b U a) & (!c U a) & F(a & F(b & Fc))".

Ga, F a, visit, 1, make sure you visit a at least once, We must eventually visit some landmarks in any order and do so at least once. Eventually is the "F" LTL operator. At least once is the "G" LTL operator. "at least once" specifies we must "eventually visit a at least once". Examining each part, "eventually visit a at least once" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

(!b U a), & U ! b a F b, ordered_visit, 2, do not visit b until you go to a, We cannot visit some landmarks until we visit others first. Until is the "U" LTL operator. "do not visit b until you go to a" specifies we must "not visit b until we visit a". Examining each part, "not visit b until visit a" is "(!b U a)". We reached the first landmark so we are done. The answer is "(!b U a)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, you must visit a first before going to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "first" and "before" specify we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b) & (!d U c) & Fd & G(a U (!a U b)) & G(b U (!b U c)) & G(c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a as many times as you want while avoiding b c and d then visit b as many times as you want while avoiding c and d then visit c as many times as you want while avoiding d finally visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "as many times as you want" specifies we can visit a landmark multiple times. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We can visit each landmark multiple times except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a multiple times" is "G(a U (!a U b))". "visit b multiple times" is "G(b U (!b U c))". Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & G(a U (!a U b)) & G(b U (!b U c)) & G(c U (!c U d)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, go to a go to b go to c and go to d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, reach all the following locations a b c and d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "all the following locations" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, visit a go to b reach c reach d, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a b c d and h in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, ensure that you visit h but only after d in turn only visit d after c only visit c after b and only visit b after a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in that specific order ensure to not visit locations out of turn, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to h but only after visiting a b c d in that specific order, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to h not before going to d do not go to d before going to c do not go to c before going to b and do not go to b before going to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "not before" and "do not go" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a before visiting b c and d then visit b before visiting c d and then visit c before visiting d finally reach d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "before" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c and d in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this strict order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, do not visit successor without visiting the predecessor in the following strict order a b c and d, We must eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "strict order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a then b then c then d while ensuring not to visit b before a not to visit c before b not to visit d before c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "while ensuring not to visit" specifies that we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & Fb), & U ! b a F b, ordered_visit, 2, visit b but before visiting b you must visit a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, visit a and b but do not visit b without visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but do not visit b without visiting a" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a before visiting b c d and h then visit b before visiting c d and h then visit c before visiting d and h then visit d before visiting h finally visit h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "before" and "then" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this strict order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "strict order" and "once the predecessor is visited you must visit the successor" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a then b then c then d then h while ensuring not to visit b before a not to visit c before b not to visit d before c not to visit h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "while ensuring not to visit" specifies that we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & Fb), & U ! b a F b, ordered_visit, 2, go from a to b do not go to b before visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "do not go to b before visiting a" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, first go to a then go to b only after a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "only after" specifies that we visit a landmark only after visiting another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))), & U ! b a & U ! c b F c, ordered_visit, 3, visit a first while avoiding b and then move to b while avoiding c then visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, first go to a then go to b only after a finally go to c only after b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, reach a without going to b then go to b without passing c then go to c without passing d finally go to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without going to" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a without visiting b then visit b without visiting c then visit c without visiting d finally visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without visiting" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, first go to a while avoiding b then go to b while staying away from c then go to c while staying away from d then visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a then b then c finally d you cannot visit b before a you cannot visit c before b you cannot visit d before c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "you cannot visit...before" specifies that we cannot visit a landmark until we visit another first. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!d U h) & (!d U c) & (!c U b) & (!b U a), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a before b b before c c before d and h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" specifies we must visit one landmark before another. Working backwards, "visit h before d" is "(!d U h)". "visit c before d" is "(!d U c)". "visit b before c" is "(!c U b)". "visit a before b" is "(!b U a)". We reached the first landmark so we are done. The answer is "(!d U h) & (!d U c) & (!c U b) & (!b U a)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a then b then c finally d you cannot visit b before a you cannot visit c before b you cannot visit d before c you cannot visit h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "before" specifies that we cannot visit a landmark until we visit another first. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a while avoiding b visit b while avoiding c visit c while avoiding d visit d while avoiding h finally reach h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a only after a is visited go to b only after b is visited go to c only after c is visited go to d only after d is visited go to h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

Accuracy: 0.375