Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, do not visit c until visiting b do not visit b until visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, in strictly this order visit a then eventually visit b and finally eventually c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "strictly this order" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once while avoiding b and c then visit b exactly once while avoiding c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies that we visit a landmark only once and "avoiding" specifies that we cannot visit a landmark until we visit another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and we visit b only once and we visit c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & Fc".

(!b U a) & (!c U b) & (!a U (b & c)) & Fc & (!a U (a U (!a U (b & c)))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a but not through b or c and then go to b but not through c and finally go to c no revisiting is allowed, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but not through" and "no revisiting" specify that we visit a landmark only once and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we visit a but not until we visit b and c. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a but not until visit b and c" is "(!a U (b & c))". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U (b & c)))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "(!b U a) & (!c U b) & (!a U (b & c)) & Fc & (!a U (a U (!a U (b & c)))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, do not go to c until b is visited and do not go to b until a is visited along the path never return to previous location you have been to, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another and "never return" specifies that we never go back to previously visited landmarks. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, make your way to c only after going to b before that make your way to b only after going to a do not go back to the previous location you have visited while heading to the next, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" and "before that" specify we only visit one landmark after visiting another and "do not go back" specifies that we never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!a U (b U c)) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a but do not visit b or c and then go to b but do not visit c or revisit a and then go to c but do not revisit a or b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but do not visit" and "but do not revisit" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we visit a but not until we visit b or c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a but not until visit b or c" is "(!a U (b U c))". The answer is "(!b U a) & (!c U b) & (!a U (b U c)) & Fc".

F(a & F(b & Fc)) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a b and c in this order without skipping any one of them do not revisit any one of them once after you have been there, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. "do not revisit any one of them once after you have been there" specifies that we visit a landmark only once. Combining this logic, "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "F(a & F(b & Fc)) & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a but not through b c d or h and then go to b but not through c d or h and then go to c but not through d or h and then go to d but not through h and finally go to h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but not through" specifies we cannot visit a landmark until we visit another and "then" specifies we visit landmarks in a specific order. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this order without skipping any one of them, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, do not go to h until d is visited and do not go to d until c is visited and do not go to c until b is visited and do not go to b until a is visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d)".

F(a & F(a & Fb)) & (!a U (a U (!a U b))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, reach a and then b in that exact order without repetitions, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & F(a & Fb)) & (!a U (a U (!a U b)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a b and c once do not visit b without visiting a and do not visit c without visiting b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once" specifies that we visit a landmark only once. "do not visit b without visiting a" and "do not visit c without visiting b" specify that we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, only visit a once followed by visiting b then visiting c once, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and visit c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit c only once" is (!c U (c U (!c U d))). The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once do not visit b or c before a then visit b exactly once  do not visit c before b finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies that we visit a landmark only once and "do not visit...before" specifies that we visit a landmark only after visiting another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and b only once and c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once while avoiding b and c then visit b exactly once while avoiding c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies that we visit a landmark only once and "avoiding" specifies that we cannot visit a landmark until we visit another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and we visit b only once and we visit c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & Fc".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, go to a exactly once while avoiding b and c then go to b exactly once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies that we visit a landmark only once and "while avoiding" specifies that we cannot visit some landmarks until we visit others first. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and avoid b and c while visiting a. We visit b only once and avoid c while visiting b. We visit c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a exactly once avoid b or c before a then reach b exactly once  avoid c before b finally move to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies we visit a landmark only once and "avoid" specifies we cannot visit a landmark until we visit another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and avoid b and c before a. We visit b only once and avoid c before b. We visit c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "avoid b before a" is "(!b U (a U (!a U b)))". "visit b only once" is (!b U (b U (!b U c))). "avoid c before b" is "(!c U (b U (!b U c)))". "visit c only once" is (!c U (c U (!c U d))). The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!a U !b) & (!b U a) & (!a U (a U (!a U b))) & (!b U (b U (!b U a))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, go to a only once but keep away from b and then visit b but keep away from a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only once" and "keep away from" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a and we visit a but not until we keep away from b". Examining each part, "visit a but not until keep away from b" is "(!a U !b)". "visit b but not until visit a" is "(!b U a)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U a))). The answer is "(!a U !b) & (!b U a) & (!a U (a U (!a U b))) & (!b U (b U (!b U a)))".

(!b U a) & (!a U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U a))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, visit a one time but not through b and head to b after a is visited but not through a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but not through" specifies we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a and we visit a but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a but not until visit b" is "(!a U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U a))). The answer is "(!b U a) & (!a U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U a)))".

(!b U a) & (!b U !a) & (a U (!a U b)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, stay away from b until you visit a exactly once and then go to b while staying away from a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" and "while" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a exactly once and then we visit b but not until we stay away from a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit b but not until stay away from a" is "(!b U !a)". "visit a exactly once" is "(a U (!a U b))". The answer is "(!b U a) & (!b U !a) & (a U (!a U b))".

(!b U true) & (!a U !b) & (!b U a) & (!a U (a U (!a U b))) & (!a U (b U (!a U true))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, avoid b initially when a is not visited and then just visit a once and then visit b while avoiding a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "initially" and "just" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a and we visit a but not until we avoid b and we avoid b initially and we visit a only once and we avoid a after visiting b". Examining each part, "avoid b initially" is "(!b U true)". "visit a but not until we avoid b" is "(!a U !b)". "visit b but not until we visit a" is "(!b U a)". "visit a only once" is (!a U (a U (!a U b))). "avoid a after visiting b" is (!a U (b U (!a U true))). The answer is "(!b U true) & (!a U !b) & (!b U a) & (!a U (a U (!a U b))) & (!a U (b U (!a U true)))".

(!b U a) & (!a U b) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, do not visit b before you visit a and then go to b without revisiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "before" and "without" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a and we visit b without revisiting a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit b without revisiting a" is "(!a U b)". "eventually visit b" is "Fb". The answer is "(!b U a) & (!a U b) & Fb".

(!b U a) & (!c U b) & (a U (!a U b)) & (b U (!b U c)) & (c U (!c U d)), & U ! b a & U ! c b F c, ordered_visit, 3, go to a at least once while avoiding b and c then go to b at least once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once and "avoiding" specifies we cannot visit a landmark until we visit another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a at least once and b at least once and c at least once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a at least once" is "a U (!a U b)". "visit b at least once" is "b U (!b U c)". "visit c at least once" is "c U (!c U d)". The answer is "(!b U a) & (!c U b) & (a U (!a U b)) & (b U (!b U c)) & (c U (!c U d))".

(!b U a) & (!c U b) & F(a & (!a U b)) & F(b & (!b U c)) & F(c & (!c U d)), & U ! b a & U ! c b F c, ordered_visit, 3, visit a at least once then visit b at least once finally visit c do not visit b or c before a do not visit c before b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once and "do not visit" specifies we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a at least once and b at least once and c at least once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a at least once" is "F(a & (!a U b))". "visit b at least once" is "F(b & (!b U c))". "visit c at least once" is "F(c & (!c U d))". The answer is "(!b U a) & (!c U b) & F(a & (!a U b)) & F(b & (!b U c)) & F(c & (!c U d))".

(!b U a) & (!c U b) & F(a & (!a U b)) & F(b & (!b U c)) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, move to a at least once do not visit b or c before a then move to b at least once do not visit c before b finally reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once. "do not visit" specifies we must not visit a landmark until we visit another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a at least once and b at least once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a at least once" is "F(a & (!a U b))". "visit b at least once" is "F(b & (!b U c))". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & F(a & (!a U b)) & F(b & (!b U c)) & Fc".

(!b U a) & (!c U b) & (!a U (!b & !c)) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b F c, ordered_visit, 3, move to a while avoiding b and c then move to b while avoiding c finally reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" specifies we must visit one landmark before visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we visit a but not until we avoid b and c. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a but not until avoid b and c" is "(!a U (!b & !c))". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "(!b U a) & (!c U b) & (!a U (!b & !c)) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a do not visit b c d or h before visiting a then visit b do not visit c d or h before visiting b then visit c do not visit d or h before visiting c then visit d do not visit h before visiting d finally visit h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "do not visit" and "before" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a do not visit b c d or h until you visit a then visit b do not visit c d or h until you visit b then visit c do not visit d or h until you visit c then visit d do not visit h until you visit d finally reach h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!a & !b & !c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, go to a but not through b or c and then go to b but not through c and finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but not through" specifies we cannot visit one landmark until we visit another. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we cannot visit a through b or c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "cannot visit a through b or c" is "(!a & !b & !c)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & (!a & !b & !c) & Fc".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, make your way to a but keep avoiding b and c and head to b but keep avoiding c and then visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "but keep avoiding" specifies we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & (!b & !c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, direct yourself to a but keep away from b and c then go to b but bypass c and eventually make your way to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but keep away from" and "but bypass" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we visit a but not until we avoid b and c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "avoid b and c" is "(!b & !c)". The answer is "(!b U a) & (!c U b) & (!b & !c) & Fc".

(!b U a) & (!c U b) & Fc & (!b & !c U (a & b)), & U ! b a & U ! c b F c, ordered_visit, 3, keep away from b and c while heading to a and then keep away from c while heading to b and eventually go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while heading" and "keep away from" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We never visit b or c until we visit a and b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "never visit b or c until we visit a and b" is "(!b & !c U (a & b))". The answer is "(!b U a) & (!c U b) & Fc & (!b & !c U (a & b))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, visit a b and c in order but keep avoiding latter ones when you are heading to former ones, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in order" specifies we visit landmarks in a specific order and "keep avoiding" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a b c d and h in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in that specific order ensure to not visit locations out of turn, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit landmarks in a specific order and "not visit locations out of turn" specifies that we cannot visit a landmark until we visit the previous landmark. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "strict order" and "once the predecessor is visited you must visit the successor" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "strict order" and "once the predecessor is visited you must visit the successor" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a then b then c then d then h while ensuring not to visit b before a not to visit c before b not to visit d before c not to visit h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "not to visit" specifies that we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & !c)), & U ! b a & U ! c b F c, ordered_visit, 3, visit a b and c where b does not proceed a and c does not proceed b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "where" specifies we must visit "a and then visit b and then visit c, eventually, but b does not proceed a and c does not proceed b". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c, but c does not proceed b" is "F(b & !c)". "eventually, visit a and then b and then visit c, but b does not proceed a" is "F(a & F(b & !c))". We reached the first landmark so we are done. The answer is "F(a & F(b & !c))".

(!b U !a) & (!c U b) & Fc & (!a U !b), & U ! b a & U ! c b F c, ordered_visit, 3, visit a first while avoiding b and then move to b while avoiding c then visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "first" and "then" specify we visit landmarks in a specific order and "avoiding" specifies that we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we avoid a and we visit a but not until we avoid b". Examining each part, "visit b but not until avoid a" is "(!b U !a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a but not until avoid b" is "(!a U !b)". The answer is "(!b U !a) & (!c U b) & Fc & (!a U !b)".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, first go to a while staying away from b then go to b while staying away from c finally visit c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while staying away from" specifies we must visit one landmark before visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!a U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U a))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, go to a without visiting b then go to b without going to a again, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without" specifies we cannot visit one landmark until we visit another. "We eventually visit b but not until we visit a and we visit a but not until we visit b and we visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a but not until visit b" is "(!a U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U a))). The answer is "(!b U a) & (!a U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U a)))".

(!b U a) & (!c U b) & (!d U c) & (!d U h), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a before b b before c c before d and h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit h and we visit h but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. The answer is "(!b U a) & (!c U b) & (!d U c) & (!d U h)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a then b then c finally d you cannot visit b before a you cannot visit c before b you cannot visit d before c you cannot visit h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "before" specifies that we visit a landmark only after visiting another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a while avoiding b visit b while avoiding c visit c while avoiding d visit d while avoiding h finally reach h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" specifies we must visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

Accuracy: 0.48314606741573035