Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, Do not visit c until you have visited b. Do not visit b until you have visited a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark A only once. Then, visit landmark B only once. After visiting B, you may eventually visit C, but not until after you have visited B., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "First" and "Then" specify we visit landmarks in a specific order and "only once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit C but not until we visit B and we visit B but not until we visit A. We visit each landmark only once except for the last landmark, C". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "eventually visit C" is "FC". "visit A only once" is (!A U (A U (!A U B))). "visit B only once" is (!B U (B U (!B U C))). The answer is "(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C)))".

(!b U a) & G(!b) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Eventually reach a while always staying away from b, then eventually move to b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we always stay away from b". Examining each part, "visit b but not until visit a" is "(!b U a)". "always stay away from b" is "G(!b)". "eventually visit b" is "Fb". The answer is "(!b U a) & G(!b) & Fb".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!b & !c U a) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once, then visit landmark b exactly once, and finally visit landmark c. Avoid landmarks b and c while visiting landmark a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "exactly once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c. We avoid b and c while visiting a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "avoid b and c while visiting a" is "(!b & !c U a)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!b & !c U a) & Fc".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit a. Then, visit b. Finally, visit c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmarks a, b, and c in that order without skipping any of them. Do not revisit any of them once you have been there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. "Do not revisit any of them once you have been there" specifies that we visit a landmark only once. "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "F(a & F(b & Fc)) & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmark a, then visit landmark b without passing through landmarks c, d, or h. Next, visit landmark c without passing through landmarks d or h. Then, visit landmark d without passing through landmark h. Finally, visit landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "without passing through" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). "visit d only once" is (!d U (d U (!d U h))). The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks a, b, c, d, and h in that order without skipping any of them., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!A U Tasks) & (!B U A) & FB, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, complete all remaining tasks. Then, visit landmark A. After visiting landmark A, you may visit landmark B. You may not revisit landmark A until all tasks are completed., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "First" and "Then" specify we visit landmarks in a specific order and "not revisit" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit B but not until we visit A and we visit A but not until all tasks are completed". Examining each part, "visit A but not until all tasks are completed" is "(!A U Tasks)". "visit B but not until we visit A" is "(!B U A)". "eventually visit B" is "FB". The answer is "(!A U Tasks) & (!B U A) & FB".

(!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, reach landmark "a". Then, once you have reached "a", proceed to landmark "b". Do not visit any other landmarks in between "a" and "b"., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we visit landmarks in a specific order and "Do not visit any other landmarks in between" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit landmark A. Then, visit landmark B. After visiting B, visit landmark C. Make sure to visit each location only once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "First" and "Then" specify we visit landmarks in a specific order and "only once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit C but not until we visit B and we visit B but not until we visit A. We visit each landmark only once except for the last landmark, C". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "eventually visit C" is "FC". "visit A only once" is (!A U (A U (!A U B))). "visit B only once" is (!B U (B U (!B U C))). The answer is "(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C)))".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a, b, and c once. Do not visit b without first visiting a, and do not visit c without first visiting b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without first" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark c. The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a once, then visit b, and finally visit c once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a and c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until we visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit c only once" is (!c U (c U (!c U d))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!b & !c U a) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark a exactly once, then visit landmark b exactly once, and finally visit landmark c. Avoid landmarks b and c while visiting landmark a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "exactly once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c. We avoid b and c while visiting a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "avoid b and c while visiting a" is "(!b & !c U a)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!b & !c U a) & Fc".

(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a exactly once while never visiting b or c, then visit b exactly once while never visiting c, and finally visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a only once and never visit b or c. We visit b only once and never visit c. We visit c only once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & Fc".

(!B U A) & (!A U (A U (!A U B))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark A once and then visit landmark B while avoiding landmark A., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once" specifies we visit a landmark only once and "avoiding" specifies we never visit a landmark again. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit B but not until we visit A and we visit A only once". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit A only once" is (!A U (A U (!A U B))). We reached the first landmark so we are done. The answer is "(!B U A) & (!A U (A U (!A U B)))".

(!B U A) & (!A U (A U (!A U B))) & FB, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark A once and then go to landmark B without passing through A again., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "without passing through A again" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit B but not until we visit A and we visit A only once". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit A only once" is (!A U (A U (!A U B))). "eventually visit B" is "FB". The answer is "(!B U A) & (!A U (A U (!A U B))) & FB".

(!b U a) & (!a U (a U (!a U b))) & (!a U b), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Do not approach b until you have visited a exactly once. After visiting a, go to b while avoiding a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "until" and "after" specify we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit b but not until we visit a exactly once and after visiting a, we visit b while avoiding a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit a exactly once" is (!a U (a U (!a U b))). "visit b while avoiding a" is "(!a U b)". The answer is "(!b U a) & (!a U (a U (!a U b))) & (!a U b)".

X(!b U !a) & (!a U (a U (!a U b))) & (!b U (b U (!b U !a))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Initially, do not visit b if a has not been visited yet. Then, visit a once and after that, visit b while avoiding a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Initially is the "X" LTL operator. Eventually is the "F" LTL operator. "if" specifies we only visit one landmark after visiting another. "We initially do not visit b if a has not been visited yet. Then, visit a once and after that, visit b while avoiding a". Examining each part, "initially do not visit b if a has not been visited yet" is "X(!b U !a)". "visit a once" is "(!a U (a U (!a U b)))". "visit b while avoiding a" is "(!b U (b U (!b U !a)))". The answer is "X(!b U !a) & (!a U (a U (!a U b))) & (!b U (b U (!b U !a)))".

a & (!a U b) & (!b U a) & b & (!b U c) & (!c U b) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, Visit a at least once, ensuring that you do not visit b or c during this time. Then, visit b at least once, ensuring that you do not visit c during this time. Finally, visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once and "ensuring" specifies we cannot visit some landmarks until we visit others first. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit a at least once and we visit b at least once". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is "a & (!a U b)". "visit b at least once" is "b & (!b U c)". The answer is "a & (!a U b) & (!b U a) & b & (!b U c) & (!c U b) & Fc".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, Move to landmark a. Eventually, visit a. Until you visit a, do not visit landmarks b or c. Then, move to landmark b. Eventually, visit b. Until you visit b, do not visit landmark c. Finally, reach landmark c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b & !c) U a & F(!c U b) & Gc, & U ! b a & U ! c b F c, ordered_visit, 3, Move to a while avoiding b and c. Then, eventually move to b while avoiding c. Finally, always be at c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never leave it. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "avoiding" specifies we must never visit a landmark. "Move to a while avoiding b and c" is "(!b & !c) U a". "Then, eventually move to b while avoiding c" is "F(!c U b)". "Finally, always be at c" is "Gc". The answer is "(!b & !c) U a & F(!c U b) & Gc".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h. Do not visit any other landmarks before visiting the next one in the sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "Do not visit any other landmarks before visiting the next one in the sequence." specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b & !c U a) & (!b U a) & (!c U b) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, First, visit a without passing through b or c. Then, visit b without passing through c. Finally, visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without passing through" specifies we must visit one landmark before visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a and we visit a without passing through b or c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit a without passing through b or c" is "(!b & !c U a)". "eventually visit c" is "Fc". The answer is "(!b & !c U a) & (!b U a) & (!c U b) & Fc".

(!b U (a & !b & !c)) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, Reach a while avoiding b and c, then reach b while avoiding c, and finally visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while avoiding" specifies we must visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a while avoiding b and c. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a while avoiding b and c" is "(!b U (a & !b & !c))". "visit c but not until we visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U (a & !b & !c)) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C))), & U ! b a & U ! c b F c, ordered_visit, 3, First, go to landmark A. Then, travel to landmark B while avoiding landmark C. Finally, make your way to landmark C., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "First" and "Then" specify we visit landmarks in a specific order and "avoid" specifies that we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit C but not until we visit B and we visit B but not until we visit A. We visit each landmark only once except for the last landmark, C". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "eventually visit C" is "FC". "visit A only once" is (!A U (A U (!A U B))). "visit B only once" is (!B U (B U (!B U C))). The answer is "(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C)))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, Visit landmark a, then landmark b, and finally landmark c in that order. Do not visit any landmarks that come after the one you are currently heading towards., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "Do not visit any landmarks that come after the one you are currently heading towards." specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h in that specific order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks a, b, c, d, and h in sequential order without skipping any., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "sequential order" specifies we visit landmarks in a specific order and "without skipping any" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, First, go to landmark A. Then, go to landmark B only after you have visited A. Next, visit landmark C only after you have visited B. Then, visit landmark D only after you have visited C. Finally, visit landmark H only after you have visited D., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" and "only after" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks a, b, c, d, and h in strict order. Once you visit a landmark, you must visit the next one in the sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "strict order" specifies we visit landmarks in a specific order and "once you visit" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks a, b, c, d, and h in strict order. Once you visit a landmark, you must visit the next one in the sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "strict order" specifies we visit landmarks in a specific order and "once you visit" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmark A, then visit landmark B, and finally visit landmark C. While visiting landmark A, stay away from landmark B. While visiting landmark B, stay away from landmark C., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "stay away from" specifies that we cannot visit a landmark until we visit another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit C but not until we visit B and we visit B but not until we visit A. We visit each landmark only once except for the last landmark, C". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "eventually visit C" is "FC". "visit A only once" is (!A U (A U (!A U B))). "visit B only once" is (!B U (B U (!B U C))). The answer is "(!B U A) & (!C U B) & FC & (!A U (A U (!A U B))) & (!B U (B U (!B U C)))".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit landmark a. Then, go to landmark b. After that, visit landmark c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!B U A) & (!A U (A U (!A U B))) & FB, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, visit A without stopping at B. Then, visit B., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "First" and "Then" specify we visit landmarks in a specific order and "without stopping" specifies that we visit a landmark only once. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit B but not until we visit A and we visit A only once". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit A only once" is (!A U (A U (!A U B))). "eventually visit B" is "FB". The answer is "(!B U A) & (!A U (A U (!A U B))) & FB".

F(a & Fb) & (!a U (a U (!a U b))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a once and then reach landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". "visit a only once" is (!a U (a U (!a U b))). We reached the first landmark so we are done. The answer is "F(a & Fb) & (!a U (a U (!a U b)))".

(!b U a) & (!c U b) & (!h U c) & (!d U h) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!h U (h U (!h U d))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks in the following order: a, then b, then c, then d. H must be visited before d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "before" specifies that we visit one landmark before visiting another. "We eventually visit d but not until we visit h and we visit h but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit h but not until we visit c" is "(!h U c)". "visit d but not until we visit h" is "(!d U h)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for landmark d. The answer is "(!b U a) & (!c U b) & (!h U c) & (!d U h) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!h U (h U (!h U d)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fd, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit a, then b, then c, and finally d. You cannot visit b before a, c before b, d before c, or h before d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order and "before" specifies that we visit a landmark only after visiting another. Combining this logic, we only visit one landmark after visiting another and never go back to previously visited landmarks. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We cannot visit h before d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fd".

(!b U true) & (!c U true) & (!d U true) & Fh, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Eventually reach h while avoiding b, c, and d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "avoiding" specifies we must "eventually visit h but not until we avoid b, c, and d". Examining each part, "avoid b" is "(!b U true)". "avoid c" is "(!c U true)". "avoid d" is "(!d U true)". "eventually visit h" is "Fh". The answer is "(!b U true) & (!c U true) & (!d U true) & Fh".

Accuracy: 0.5393258426966292