Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

F(a & Fb), & U ! b a F b, ordered_visit, 2, First, find landmark a. Then, find landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

!b U F(a & Fb), & U ! b a F b, ordered_visit, 2, Avoid landmark b and then visit landmark a. Then, visit landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "!b U F(a & Fb)".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Fa, G F a, patrolling, 1, Keep moving towards landmark "a"., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "Keep moving towards" specifies we must "eventually visit a". Examining each part, "eventually visit a" is "Fa". There is 1 landmark so we are done. The answer is "Fa".

Ga, G F a, patrolling, 1, Always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always continue going to a., We must always visit some landmarks in any order. Always is the "G" LTL operator. "continue going" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, You must always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always go to a., We must always visit some landmarks. Always is the "G" LTL operator. "go to" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

GA, G F a, patrolling, 1, Always visit landmark A., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit A". Examining each part, "always visit A" is "GA". We reached the first landmark so we are done. The answer is "GA".

Ga, G F a, patrolling, 1, Always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

GF, G F a, patrolling, 1, Visit the landmark infinitely many times., We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "infinitely" specifies we must "eventually visit the landmark forever". Examining each part, "eventually visit the landmark forever" is "GF". We reached the first landmark so we are done. The answer is "GF".

F(a & Fb), & U ! b a F b, ordered_visit, 2, Visit a first, then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmarks a, b, c, d, and h in sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in sequence" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U (a & b)) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit b, then visit c after visiting both a and b, then visit d after visiting a, b, and c, and finally visit h after visiting a, b, c, and d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit both a and b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit both a and b" is "(!c U (a & b))". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U (a & b)) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, proceed to landmark b. After that, make your way to landmark c. Once you have reached landmark c, continue on to landmark d. Finally, make your way to landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" and "after that" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a), & U ! b a F b, ordered_visit, 2, Visit b after visiting a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, First, visit landmark a. Then, visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a), & U ! b a F b, ordered_visit, 2, Visit b after reaching a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". The answer is "(!b U a)".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d in that specific order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "eventually, visit a and then b and then c and then visit d" is "F(a & F(b & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then b, then c, then d, and finally h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then visit landmark b after visiting a. After visiting b, visit landmark c. After visiting c, visit landmark d. Finally, visit landmark h after visiting d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" and "after" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h. Other locations may be visited in between., We eventually visit some landmarks in a certain order while we can visit other landmarks in between. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Walk to a. Then, walk to b. Then, walk to c. Then, walk to d. Finally, walk to h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmark A, then visit landmark B, then visit landmark C, and finally visit landmark D., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit a in the future., We must always visit some landmarks in the future. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit landmarks a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b repeatedly., We must visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "Always" specifies we must "visit a and b forever". Examining each part, "visit a forever" is "Ga". "visit b forever" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

F(a U F(a & Fb)) & F(b U F(a & Fb)), & G F a G F b, patrolling, 2, After a certain point in time, you must eventually visit landmarks A and B at least once., We must eventually visit some landmarks in any order after a certain point in time. Eventually is the "F" LTL operator. "at least once" specifies we must "eventually visit a and b at least once". Examining each part, "eventually visit a at least once" is "F(a U F(a & Fb))". "eventually visit b at least once" is "F(b U F(a & Fb))". There are 2 landmarks so we are done. The answer is "F(a U F(a & Fb)) & F(b U F(a & Fb))".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always go to a., We must always visit some landmarks. Always is the "G" LTL operator. "go to" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always stop at landmark a., We must always visit some landmarks in any order. Always is the "G" LTL operator. "stop" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit landmark a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always patrol landmark a., We must always visit some landmarks in any order. Always is the "G" LTL operator. "patrol" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit b and a., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit landmarks a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga, G F a, patrolling, 1, Always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga, G F a, patrolling, 1, Always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

G, G F a, patrolling, 1, Always visit., We must visit some landmarks forever. Forever is the "G" LTL operator. "Always visit" specifies we must "visit forever". Examining each part, "visit forever" is "G". We are done. The answer is "G".

Ga, G F a, patrolling, 1, Always visit a., We must always visit some landmarks. Always is the "G" LTL operator. "visit" specifies we must "always visit a". Examining each part, "always visit a" is "Ga". There is 1 landmark so we are done. The answer is "Ga".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit landmarks a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Move to a, then move to b, then move to c, then move to d, and finally move to h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, move to landmark b. After that, visit landmark c. Next, visit landmark d. Finally, reach landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" and "after that" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

F(a & Fb), & U ! b a F b, ordered_visit, 2, First visit a, then you can visit b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!B U A) & (!C U B) & (!D U C) & FD, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmark A multiple times while avoiding landmarks B, C, and D. Then, visit landmark B multiple times while avoiding landmarks C and D. Next, visit landmark C multiple times while avoiding landmark D. Finally, visit landmark D., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we can visit it again. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "multiple times" specifies we can visit a landmark multiple times. "We eventually visit D but not until we visit C and we visit C but not until we visit B and we visit B but not until we visit A. We can visit each landmark multiple times". Examining each part, "visit B but not until visit A" is "(!B U A)". "visit C but not until visit B" is "(!C U B)". "visit D but not until we visit C" is "(!D U C)". "eventually visit D" is "FD". The answer is "(!B U A) & (!C U B) & (!D U C) & FD".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit landmarks a and b repeatedly., We must visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "Always" specifies we must "visit a and b forever". Examining each part, "visit a forever" is "Ga". "visit b forever" is "Gb". We reached the first landmark so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b repeatedly., We must visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "Always" specifies we must "visit a and b forever". Examining each part, "visit a forever" is "Ga". "visit b forever" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

Ga & Gb, & G F a G F b, patrolling, 2, Always visit a and b., We must always visit some landmarks in any order. Always is the "G" LTL operator. "visit" specifies we must "always visit a and b". Examining each part, "always visit a" is "Ga". "always visit b" is "Gb". There are 2 landmarks so we are done. The answer is "Ga & Gb".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (h U Fh), F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then visit landmark b. After visiting landmark b, visit landmark c. Once you have visited landmark c, proceed to landmark d. After visiting landmark d, make your way to landmark h and remain there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" and "after" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We remain at h after visiting it". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "remain at h after visiting it" is "(h U Fh)". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (h U Fh)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, First, visit a. Then, visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

Ga & G(!b U a), & U ! b a F b, ordered_visit, 2, Always visit a before visiting b., We must always visit some landmarks in a certain order. Always is the "G" LTL operator. "before" specifies we must "always visit a before visiting b". Examining each part, "always visit a" is "Ga". "always visit a before visiting b" is "Ga & G(!b U a)". We reached the first landmark so we are done. The answer is "Ga & G(!b U a)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, Go to a first, then go to b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b after visiting a. After visiting b, visit c. After visiting c, visit d. Finally, visit h after visiting d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we visit landmarks in a specific order. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

Accuracy: 0.3790322580645161