Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

GFa, F a, visit, 1, make sure you visit a at least once, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "at least once" specifies we must "eventually visit a forever". Examining each part, "eventually visit a forever" is "GFa". There is 1 landmark so we are done. The answer is "GFa".

GFa & GFb, & F a F b, visit, 2, make sure to go to both a and b at least once, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "at least once" specifies we must "eventually visit a and b forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". The answer is "GFa & GFb".

F((a & F(!a & !b)) | (b & F(!a & !b))), & F a F b, visit, 2, pick one from a and b go there and then head to the other one, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "one from a and b and then visit the other one, eventually". Working backwards, "eventually, visit the other one" is "F(!a & !b)". "eventually, visit one from a and b and then visit the other one" is "F((a & F(!a & !b)) | (b & F(!a & !b)))". We reached the first landmark so we are done. The answer is "F((a & F(!a & !b)) | (b & F(!a & !b)))".

F(a & F(a | b)), & F a F b, visit, 2, go to one of a and b and then to the other, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "one of a and b and then visit the other, eventually". Working backwards, "eventually, visit the other" is "F(a | b)". "eventually, visit one of a and b and then visit the other" is "F(a & F(a | b))". We reached the first landmark so we are done. The answer is "F(a & F(a | b))".

F(a & Fb), & F a F b, visit, 2, go to a and go to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "eventually visit a and then visit b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, go to a and b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "go to" specifies we must "eventually visit a and then visit b". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b) & Fc, & F a & F b F c, visit, 3, do not stop until a b and c are visited, We eventually visit some landmarks in a certain order while we cannot stop until we visit all of them. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

GFa & GFb & GFc, & F a & F b F c, visit, 3, go to all of a b and c , We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "go to all" specifies we must "eventually visit a, b, and c forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc".

GFa & GFb & GFc & GFd, & F a & F b & F c F d, visit, 4, do not stop until a b c and d are all visited, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "do not stop" specifies we must "eventually visit a, b, c, and d forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, go to a d c h and b at least once, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "at least once" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, visit a b c d h in any order required, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "required" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, do not stop until a b c d and h are all visited, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "do not stop" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, visit all locations a b c d h, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "all locations" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, after you have been to a make your way to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, go to a and move on to b once you have been to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "once you have been to" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

(!b U a) & (!c U b) & Fb & Fc, F & a F & b F c, sequenced_visit, 3, visit b at least once after going to a and visit c at least once after going to b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" and "after" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit b" is "Fb". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fb & Fc".

(!b U a) & (!c U b) & (!d U c) & Fd & (a U (!a U b)) & (b U (!b U c)) & (c U (!c U d)), F & a F & b F & c F d, sequenced_visit, 4, visit b at least once after visiting a visit c at least once after visiting a and b visit d at least once after visiting a b and c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once after" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a at least once" is "(a U (!a U b))". "visit b at least once" is "(b U (!b U c))". "visit c at least once" is "(c U (!c U d))". There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (a U (!a U b)) & (b U (!b U c)) & (c U (!c U d))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, visit b at least once after visiting a visit c at least once after visiting both a and b visit d at least once after visiting a b and c and visit h at least once after visiting a b c and d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, visit b after you visit a visit c after you visit b visit d after you visit c visit h after you visit d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, go to a only then go to b and only then go to c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "only then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, move to a at least once do not visit b or c before a then move to b at least once do not visit c before b finally reach c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "at least once" and "then" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is (!a U (a U (!a U b))). "visit b at least once" is (!b U (b U (!b U c))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!c U (a & b)) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, reach c but not until you visit a and b and that specific order, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "but not until" and "that specific order" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit a and b". Examining each part, "visit c but not until visit a and b" is "(!c U (a & b))". "eventually visit c" is "Fc". The answer is "(!c U (a & b)) & Fc".

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, do not visit c until visiting b do not visit b until visiting a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a and we eventually visit c but not until we visit b". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c)), & U ! b a & U ! c b F c, ordered_visit, 3, go to a at least once while avoiding b and c then go to b at least once while avoiding c finally go to c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "at least once" specifies we must visit a landmark at least once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark at least once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a at least once" is "(a U (!a U b))". "visit b at least once" is "(b U (!b U c))". There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (a U (!a U b)) & (b U (!b U c))".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, in strictly this order visit a then eventually visit b and finally eventually c, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" and "finally" specify we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(a & Fb)), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, reach a and then b in that exact order without repetitions, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & F(a & Fb))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, visit a b and c once do not visit b without visiting a and do not visit c without visiting b, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without" specifies we only visit one landmark after visiting another. "once" specifies that we visit a landmark only once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & F(c & F(d & Fd)))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, head to a b c and d in this order without skipping or revisiting any one of them, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fd))))".

F(a & F(b & F(c & F(d & Fd)))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, please go to a then b then c then d in that specific order without revisiting previously visited location, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fd))))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U (a & b & c)))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, go to a only once but keep away from b c and d and then go to b only once but keep away from a c and d and then go to c only once but keep way from a b and d and finally go to d once but keep away from a b and c, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only once" and "keep away" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U (a & b & c))))".

(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & F(b & F(c & Fd)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit each of a b c and d exactly once in this order, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & F(b & F(c & Fd))".

F(a & F(b & F(c & F(d & Fd)))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, visit a then b then c and then d in that strict order without returning to previously visited locations, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fd))))".

(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))) & F(a & F(b & F(c & F(d & Fh)))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, go from a to b to c to d to h in that specific order and only visit each landmark one time, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the last landmark h. The answer is "(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))) & F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a b c d and h in that exact order once you leave any location you cannot return to it, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that exact order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, visit a b c d and h in this order without skipping any one of them do not revisit any one of them once after you have been there , We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in this order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh)))) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

(!b U a), & U ! b a F b, ordered_visit, 2, ensure that you do not reach b before going to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "before" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". There is 1 landmark so we are done. The answer is "(!b U a)".

(!b U a), & U ! b a F b, ordered_visit, 2, do not visit b until you go to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". There is 1 landmark so we are done. The answer is "(!b U a)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, go to a and only then go to b, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "only then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, head to a first and then to b but do not visit b if you have not been to a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "do not visit b if you have not been to a" specifies we visit a landmark only once. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, first go directly to a without visiting any other waypoints then go directly to b then directly to c and finally directly to d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "directly" specifies that we visit a landmark only once. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c and d in this strict order once the predecessor is visited you must visit the successor, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "once the predecessor is visited you must visit the successor" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the last landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, visit a b c d in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, do not visit successor without visiting the predecessor in the following strict order a b c and d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in the following strict order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, go to a and only go to b only after a is visited and then go to c only after a and b are both visited and then go to d only after a b and c are all visited, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the last landmark d. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a b c d and h in this order without skipping any one of them, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in this order" and "without skipping any one of them" specify we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & Fd, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a then b then c finally d you cannot visit b before a you cannot visit c before b you cannot visit d before c you cannot visit h before d, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to h but only after visiting a b c d in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, go to a b c d and h in that specific order, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, visit a only after a is visited go to b only after b is visited go to c only after c is visited go to d only after d is visited go to h, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a. We visit each landmark only once except for the last landmark, h". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "visit h but not until we visit d" is "(!h U d)". "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

Fa & Fb & Fc & Fd & Fh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, keep going to h d c b and a, We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "keep going" specifies we must "eventually visit a, b, c, d, and h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd & Fh".

Ga & Gb & Gc & Gd & Gh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, you are prohibited from not going to d c h b and a forever, We must never visit some landmarks. Never is the "G" LTL operator. "prohibited from not going" specifies we must "never visit a, b, c, d, and h". Examining each part, "never visit a" is "Ga". "never visit b" is "Gb". Repeat for the remaining parts. The answer is "Ga & Gb & Gc & Gd & Gh".

F(a & F(b & F(c & F(d & Fh)))), & G F a & G F b & G F c & G F d G F h, patrolling, 5, cycle through d h b c and a, We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "cycle through" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

GF(a & b), & G F a G F b, patrolling, 2, keep going between a and b, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "keep going" specifies we must "eventually visit a and b forever". Examining each part, "eventually visit a and b forever" is "GF(a & b)". There are 2 landmarks so we are done. The answer is "GF(a & b)".

F(a & F(b & F(a & Fb))), & G F a G F b, patrolling, 2, keep going back and forth between a and b, We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "keep going back and forth" specifies we must "eventually visit a and then b and then a and then b forever". Examining each part, "eventually visit a and then b" is "F(a & Fb)". "eventually visit a and then b and then a and then b" is "F(a & F(b & F(a & Fb)))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(a & Fb)))".

Accuracy: 0.8865546218487395