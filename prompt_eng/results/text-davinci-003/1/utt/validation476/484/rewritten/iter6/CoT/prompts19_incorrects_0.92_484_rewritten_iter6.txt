Parsed_output, Ground_truth, LTL_type, Num_props, Instruction, Model_output

GFa, F a, visit, 1, Visit landmark a at least once., We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "at least once" specifies we must "eventually visit a forever". Examining each part, "eventually visit a forever" is "GFa". There is 1 landmark so we are done. The answer is "GFa".

GFa & GFb, & F a F b, visit, 2, Visit both landmarks a and b at least once., We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "at least once" specifies we must "eventually visit a and b forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". The answer is "GFa & GFb".

F(a & Fb), & F a F b, visit, 2, First, visit landmark a. Then, visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, Reach landmark a, then reach landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!a U b) & F(b U a), & F a F b, visit, 2, First, visit either landmark a or b. Then, visit the other landmark., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "First" and "Then" specify we must visit one landmark before the other. "We eventually visit the other landmark but not until we visit one of the two landmarks". Examining each part, "visit the other landmark but not until visit one of the two landmarks" is "(!b U a) & (!a U b)". "eventually visit the other landmark" is "F(b U a)". We reached the first landmark so we are done. The answer is "(!b U a) & (!a U b) & F(b U a)".

F(a & Fb), & F a F b, visit, 2, Visit a and then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & F a F b, visit, 2, Visit a and then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, Visit landmarks a, b, and c in order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in order" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!b U a) & (!c U b) & Fc, & F a & F b F c, visit, 3, Keep visiting landmarks until you have visited landmarks a, b, and c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

Fc & Fb, & F a & F b F c, visit, 3, Reach c and b., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "reach" specifies we must "eventually visit c and b". Examining each part, "eventually visit c" is "Fc". "eventually visit b" is "Fb". We reached the last landmark so we are done. The answer is "Fc & Fb".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, Visit a, then visit b, then visit c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & F a & F b F c, visit, 3, Visit a, then visit b, then visit c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

Fa & Fb, & F a & F b F c, visit, 3, Go to landmarks "a" and "b" when possible., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "when possible" specifies we must "eventually visit a and b". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". We reached the first landmark so we are done. The answer is "Fa & Fb".

F(a & F(d & F(c & Fb))), & F a & F b & F c F d, visit, 4, Visit landmarks a, d, c, and b in that order during your travels., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit d and then visit c and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit c and then visit b" is "F(c & Fb)". "eventually, visit d and then c and then visit b" is "F(d & F(c & Fb))". "eventually, visit a and then d and then c and then visit b" is "F(a & F(d & F(c & Fb)))". We reached the first landmark so we are done. The answer is "F(a & F(d & F(c & Fb)))".

(!b U a) & (!c U b) & (!d U c) & Fd, & F a & F b & F c F d, visit, 4, Keep visiting landmarks until all of them (a, b, c, and d) have been visited., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit all of the landmarks but not until we visit each one". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, Visit a, then visit b, then visit c, and finally visit d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & F a & F b & F c F d, visit, 4, Visit landmarks a, b, c, and d in order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, Visit landmarks a, b, c, d, and h in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, Visit landmarks a, d, c, h, and b at least once., We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "at least once" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

F(b & F(a & F(h & F(c & Fd)))), & F a & F b & F c & F d F h, visit, 5, Visit landmarks b, a, h, c, and d in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "b and then visit a and then visit h and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit h and then c and then visit d" is "F(h & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(b & F(a & F(h & F(c & Fd))))".

GFa & GFb & GFc & GFd & GFh, & F a & F b & F c & F d F h, visit, 5, Keep visiting landmarks until all of them (a, b, c, d, and h) have been visited., We must eventually visit some landmarks in any order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "until all of them have been visited" specifies we must "eventually visit a, b, c, d, and h forever". Examining each part, "eventually visit a forever" is "GFa". "eventually visit b forever" is "GFb". Repeat for the remaining parts. The answer is "GFa & GFb & GFc & GFd & GFh".

F(a & F(b & F(c & F(d & Fh)))), & F a & F b & F c & F d F h, visit, 5, Visit a, then b, then c, then d, and finally h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, After visiting a, go to b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "After" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

(!b U a) & Fb, F & a F b, sequenced_visit, 2, After visiting a, go to b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "After" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

(!b U a) & (!c U b) & Fc, F & a F & b F c, sequenced_visit, 3, Visit b after visiting a and visit c after visiting b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "after" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

(!b U a) & (!c U b) & (!d U c) & Fd, F & a F & b F & c F d, sequenced_visit, 4, Travel from a to b to c to d, ensuring that you visit b after a, c after b, and d after c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "ensuring" and "after" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

(!b U a) & (!c U b) & (!d U c) & Fd & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), F & a F & b F & c F d, sequenced_visit, 4, Visit b and c at least once after visiting a. Then, visit d at least once after visiting a, b, and c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" specifies we must visit a landmark at least once. "after visiting" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit b at least once" is "(!b U (b U (!b U c))). "visit c at least once" is "(!c U (c U (!c U d))). There are no other landmarks remaining besides the last landmark d so we are done. The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, visit landmark b after visiting a. After visiting b, visit landmark c. Once you have visited c, visit landmark d. Finally, visit landmark h after visiting d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" and "after" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U (a & b)) & (!d U (a & b & c)) & (!h U (a & b & c & d)) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit b, then visit c after visiting both a and b, then visit d after visiting a, b, and c, and finally visit h after visiting a, b, c, and d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit both a and b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit both a and b" is "(!c U (a & b))". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U (a & b)) & (!d U (a & b & c)) & (!h U (a & b & c & d)) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, First, visit landmark a. Then, proceed to landmark b. After that, make your way to landmark c. Once you have reached landmark c, continue on to landmark d. Finally, make your way to landmark h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" and "after that" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, F & a F & b F & c F & d F h, sequenced_visit, 5, Visit landmark a, then visit landmark b. After visiting landmark b, visit landmark c. Once you have visited landmark c, proceed to landmark d. After visiting landmark d, make your way to landmark h and remain there., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" and "after" specify we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit a. Then, visit b. Finally, visit c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First visit a, then visit b, and only after that, visit c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, Visit landmark a, then landmark b, and finally landmark c in that order. Do not visit any landmarks that come after the one you are currently heading towards., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" and "finally" specify we only visit one landmark after visiting another. "Do not visit any landmarks that come after the one you are currently heading towards" specifies that we visit a landmark only once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & (!c U b), & U ! b a & U ! c b F c, ordered_visit, 3, Do not visit c until you have visited b. Do not visit b until you have visited a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". The answer is "(!b U a) & (!c U b)".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))), & U ! b a & U ! c b F c, ordered_visit, 3, Visit a at least once, ensuring that you do not visit b or c during this time. Then, visit b at least once, ensuring that you do not visit c during this time. Finally, visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "at least once" and "ensuring" specify we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c)))".

(!b U a) & Fc & Gc, & U ! b a & U ! c b F c, ordered_visit, 3, Move to a while avoiding b and c. Then, eventually move to b while avoiding c. Finally, always be at c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a. We eventually visit c and stay there forever". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit c" is "Fc". "stay at c forever" is "Gc". The answer is "(!b U a) & Fc & Gc".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit landmark a. Then, eventually visit landmark b. Finally, eventually visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" and "finally" specify we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

Fa & G(!b) & Fb & G(!c) & Fc, & U ! b a & U ! c b F c, ordered_visit, 3, First, eventually reach a and always stay away from b. Then, eventually reach b and always stay away from c. Finally, eventually reach c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "First, eventually reach a and always stay away from b" specifies we must "eventually visit a and never visit b". Examining each part, "eventually visit a" is "Fa". "never visit b" is "G(!b)". "Then, eventually reach b and always stay away from c" specifies we must "eventually visit b and never visit c". Examining each part, "eventually visit b" is "Fb". "never visit c" is "G(!c)". "Finally, eventually reach c" specifies we must "eventually visit c". Examining each part, "eventually visit c" is "Fc". The answer is "Fa & G(!b) & Fb & G(!c) & Fc".

F(a & F(b & Fc)), & U ! b a & U ! c b F c, ordered_visit, 3, First, visit landmark a. Then, visit landmark b. Finally, visit landmark c., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". We reached the first landmark so we are done. The answer is "F(a & F(b & Fc))".

(!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, reach landmark a. Then, once you have reached a, proceed to landmark b without visiting any other landmarks in between., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

Fa & (!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Eventually reach a while always staying away from b, then eventually reach b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while always staying away from" and "then" specify we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "eventually visit a" is "Fa". The answer is "Fa & (!b U a) & Fb".

(!a U (a U (!a U b))) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Visit landmark a exactly once. Avoid landmark b. After visiting a, navigate to b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "exactly once" and "after" specify we only visit one landmark after visiting another. "We visit a only once and then visit b". Examining each part, "visit a only once" is (!a U (a U (!a U b))). "eventually visit b" is "Fb". The answer is "(!a U (a U (!a U b))) & Fb".

X(!b U !a) & (!b U a) & Fb & (!a U (a U (!a U b))), & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, Initially, do not visit b if a has not been visited yet. Then, visit a once and after that, visit b while avoiding a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Initially is the "X" LTL operator. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We initially do not visit b if a has not been visited yet. We eventually visit a once and then visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). "initially do not visit b if a has not been visited yet" is "X(!b U !a)". There are no other landmarks remaining besides the last landmark b so we are done. The answer is "X(!b U !a) & (!b U a) & Fb & (!a U (a U (!a U b)))".

(!B U A) & (!A U T) & FB & FA, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, complete all remaining tasks. Then, visit landmark A. After visiting landmark A, you may visit landmark B. You may not revisit landmark A until all tasks are completed., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "until" specifies we only visit one landmark after visiting another. "First, complete all remaining tasks. Then, visit landmark A. After visiting landmark A, you may visit landmark B. You may not revisit landmark A until all tasks are completed." Examining each part, "visit B but not until visit A" is "(!B U A)". "visit A but not until all tasks are completed" is "(!A U T)". "eventually visit B" is "FB". "eventually visit A" is "FA". The answer is "(!B U A) & (!A U T) & FB & FA".

(!b U a) & Fb, & & U ! b a F b U ! a U a U ! a b, strictly_ordered_visit, 2, First, visit landmark a. Then, visit landmark b, but only after visiting landmark a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". The answer is "(!b U a) & Fb".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, visit a without passing through b or c. Then, visit b without passing through c. Finally, visit c without revisiting any of the previous landmarks., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "without passing through" and "then" specify we only visit one landmark after visiting another. "without revisiting any of the previous landmarks" specifies that we visit a landmark only once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & Fc, & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, First, reach landmark a. Then, reach landmark b without revisiting landmark a. Finally, reach landmark c without revisiting landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without revisiting" specifies we only visit one landmark after visiting another. "We eventually visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". The answer is "(!b U a) & (!c U b) & Fc".

(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit a exactly once, avoiding b and c. Then, visit b exactly once, avoiding c. Finally, visit c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "avoiding" and "then" specify we only visit one landmark after visiting another. "exactly once" specifies we visit a landmark only once. "We eventually visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, c". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "eventually visit c" is "Fc". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). There are no other landmarks remaining besides the last landmark c so we are done. The answer is "(!b U a) & (!c U b) & Fc & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

F(a & F(b & Fc)) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))), & & U ! b a & U ! c b F c & U ! a U a U ! a b U ! b U b U ! b c, strictly_ordered_visit, 3, Visit landmarks a, b, and c in that order without skipping any of them. Do not revisit any of them once you have been there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c, eventually". Working backwards, "eventually, visit c" is "Fc". "eventually, visit b and then visit c" is "F(b & Fc)". "eventually, visit a and then b and then visit c" is "F(a & F(b & Fc))". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). We reached the first landmark so we are done. The answer is "F(a & F(b & Fc)) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d)))".

(!b U a) & (!c U b) & (!d U c) & Fd, & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, visit landmark a without stopping at landmark b. Then, visit landmark b without stopping at landmark c. After that, visit landmark c without stopping at landmark d. Finally, visit landmark d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "without stopping" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!a & !b & !c U d), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmark A exactly once, then visit landmark B exactly once, then visit landmark C exactly once, and finally visit landmark D exactly once. Always stay away from landmarks A, B, and C when visiting landmark D., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "exactly once" specifies that we visit a landmark only once. "stay away" specifies that we never visit a landmark again. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a. We visit each landmark only once except for the last landmark, d". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). "stay away from a, b, and c when visiting d" is "(!a & !b & !c U d)". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!a & !b & !c U d)".

(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & F(b & F(c & Fd)), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks a, b, c, and d in that order, each exactly once., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). "visit c only once" is (!c U (c U (!c U d))). We reached the first landmark so we are done. The answer is "(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & F(b & F(c & Fd))".

(!b U a) & (!c U b) & (!d U c) & Fd & (!b & !c & !d) & (!a & !b & !c) & (!a & !b & !d), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, First, do not approach landmarks b, c, and d. Then, visit landmark a. After visiting a, go directly to landmark b while avoiding landmarks a, c, and d. Next, go directly to landmark c while avoiding landmarks a, b, and d. Finally, go directly to landmark d while avoiding landmarks a, b, and c., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "while avoiding" and "then" specify we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". "avoid b, c, and d" is "(!b & !c & !d)". "avoid a, b, and c" is "(!a & !b & !c)". "avoid a, b, and d" is "(!a & !b & !d)". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & (!b & !c & !d) & (!a & !b & !c) & (!a & !b & !d)".

(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & F(a & F(b & F(c & Fd))), & & U ! b a & U ! c b & U ! d c F d & U ! a U a U ! a b & U ! b U b U ! b c U ! c U c U ! c d, strictly_ordered_visit, 4, Visit landmarks a, b, c, and d in that order without skipping any of them. Do not revisit any landmark once you have been there., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the last landmark d. The answer is "(!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & F(a & F(b & F(c & Fd)))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh, & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit a, then visit b without visiting a, then visit c without visiting b, then visit d without visiting c, then visit h without visiting d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh".

F(a & F(b & F(c & F(d & Fh)))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks a, b, c, d, and h in that exact order. Once you leave a landmark, you cannot return to it., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that exact order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks a, b, c, d, and h in that order without revisiting any landmark., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh)))) & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & & U ! b a & U ! c b & U ! d c & U ! h d F h & U ! a U a U ! a b & U ! b U b U ! b c & U ! c U c U ! c d U ! d U d U ! d h, strictly_ordered_visit, 5, Visit landmarks in sequence while staying away from the next landmark until reaching the final landmark without revisiting any previous landmarks., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "while staying away from the next landmark until reaching the final landmark" specifies we only visit one landmark after visiting another. "without revisiting any previous landmarks" specifies that we visit a landmark only once. Working backwards, "eventually, visit the final landmark" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

Fa & (!X U a) & FX, & U ! b a F b, ordered_visit, 2, First, go to a. Then, you can go to any other landmark, but only after you have visited a., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit any other landmark but not until we visit a". Examining each part, "visit any other landmark but not until visit a" is "(!X U a)". "eventually visit any other landmark" is "FX". "eventually visit a" is "Fa". The answer is "Fa & (!X U a) & FX".

F(a & Fb), & U ! b a F b, ordered_visit, 2, Visit b after visiting a., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "after" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, Visit a, then go to b without visiting any other landmarks in between., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, First visit a, then you can visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & Fb & (!a U (a U (!a U b))), & U ! b a F b, ordered_visit, 2, First, avoid landmark b. Then, eventually find landmark a. Once landmark a is found, always go to landmark b., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "avoid" and "then" specify we only visit one landmark after visiting another. "Once landmark a is found, always go to landmark b" specifies that we visit a landmark only once. "We eventually visit b but not until we visit a. We visit each landmark only once except for the last landmark, b". Examining each part, "visit b but not until visit a" is "(!b U a)". "eventually visit b" is "Fb". "visit a only once" is (!a U (a U (!a U b))). There are no other landmarks remaining besides the last landmark b so we are done. The answer is "(!b U a) & Fb & (!a U (a U (!a U b)))".

F(a & Fb), & U ! b a F b, ordered_visit, 2, First, visit landmark a. Then, visit landmark b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, First, visit a. Then, visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, Visit b after reaching a., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "after" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

F(a & Fb), & U ! b a F b, ordered_visit, 2, Visit a first, then visit b., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must "visit a and then visit b, eventually". Working backwards, "eventually, visit b" is "Fb". "eventually, visit a and then visit b" is "F(a & Fb)". We reached the first landmark so we are done. The answer is "F(a & Fb)".

(!b U a) & (!c U b) & (!d U c) & Fd & Gd, & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, First, eventually reach landmark a without passing through landmark b. Then, eventually reach landmark b without passing through landmark c. After that, eventually reach landmark c without passing through landmark d. Finally, always visit landmark d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "without passing through" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit d" is "Fd". "always visit d" is "Gd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd & Gd".

F(a & F(b & F(c & F(d & Fd)))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmarks a, b, c, and d in strict sequential order. You must visit the successor landmark immediately after visiting the predecessor landmark., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "strict sequential order" and "immediately after" specify we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fd))))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmark a, then landmark b, then landmark c, and finally landmark d in that specific order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "eventually, visit a and then b and then c and then visit d" is "F(a & F(b & F(c & Fd)))". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmarks a, b, c, and d in that specific order without visiting any waypoints out of turn., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "in that specific order" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & Fd))), & U ! b a & U ! c b & U ! d c F d, ordered_visit, 4, Visit landmark A, then visit landmark B, then visit landmark C, and finally visit landmark D., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "A and then visit B and then visit C and then visit D, eventually". Working backwards, "eventually, visit D" is "Fd". "eventually, visit C and then visit D" is "F(c & Fd)". "eventually, visit B and then C and then visit D" is "F(b & F(c & Fd))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & Fd)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit a, then visit b, then visit c, then visit d, then visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks a, b, c, d, and h in that order without skipping any of them., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & Fd, & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit a, then b, then c, and finally d. You cannot visit b before a, c before b, d before c, or h before d., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "We eventually visit d but not until we visit c and we visit c but not until we visit b and we visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". "visit d but not until we visit c" is "(!d U c)". "eventually visit d" is "Fd". The answer is "(!b U a) & (!c U b) & (!d U c) & Fd".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, First visit a, then b, then c, then d, and finally h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmark A, then visit landmark B, then visit landmark C, then visit landmark D, and finally visit landmark H., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmark a, then visit landmark b, then visit landmark c, then visit landmark d, and finally visit landmark h. Do not visit landmarks c, d, or h before visiting the previous landmark in the sequence., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. Eventually is the "F" LTL operator. "then" specifies we only visit one landmark after visiting another. "Do not visit landmarks c, d, or h before visiting the previous landmark in the sequence." specifies that we visit a landmark only once. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the last landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & Fd))) & (H U Fd), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks in the following order: a, then b, then c, then d. H must be visited before d., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d, eventually". Working backwards, "eventually, visit d" is "Fd". "eventually, visit c and then visit d" is "F(c & Fd)". "eventually, visit b and then c and then visit d" is "F(b & F(c & Fd))". "eventually, visit a and then b and then c and then visit d" is "F(a & F(b & F(c & Fd)))". "H must be visited before d" is "H U Fd". We reached the first landmark so we are done. The answer is "F(a & F(b & F(c & Fd))) & (H U Fd)".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmark a, then landmark b, then landmark c, then landmark d, and finally landmark h in that specific order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, First, go to landmark A. Then, go to landmark B only after you have visited A. Next, visit landmark C only after you have visited B. Then, visit landmark D only after you have visited C. Finally, visit landmark H only after you have visited D., We eventually visit some landmarks in a certain order while we cannot visit some landmarks until we visit others first. After we visit a landmark, we never visit it again. Eventually is the "F" LTL operator. "only after" specifies we only visit one landmark after visiting another. "We eventually visit h but not until we visit d and we visit d but not until we visit c and we visit c but not until we visit b and we eventually visit b but not until we visit a". Examining each part, "visit b but not until visit a" is "(!b U a)". "visit c but not until visit b" is "(!c U b)". Repeat for the remaining parts. "eventually visit h" is "Fh". "visit a only once" is (!a U (a U (!a U b))). "visit b only once" is (!b U (b U (!b U c))). Repeat for the remaining landmarks except for the landmark h. The answer is "(!b U a) & (!c U b) & (!d U c) & (!h U d) & Fh & (!a U (a U (!a U b))) & (!b U (b U (!b U c))) & (!c U (c U (!c U d))) & (!d U (d U (!d U h)))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit a, then visit b, then visit c, then visit d, and finally visit h., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

F(a & F(b & F(c & F(d & Fh)))), & U ! b a & U ! c b & U ! d c & U ! h d F h, ordered_visit, 5, Visit landmarks a, b, c, d, and h in sequential order without skipping any., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in sequential order" specifies we must visit "a and then visit b and then visit c and then visit d and then visit h, eventually". Working backwards, "eventually, visit h" is "Fh". "eventually, visit d and then visit h" is "F(d & Fh)". "eventually, visit c and then d and then visit h" is "F(c & F(d & Fh))". Keep doing this until we reach the first landmark. The answer is "F(a & F(b & F(c & F(d & Fh))))".

G(a & Fc & Fb), & G F a & G F b G F c, patrolling, 3, Always visit a, then eventually visit c, then eventually visit b, and repeat this pattern infinitely., We must eventually visit some landmarks in a certain order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "Always visit a" specifies we must "visit a forever". "then eventually visit c" specifies we must "visit a and then eventually visit c". "then eventually visit b" specifies we must "visit a and then eventually visit c and then eventually visit b". "repeat this pattern infinitely" specifies we must "visit a and then eventually visit c and then eventually visit b forever". Examining each part, "visit a forever" is "Ga". "visit a and then eventually visit c" is "G(a & Fc)". "visit a and then eventually visit c and then eventually visit b" is "G(a & Fc & Fb)". "visit a and then eventually visit c and then eventually visit b forever" is "G(a & Fc & Fb)". We reached the first landmark so we are done. The answer is "G(a & Fc & Fb)".

Fa & Fb & Fc & Fd, & G F a & G F b & G F c G F d, patrolling, 4, Visit landmarks a, b, c, and d in any order., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "visit" specifies we must "eventually visit a, b, c, and d". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd".

G(a & G(b & G(c & Gd))), & G F a & G F b & G F c G F d, patrolling, 4, Always visit a, then b, then c, then d, and repeat this sequence infinitely., We eventually visit some landmarks in a certain order and do so forever. Eventually is the "F" LTL operator. Forever is the "G" LTL operator. "Always" and "repeat" specify we must visit "a and then visit b and then visit c and then visit d, forever". Working backwards, "forever, visit d" is "Gd". "forever, visit c and then visit d" is "G(c & Gd)". "forever, visit b and then c and then visit d" is "G(b & G(c & Gd))". Keep doing this until we reach the first landmark. The answer is "G(a & G(b & G(c & Gd)))".

Fa & Fb & Fc & Fd & Fh, & G F a & G F b & G F c & G F d G F h, patrolling, 5, Visit landmarks a, b, c, d, and h in any order., We must eventually visit some landmarks in any order. Eventually is the "F" LTL operator. "visit" specifies we must "eventually visit a, b, c, d, and h". Examining each part, "eventually visit a" is "Fa". "eventually visit b" is "Fb". Repeat for the remaining parts. The answer is "Fa & Fb & Fc & Fd & Fh".

F(h & F(d & F(c & F(b & Fa)))), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Visit landmarks h, d, c, b, and a in that order., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "in that order" specifies we must visit "h and then visit d and then visit c and then visit b and then visit a, eventually". Working backwards, "eventually, visit a" is "Fa". "eventually, visit b and then visit a" is "F(b & Fa)". Keep doing this until we reach the first landmark. The answer is "F(h & F(d & F(c & F(b & Fa))))".

F(d & F(h & F(b & F(c & Fa)))), & G F a & G F b & G F c & G F d G F h, patrolling, 5, Visit d, then h, then b, then c, and finally a., We eventually visit some landmarks in a certain order. Eventually is the "F" LTL operator. "then" specifies we must visit "d and then visit h and then visit b and then visit c and then visit a, eventually". Working backwards, "eventually, visit a" is "Fa". "eventually, visit c and then visit a" is "F(c & Fa)". Keep doing this until we reach the first landmark. The answer is "F(d & F(h & F(b & F(c & Fa))))".

Accuracy: 0.8067226890756303